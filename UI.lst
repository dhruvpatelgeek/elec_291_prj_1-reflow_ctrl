0000              1   ;Start/Constants
                 -1       $MODLP51
0000              1   ;--------------------------------------------------------
0000              2   ; Special Function Registers
0000              3   ;--------------------------------------------------------
0000              4   ACC            DATA 0xe0
0000              5   B              DATA 0xf0
0000              6   PSW            DATA 0xd0
0000              7   SP             DATA 0x81
0000              8   SPX            DATA 0xef
0000              9   DPL            DATA 0x82
0000             10   DPH            DATA 0x83
0000             11   DPLB           DATA 0xd4
0000             12   DPHB           DATA 0xd5
0000             13   PAGE           DATA 0xf6
0000             14   AX             DATA 0xe1
0000             15   BX             DATA 0xf7
0000             16   DSPR           DATA 0xe2
0000             17   FIRD           DATA 0xe3
0000             18   MACL           DATA 0xe4
0000             19   MACH           DATA 0xe5
0000             20   PCON           DATA 0x87
0000             21   AUXR           DATA 0x8e
0000             22   AUXR1          DATA 0xa2
0000             23   DPCF           DATA 0xa1
0000             24   CKRL           DATA 0x97
0000             25   CKCKON0        DATA 0x8f
0000             26   CKCKON1        DATA 0xaf
0000             27   CKSEL          DATA 0x85
0000             28   CLKREG         DATA 0xae
0000             29   OSCCON         DATA 0x85
0000             30   IE             DATA 0xa8
0000             31   IEN0           DATA 0xa8
0000             32   IEN1           DATA 0xb1
0000             33   IPH0           DATA 0xb7
0000             34   IP             DATA 0xb8
0000             35   IPL0           DATA 0xb8
0000             36   IPH1           DATA 0xb3
0000             37   IPL1           DATA 0xb2
0000             38   P0             DATA 0x80
0000             39   P1             DATA 0x90
0000             40   P2             DATA 0xa0
0000             41   P3             DATA 0xb0
0000             42   P4             DATA 0xc0
0000             43   P0M0           DATA 0xe6
0000             44   P0M1           DATA 0xe7
0000             45   P1M0           DATA 0xd6
0000             46   P1M1           DATA 0xd7
0000             47   P2M0           DATA 0xce
0000             48   P2M1           DATA 0xcf
0000             49   P3M0           DATA 0xc6
0000             50   P3M1           DATA 0xc7
0000             51   P4M0           DATA 0xbe
0000             52   P4M1           DATA 0xbf
0000             53   SCON           DATA 0x98
0000             54   SBUF           DATA 0x99
0000             55   SADEN          DATA 0xb9
0000             56   SADDR          DATA 0xa9
0000             57   BDRCON         DATA 0x9b
0000             58   BRL            DATA 0x9a
0000             59   TCON           DATA 0x88
0000             60   TMOD           DATA 0x89
0000             61   TCONB          DATA 0x91
0000             62   TL0            DATA 0x8a
0000             63   TH0            DATA 0x8c
0000             64   TL1            DATA 0x8b
0000             65   TH1            DATA 0x8d
0000             66   RL0            DATA 0xf2
0000             67   RL1            DATA 0xf3
0000             68   RH0            DATA 0xf4
0000             69   RH1            DATA 0xf5
0000             70   WDTRST         DATA 0xa6
0000             71   WDTPRG         DATA 0xa7
0000             72   T2CON          DATA 0xc8
0000             73   T2MOD          DATA 0xc9
0000             74   RCAP2H         DATA 0xcb
0000             75   RCAP2L         DATA 0xca
0000             76   TH2            DATA 0xcd
0000             77   TL2            DATA 0xcc
0000             78   SPCON          DATA 0xc3
0000             79   SPSTA          DATA 0xc4
0000             80   SPDAT          DATA 0xc5
0000             81   SSCON          DATA 0x93
0000             82   SSCS           DATA 0x94
0000             83   SSDAT          DATA 0x95
0000             84   SSADR          DATA 0x96
0000             85   KBLS           DATA 0x9c
0000             86   KBE            DATA 0x9d
0000             87   KBF            DATA 0x9e
0000             88   KBMOD          DATA 0x9f
0000             89   BMSEL          DATA 0x92
0000             90   FCON           DATA 0xd2
0000             91   EECON          DATA 0xd2
0000             92   ACSRA          DATA 0xa3
0000             93   ACSRB          DATA 0xab
0000             94   AREF           DATA 0xbd
0000             95   DADC           DATA 0xa4
0000             96   DADI           DATA 0xa5
0000             97   DADL           DATA 0xac
0000             98   DADH           DATA 0xad
0000             99   CCON           DATA 0xd8
0000            100   CMOD           DATA 0xd9
0000            101   CL             DATA 0xe9
0000            102   CH             DATA 0xf9
0000            103   CCAPM0         DATA 0xda
0000            104   CCAPM1         DATA 0xdb
0000            105   CCAPM2         DATA 0xdc
0000            106   CCAPM3         DATA 0xdd
0000            107   CCAPM4         DATA 0xde
0000            108   CCAP0H         DATA 0xfa
0000            109   CCAP1H         DATA 0xfb
0000            110   CCAP2H         DATA 0xfc
0000            111   CCAP3H         DATA 0xfd
0000            112   CCAP4H         DATA 0xfe
0000            113   CCAP0L         DATA 0xea
0000            114   CCAP1L         DATA 0xeb
0000            115   CCAP2L         DATA 0xec
0000            116   CCAP3L         DATA 0xed
0000            117   CCAP4L         DATA 0xee
0000            118   ;--------------------------------------------------------
0000            119   ; special function bits
0000            120   ;--------------------------------------------------------
0000            121   P              BIT 0xd0
0000            122   F1             BIT 0xd1
0000            123   OV             BIT 0xd2
0000            124   RS0            BIT 0xd3
0000            125   RS1            BIT 0xd4
0000            126   F0             BIT 0xd5
0000            127   AC             BIT 0xd6
0000            128   CY             BIT 0xd7
0000            129   EX0            BIT 0xa8
0000            130   ET0            BIT 0xa9
0000            131   EX1            BIT 0xaa
0000            132   ET1            BIT 0xab
0000            133   ES             BIT 0xac
0000            134   ET2            BIT 0xad
0000            135   EC             BIT 0xae
0000            136   EA             BIT 0xaf
0000            137   PX0            BIT 0xb8
0000            138   PT0            BIT 0xb9
0000            139   PX1            BIT 0xba
0000            140   PT1            BIT 0xbb
0000            141   PS             BIT 0xbc
0000            142   PT2            BIT 0xbd
0000            143   IP0D           BIT 0xbf
0000            144   PPCL           BIT 0xbe
0000            145   PT2L           BIT 0xbd
0000            146   PLS            BIT 0xbc
0000            147   PT1L           BIT 0xbb
0000            148   PX1L           BIT 0xba
0000            149   PT0L           BIT 0xb9
0000            150   PX0L           BIT 0xb8
0000            151   RXD            BIT 0xb0
0000            152   TXD            BIT 0xb1
0000            153   INT0           BIT 0xb2
0000            154   INT1           BIT 0xb3
0000            155   T0             BIT 0xb4
0000            156   T1             BIT 0xb5
0000            157   WR             BIT 0xb6
0000            158   RD             BIT 0xb7
0000            159   RI             BIT 0x98
0000            160   TI             BIT 0x99
0000            161   RB8            BIT 0x9a
0000            162   TB8            BIT 0x9b
0000            163   REN            BIT 0x9c
0000            164   SM2            BIT 0x9d
0000            165   SM1            BIT 0x9e
0000            166   SM0            BIT 0x9f
0000            167   IT0            BIT 0x88
0000            168   IE0            BIT 0x89
0000            169   IT1            BIT 0x8a
0000            170   IE1            BIT 0x8b
0000            171   TR0            BIT 0x8c
0000            172   TF0            BIT 0x8d
0000            173   TR1            BIT 0x8e
0000            174   TF1            BIT 0x8f
0000            175   CP_RL2         BIT 0xc8
0000            176   C_T2           BIT 0xc9
0000            177   TR2            BIT 0xca
0000            178   EXEN2          BIT 0xcb
0000            179   TCLK           BIT 0xcc
0000            180   RCLK           BIT 0xcd
0000            181   EXF2           BIT 0xce
0000            182   TF2            BIT 0xcf
0000            183   CF             BIT 0xdf
0000            184   CR             BIT 0xde
0000            185   CCF4           BIT 0xdc
0000            186   CCF3           BIT 0xdb
0000            187   CCF2           BIT 0xda
0000            188   CCF1           BIT 0xd9
0000            189   CCF0           BIT 0xd8
0000              3           ; Reset vector
0000              4           org 0x0000
0000 0208DC       5               ljmp MainProgram
0003              6   
0003              7           ; External interrupt 0 vector (not used in this code)
0003              8           org 0x0003
0003 32           9               reti
0004             10   
0004             11           ; Timer/Counter 0 overflow interrupt vector
000B             12           org 0x000B
000B 02037B      13               ljmp Timer0_ISR
000E             14   
000E             15           ; External interrupt 1 vector (not used in this code)
0013             16           org 0x0013
0013 32          17               reti
0014             18   
0014             19           ; Timer/Counter 1 overflow interrupt vector (not used in this code)
001B             20           org 0x001B
001B 32          21               reti
001C             22   
001C             23           ; Serial port receive/transmit interrupt vector (not used in this code)
0023             24           org 0x0023 
0023 32          25               reti
0024             26               
0024             27           ; Timer/Counter 2 overflow interrupt vector
002B             28           org 0x002B
002B 020397      29               ljmp Timer2_ISR
002E             30   
002E             31       ;CLK  EQU 22118400
002E             32       CLK  EQU 22118400
002E             33       ;termometer
002E             34       BAUD equ 115200
002E             35       BRG_VAL equ (0x100-(CLK/(16*BAUD)))
002E             36       ;timer
002E             37       TIMER0_RATE   EQU 4096     ; 2048Hz squarewave (peak amplitude of CEM-1203 speaker)
002E             38       TIMER0_RELOAD EQU ((65536-(CLK/TIMER0_RATE)))
002E             39       TIMER2_RATE   EQU 1000     ; 1000Hz, for a timer tick of 1ms
002E             40       TIMER2_RELOAD EQU ((65536-(CLK/TIMER2_RATE)))
002E             41   
002E             42   
002E             43       ; There is a couple of typos in MODLP51 in the definition of the timer 0/1 reload
002E             44       ; special function registers (SFRs), so:
002E             45   
002E             46       TIMER0_RELOAD_L DATA 0xf2
002E             47       TIMER1_RELOAD_L DATA 0xf3
002E             48       TIMER0_RELOAD_H DATA 0xf4
002E             49       TIMER1_RELOAD_H DATA 0xf5
002E             50   
002E             51   ;Variables (dseg)
0030             52       DSEG at 30H
0030             53   
0030             54       Result:    ds 4
0034             55       x:         ds 4
0038             56       y:         ds 4
003C             57       bcd:       ds 5
0041             58       ;FSM varialbles
0041             59       temp_soak: ds 1
0042             60       time_soak: ds 1
0043             61       temp_refl: ds 1
0044             62       time_refl: ds 1
0045             63       state:     ds 1
0046             64       state_lcd: ds 1
0047             65       temp:      ds 1
0048             66       sec:       ds 1
0049             67       pwm:       ds 1 ; Register that controls the power of the oven 
004A             68       ;;owen_temp ds 1
004A             69   
004A             70       ;Timer variables
004A             71       Count1ms:     ds 2 ; Used to determine when half second has passed
004C             72       reflow_temp:  ds 2
004E             73       reflow_temp_var: ds 1
004F             74       BCD_counter:  ds 1 ; The BCD counter incrememted in the ISR and displayed in the main loop
0050             75       min:          ds 1
0051             76       hour:         ds 1
0052             77       reflow_sec:   ds 1
0053             78       reflow_min:   ds 1
0054             79       alarm_min:    ds 1
0055             80       alarm_hour:   ds 1
0056             81       day:          ds 1
0057             82       month:        ds 1
0058             83       year:         ds 1
0059             84       hour_24:      ds 1
005A             85   
005A             86   
005A             87   ;flags (bseg)
0000             88       bseg
0000             89       mf:                dbit 1
0001             90       half_seconds_flag: dbit 1 ; Set to one in the ISR every time 500 ms had passed
0002             91       AMPM_flag:         dbit 1
0003             92       alarm_AMPM_flag:   dbit 1
0004             93       on_off_flag:       dbit 1 ; 1 is on
0005             94       alarm_buzzer_flag: dbit 1
0006             95       TR2_flag:          dbit 1
0007             96       tt_reflow_flag:    dbit 1
0008             97   
0008             98   ;Pins Config (cseg)
002E             99       CSEG 
002E            100   
002E            101       done_button equ P0.0    
002E            102       done                   equ P0.1
002E            103       setup                  equ P0.2
002E            104       setmin                 equ P0.3
002E            105       sethour        equ P0.4
002E            106       setday        equ P0.5
002E            107   
002E            108       start         equ P0.7
002E            109   
002E            110       LCD_RS        equ P1.1
002E            111       LCD_RW        equ P1.2
002E            112       LCD_E         equ P1.3
002E            113       start2         equ p1.7   ;in slide it was KEY.3 which should be decided later so p1.7 is just a random pin
002E            114   
002E            115   
002E            116       ; These �EQU� must match the wiring between the microcontroller and ADC 
002E            117       CE_ADC       EQU  P2.0 
002E            118       MY_MOSI      EQU  P2.1 
002E            119       MY_MISO      EQU  P2.2 
002E            120       MY_SCLK      EQU  P2.3
002E            121       SETUP_SOAK_Button equ  P2.4
002E            122       set_BUTTON           equ  P2.5
002E            123       Button_min    equ  P2.6
002E            124       HOME_BUTTON   equ  P2.7
002E            125   
002E            126       ;LCD 4bits data
002E            127       LCD_D4        equ  P3.2
002E            128       LCD_D5        equ  P3.3
002E            129       LCD_D6        equ  P3.4
002E            130       LCD_D7        equ  P3.5
002E            131   
002E            132       BOOT_BUTTON   equ  P4.5
002E            133       SOUND_OUT     equ  P3.7
002E            134   
002E            135   ;include files 
                546   $LIST
                138   	    $LIST
0362            140   
0362            141   
0362            142   ;ISR
0362            143   
0362            144       
0362            145       ;---------------------------------;
0362            146       ; Routine to initialize the ISR   ;
0362            147       ; for timer 0                     ;
0362            148       ;---------------------------------;
0362            149       Timer0_Init:
0362 E589       150           mov a, TMOD
0364 54F0       151           anl a, #0xf0 ; Clear the bits for timer 0
0366 4401       152           orl a, #0x01 ; Configure timer 0 as 16-timer
0368 F589       153           mov TMOD, a
036A 758CEA     154           mov TH0, #high(TIMER0_RELOAD)
036D 758AE8     155           mov TL0, #low(TIMER0_RELOAD)
0370            156           ; Set autoreload value
0370 75F4EA     157           mov TIMER0_RELOAD_H, #high(TIMER0_RELOAD)
0373 75F2E8     158           mov TIMER0_RELOAD_L, #low(TIMER0_RELOAD)
0376            159           ; Enable the timer and interrupts
0376 D2A9       160           setb ET0  ; Enable timer 0 interrupt
0378 D28C       161           setb TR0  ; Start timer 0
037A 22         162           ret
037B            163   
037B            164       ;---------------------------------;
037B            165       ; ISR for timer 0.  Set to execute;
037B            166       ; every 1/4096Hz to generate a    ;
037B            167       ; 2048 Hz square wave at pin P3.7 ;
037B            168       ;---------------------------------;
037B            169       Timer0_ISR:
037B            170           ;clr TF0  ; According to the data sheet this is done for us already.
037B B2B7       171           cpl SOUND_OUT ; Connect speaker to P3.7!
037D 32         172           reti
037E            173   
037E            174       ;---------------------------------;
037E            175       ; Routine to initialize the ISR   ;
037E            176       ; for timer 2                     ;
037E            177       ;---------------------------------;
037E            178       Timer2_Init:
037E 75C800     179           mov T2CON, #0 ; Stop timer/counter.  Autoreload mode.
0381 75CDA9     180           mov TH2, #high(TIMER2_RELOAD)
0384 75CC9A     181           mov TL2, #low(TIMER2_RELOAD)
0387            182           ; Set the reload value
0387 75CBA9     183           mov RCAP2H, #high(TIMER2_RELOAD)
038A 75CA9A     184           mov RCAP2L, #low(TIMER2_RELOAD)
038D            185           ; Init One millisecond interrupt counter.  It is a 16-bit variable made with two 8-bit parts
038D E4         186           clr a
038E F54A       187           mov Count1ms+0, a
0390 F54B       188           mov Count1ms+1, a
0392            189           ; Enable the timer and interrupts
0392 D2AD       190           setb ET2  ; Enable timer 2 interrupt
0394 D2CA       191           setb TR2  ; Enable timer 2
0396 22         192           ret
0397            193   
0397            194       ;---------------------------------;
0397            195       ; ISR for timer 2                 ;
0397            196       ;---------------------------------;
0397            197       Timer2_ISR:
0397 C2CF       198           clr TF2  ; Timer 2 doesn't clear TF2 automatically. Do it in ISR
0399 B2B6       199           cpl P3.6 ; To check the interrupt rate with oscilloscope. It must be precisely a 1 ms pulse.
039B            200           
039B            201           ; The two registers used in the ISR must be saved in the stack
039B C0E0       202           push acc
039D C0D0       203           push psw
039F            204           
039F            205           ; Increment the 16-bit one mili second counter
039F 054A       206           inc Count1ms+0    ; Increment the low 8-bits first
03A1 E54A       207           mov a, Count1ms+0 ; If the low 8-bits overflow, then increment high 8-bits
03A3 7002       208           jnz Inc_Done
03A5 054B       209           inc Count1ms+1
03A7            210   
03A7            211       Inc_Done:
03A7            212           ; Check if half second has passed
03A7 E54A       213           mov a, Count1ms+0
03A9 B4E817     214           cjne a, #low(1000), Timer2_ISR_done ; Warning: this instruction changes the carry flag!
03AC E54B       215           mov a, Count1ms+1
03AE B40312     216           cjne a, #high(1000), Timer2_ISR_done
03B1            217           
03B1            218           ; 500 milliseconds have passed.  Set a flag so the main program knows
03B1 D201       219           setb half_seconds_flag ; Let the main program know half second had passed
03B3 B28C       220           cpl TR0 ; Enable/disable timer/counter 0. This line creates a beep-silence-beep-silence sound.
03B5            221           ; Reset to zero the milli-seconds counter, it is a 16-bit variable
03B5 E4         222           clr a
03B6 F54A       223           mov Count1ms+0, a
03B8 F54B       224           mov Count1ms+1, a
03BA            225           ; Increment the BCD counter
03BA E54F       226           mov a, BCD_counter
03BC            227          ; jnb UPDOWN, Timer2_ISR_decrement
03BC 2401       228           add a, #0x01
03BE 8000       229           sjmp Timer2_ISR_da
03C0            230       Timer2_ISR_decrement:
03C0            231          ; add a, #0x99 ; Adding the 10-complement of -1 is like subtracting 1.
03C0            232       Timer2_ISR_da:
03C0 D4         233           da a ; Decimal adjust instruction.  Check datasheet for more details!
03C1 F54F       234           mov BCD_counter, a
03C3            235           
03C3            236       Timer2_ISR_done:
03C3 D0D0       237           pop psw
03C5 D0E0       238           pop acc
03C7 32         239           reti
03C8            240   
03C8            241   
03C8            242   ;CONFIG:
03C8            243       ; Configure the serial port and baud rate
03C8            244       InitSerialPort:
03C8            245           ; Since the reset button bounces, we need to wait a bit before
03C8            246           ; sending messages, otherwise we risk displaying gibberish!
03C8 79DE       247           mov R1, #222
03CA 78A6       248           mov R0, #166
03CC D8FE       249           djnz R0, $   ; 3 cycles->3*45.21123ns*166=22.51519us
03CE D9FA       250           djnz R1, $-4 ; 22.51519us*222=4.998ms
03D0            251           ; Now we can proceed with the configuration
03D0 438780     252           orl      PCON,#0x80
03D3 759852     253           mov      SCON,#0x52
03D6 759B00     254           mov      BDRCON,#0x00
03D9 759AF4     255           mov      BRL,#BRG_VAL
03DC 759B1E     256           mov      BDRCON,#0x1E ; BDRCON=BRR|TBCK|RBCK|SPD;
03DF 22         257           ret
03E0            258   
03E0            259       ; Send a character using the serial port
03E0            260       putchar:
03E0 3099FD     261           jnb TI, putchar 
03E3            262           ; TI serial interrupt flag is set and when last bit (stop bit) 
03E3            263           ; of receiving data byte is received, RI flag get set. IE register
03E3            264           ; is used to enable/disable interrupt sources.
03E3 C299       265           clr TI
03E5 F599       266           mov SBUF, a
03E7 22         267           ret
03E8            268   
03E8            269       getchar: 
03E8 3098FD     270           jnb RI, getchar 
03EB C298       271           clr RI 
03ED E599       272           mov a, SBUF 
03EF 22         273           ret
03F0            274   
03F0            275       ; Send a constant-zero-terminated string using the serial port
03F0            276       SendString:
03F0 E4         277           clr A
03F1 93         278           movc A, @A+DPTR
03F2 6006       279           jz SendStringDone
03F4 1203E0     280           lcall putchar
03F7 A3         281           inc DPTR
03F8 80F6       282           sjmp SendString
03FA            283       SendStringDone:
03FA 22         284           ret
03FB            285   
03FB            286       INIT_SPI:     
03FB D2A2       287           setb MY_MISO    ; Make MISO an input pin  1 master input 0 slave out   ;MISO master in/slave out
03FD C2A3       288           clr MY_SCLK     ; For mode (0,0) SCLK is zero     
03FF 22         289           ret 
0400            290   
0400            291       DO_SPI_G:     
0400 C0E0       292           push acc     
0402 7900       293           mov R1, #0      ; Received byte stored in R1     
0404 7A08       294           mov R2, #8      ; Loop counter (8-bits)
0406            295           
0406            296       DO_SPI_G_LOOP:     
0406 E8         297           mov a, R0       ; Byte to write is in R0     
0407 33         298           rlc a           ; Carry flag has bit to write 
0408 F8         299           mov R0, a     
0409 92A1       300           mov MY_MOSI, c     
040B D2A3       301           setb MY_SCLK    ; Transmit     
040D A2A2       302           mov c, MY_MISO  ; Read received bit     
040F E9         303           mov a, R1       ; Save received bit in R1     
0410 33         304           rlc a     
0411 F9         305           mov R1, a     
0412 C2A3       306           clr MY_SCLK     
0414 DAF0       307           djnz R2, DO_SPI_G_LOOP     
0416 D0E0       308           pop acc     
0418 22         309           ret 
0419            310       
0419            311   WaitHalfSec:
0419 7AB2       312           mov R2, #178
041B 79FA       313           Lr3: mov R1, #250
041D 78A6       314           Lr2: mov R0, #166
041F D8FE       315           Lr1: djnz R0, Lr1 ; 3 cycles->3*45.21123ns*166=22.51519us
0421 D9FA       316           djnz R1, Lr2 ; 22.51519us*250=5.629ms
0423 DAF6       317           djnz R2, Lr3 ; 5.629ms*89=0.5s (approximately)
0425 22         318           ret
0426            319            
0426            320   blink:
0426 75817F     321           mov SP, #7FH
0429 75C700     322           mov P3M1, #0   ; Configure P3 in bidirectional mode
042C            323       M0:
042C B2B7       324           cpl P3.7
042E C0E0       325            push acc
0430 7401       325            mov a, #1
0432 14         325            dec a
0433 120331     325            lcall ?Set_Cursor_1 ; Select column and row
0436 D0E0       325            pop acc
0438 C083       326            push dph
043A C082       326            push dpl
043C C0E0       326            push acc
043E 9004BF     326            mov dptr, #nothing
0441 120324     326            lcall ?Send_Constant_String
0444 D0E0       326            pop acc
0446 D082       326            pop dpl
0448 D083       326            pop dph
044A C0E0       327            push acc
044C 7401       327            mov a, #1
044E 14         327            dec a
044F 12032F     327            lcall ?Set_Cursor_2 ; Select column and row
0452 D0E0       327            pop acc
0454 C083       328            push dph
0456 C082       328            push dpl
0458 C0E0       328            push acc
045A 9004BF     328            mov dptr, #nothing
045D 120324     328            lcall ?Send_Constant_String
0460 D0E0       328            pop acc
0462 D082       328            pop dpl
0464 D083       328            pop dph
0466 C0E0       329            push acc
0468 7401       329            mov a, #1
046A 14         329            dec a
046B 120331     329            lcall ?Set_Cursor_1 ; Select column and row
046E D0E0       329            pop acc
0470 C083       330            push dph
0472 C082       330            push dpl
0474 C0E0       330            push acc
0476 9004E1     330            mov dptr, #hot
0479 120324     330            lcall ?Send_Constant_String
047C D0E0       330            pop acc
047E D082       330            pop dpl
0480 D083       330            pop dph
0482 C0E0       331            push acc
0484 7401       331            mov a, #1
0486 14         331            dec a
0487 12032F     331            lcall ?Set_Cursor_2 ; Select column and row
048A D0E0       331            pop acc
048C C083       332            push dph
048E C082       332            push dpl
0490 C0E0       332            push acc
0492 9004E1     332            mov dptr, #hot
0495 120324     332            lcall ?Send_Constant_String
0498 D0E0       332            pop acc
049A D082       332            pop dpl
049C D083       332            pop dph
049E            333   
049E 120419     334           lcall WaitHalfSec
04A1            335   
04A1 22         336           ret
04A2            337   
04A2            338       
04A2            339   Strings:
04A2            340       ;Hello_World:
04A2            341           ;DB  'Hello, World!', '\r', '\n', 0
04A2            342       Newline:
04A2 0D0A00     343               DB   '\r', '\n', 0
04A5            344       Space:
04A5 20202020   345               DB   '      ','\r', '\n', 0
     20200D0A
     00
04AE            346   
04AE            347                       ;     1234567890123456
04AE 54656D70   348       Temp0:            db 'Temp:xxxC       ', 0
     3A787878
     43202020
     20202020
     00
04BF 20202020   349       nothing:          db '                ',0
     20202020
     20202020
     20202020
     00
04D0 20202020   350       test2:            db '      Test2     ',0
     20205465
     73743220
     20202020
     00
04E1 20202020   351       hot:                           db '      HOT       ', 0
     2020484F
     54202020
     20202020
     00
04F2 54696D65   352       Time:             db 'Time xx:xx SET  ', 0
     2078783A
     78782053
     45542020
     00
0503 3A00       353       dots:             db ':',0
0505 2020534F   354       soak_reflw:       db '  SOAK  REFLOW  ', 0
     414B2020
     5245464C
     4F572020
     00
0516 54656D70   355       reflow_setup:     db 'Temp',0
     00
051B 2A524546   356       reflow_setup4:    db '*REFLOW*',0
     4C4F572A
     00
0524 54696D65   357       reflow_setup2:    db 'Time',0
     00
0529 484F4D45   358       reflow_setup3:    db 'HOME',0
     00
052E            359   
052E            360   
052E            361   convert:
052E 853034     362       mov x+0, Result
0531 853135     363            mov x+1, Result+1 
0534 753600     364            mov x+2, #0
0537 753700     365            mov x+3, #0
053A 22         366       ret
053B            367   Display_temp:
053B 75389A     368            mov y+0, #low (410 % 0x10000) 
053E 753901     368            mov y+1, #high(410 % 0x10000) 
0541 753A00     368            mov y+2, #low (410 / 0x10000) 
0544 753B00     368            mov y+3, #high(410 / 0x10000) 
0547            368   
0547 1201A8     369       lcall mul32
054A 7538FF     370            mov y+0, #low (1023 % 0x10000) 
054D 753903     370            mov y+1, #high(1023 % 0x10000) 
0550 753A00     370            mov y+2, #low (1023 / 0x10000) 
0553 753B00     370            mov y+3, #high(1023 / 0x10000) 
0556 120235     371       lcall div32
0559 753811     372            mov y+0, #low (273 % 0x10000) 
055C 753901     372            mov y+1, #high(273 % 0x10000) 
055F 753A00     372            mov y+2, #low (273 / 0x10000) 
0562 753B00     372            mov y+3, #high(273 / 0x10000) 
0565 120114     373       lcall sub32
0568 12002E     374       lcall hex2bcd
056B 1203C8     375       lcall InitSerialPort
056E C0E0       376            push acc
0570 7401       376            mov a, #1
0572 14         376            dec a
0573 120331     376            lcall ?Set_Cursor_1 ; Select column and row
0576 D0E0       376            pop acc
0578 C083       377            push dph
057A C082       377            push dpl
057C C0E0       377            push acc
057E 9004AE     377            mov dptr, #Temp0
0581 120324     377            lcall ?Send_Constant_String
0584 D0E0       377            pop acc
0586 D082       377            pop dpl
0588 D083       377            pop dph
058A 1203F0     378       lcall SendString
058D C0E0       379            push acc
058F 7405       379            mov a, #5
0591 14         379            dec a
0592 120331     379            lcall ?Set_Cursor_1 ; Select column and row
0595 D0E0       379            pop acc    
0597 C000       380            push ar0
0599 A83D       380            mov r0, bcd+1
059B 12034C     380            lcall ?Send_BCD
059E D000       380            pop ar0 ; send fisrt 2 digits to putty
05A0 C000       381            push ar0
05A2 A83D       381            mov r0, bcd+1
05A4 120336     381            lcall ?Display_BCD
05A7 D000       381            pop ar0; send fisrt 2 digits to lcd
05A9 C0E0       382            push acc
05AB 7407       382            mov a, #7
05AD 14         382            dec a
05AE 120331     382            lcall ?Set_Cursor_1 ; Select column and row
05B1 D0E0       382            pop acc 
05B3 C000       383            push ar0
05B5 A83C       383            mov r0, bcd
05B7 12034C     383            lcall ?Send_BCD
05BA D000       383            pop ar0 ; send last 2 digits to putty
05BC C000       384            push ar0
05BE A83C       384            mov r0, bcd+0
05C0 120336     384            lcall ?Display_BCD
05C3 D000       384            pop ar0 ; send last 2 digits to lcd
05C5 C0E0       385            push acc
05C7 7405       385            mov a, #5
05C9 14         385            dec a
05CA 120331     385            lcall ?Set_Cursor_1 ; Select column and row
05CD D0E0       385            pop acc
05CF C083       386            push dph
05D1 C082       386            push dpl
05D3 C0E0       386            push acc
05D5 900503     386            mov dptr, #dots
05D8 120324     386            lcall ?Send_Constant_String
05DB D0E0       386            pop acc
05DD D082       386            pop dpl
05DF D083       386            pop dph
05E1 1203F0     387       lcall SendString
05E4 9004A2     388       mov DPTR, #Newline
05E7 1203F0     389       lcall SendString
05EA 22         390       ret
05EB            391   config_adc:
05EB C2A0       392           clr CE_ADC 
05ED 7801       393           mov R0, #00000001B; Start bit:1 
05EF 120400     394           lcall DO_SPI_G
05F2            395   
05F2 7880       396           mov R0, #10000000B; Single ended, read channel 0 
05F4 120400     397           lcall DO_SPI_G 
05F7 E9         398           mov a, R1          ; R1 contains bits 8 and 9 
05F8 5403       399           anl a, #00000011B  ; We need only the two least significant bits 
05FA F531       400           mov Result+1, a    ; Save result high.
05FC            401   
05FC 7855       402           mov R0, #55H; It doesn't matter what we transmit... 
05FE 120400     403           lcall DO_SPI_G 
0601 8930       404           mov Result, R1     ; R1 contains bits 0 to 7.  Save result low. 
0603 D2A0       405           setb CE_ADC 
0605 12052E     406           lcall convert  
0608 E53C       407           mov a, bcd ; move temp to accumulator 
060A 22         408           ret
060B            409   Reset_timer:
060B            410   
060B C2CA       411       clr TR2                 ; Stop timer 2
060D E4         412       clr a
060E F54A       413            mov Count1ms+0, a
0610 F54B       414            mov Count1ms+1, a
0612            415            ; Now clear the BCD counter and min
0612 F54F       416            mov BCD_counter, a
0614 D2CA       417            setb TR2                ; Start timer 2
0616            418   
0616 22         419       ret
0617            420   Display_time:
0617 C0E0       421            push acc
0619 7401       421            mov a, #1
061B 14         421            dec a
061C 12032F     421            lcall ?Set_Cursor_2 ; Select column and row
061F D0E0       421            pop acc
0621 C083       422            push dph
0623 C082       422            push dpl
0625 C0E0       422            push acc
0627 9004F2     422            mov dptr, #Time
062A 120324     422            lcall ?Send_Constant_String
062D D0E0       422            pop acc
062F D082       422            pop dpl
0631 D083       422            pop dph
0633 C201       423       clr half_seconds_flag ; We clear this flag in the main loop, but it is set in the ISR for timer 2
0635 C0E0       424            push acc
0637 7409       424            mov a, #9
0639 14         424            dec a
063A 12032F     424            lcall ?Set_Cursor_2 ; Select column and row
063D D0E0       424            pop acc     ; the place in the LCD where we want the BCD counter value
063F C000       425            push ar0
0641 A84F       425            mov r0, BCD_counter
0643 120336     425            lcall ?Display_BCD
0646 D000       425            pop ar0 ; This macro is also in 'LCD_4bit.inc'
0648 C0E0       426            push acc
064A 7406       426            mov a, #6
064C 14         426            dec a
064D 12032F     426            lcall ?Set_Cursor_2 ; Select column and row
0650 D0E0       426            pop acc     ; the place in the LCD where we want the BCD counter value
0652 C000       427            push ar0
0654 A850       427            mov r0, min
0656 120336     427            lcall ?Display_BCD
0659 D000       427            pop ar0 ; This macro is also in 'LCD_4bit.inc'
065B            428   
065B 22         429       ret
065C            430   ;Timer couter 
065C            431       sec_counter: 
065C E54F       432           mov a,BCD_counter
065E B4600A     433           cjne a, #0x60, Continue1 ; check if the couter reached 60s
0661 E550       434           mov a, min
0663 2401       435           add a, #0x01 ; add one to the minutes
0665 D4         436           da a ; Decimal adjust instruction.  Check datasheet for more details!
0666 F550       437           mov min, a
0668 12060B     438           lcall Reset_timer
066B            439                Continue1:
066B 22         440           ret
066C            441       min_counter:
066C E550       442                    mov a,min
066E B4600B     443                    cjne a, #0x60, Continue2
0671 C2CA       444                    clr TR2                 ; Stop timer 2
0673 E4         445                    clr a                   
0674 F54A       446                    mov Count1ms+0, a
0676 F54B       447                    mov Count1ms+1, a       ; Now clear the BCD counter
0678 F550       448                    mov min, a              ; Reset min
067A D2CA       449           setb TR2                ; Start timer 2
067C            450   
067C            451                    Continue2:
067C 22         452           ret
067D            453   home_page:
067D            454       ;--------Timer----------;
067D 300109     455       jnb half_seconds_flag, Temp_sensor
0680 12065C     456       lcall sec_counter
0683 12066C     457       lcall min_counter
0686 120617     458       lcall Display_time
0689            459       ;-----------------------;
0689            460               
0689            461       ;-----TEMP SENSOR-------;
0689            462       Temp_sensor:
0689 1205EB     463       lcall config_adc
068C 12053B     464       lcall Display_temp
068F 120419     465       lcall  WaitHalfSec 
0692            466       ;-----------------------;
0692 22         467       ret
0693            468   
0693            469   setup_reflow_page:
0693 20A511     470            jb set_BUTTON, continue9
0696 C002       470            push AR2
0698 7A0A       470            mov R2, #10
069A 1202A9     470            lcall ?Wait_Milli_Seconds
069D D002       470            pop AR2
069F 20A505     470            jb set_BUTTON, continue9
06A2 30A5FD     470            jnb set_BUTTON, $
06A5            470   
06A5 B207       471       cpl tt_reflow_flag
06A7            472       continue9:
06A7            473   
06A7 200706     474       jb tt_reflow_flag, jump1
06AA            475       ;jnb tt_reflow_flag, jump1
06AA 12078C     476       lcall INC_DEC_Reflow_time
06AD 0206B3     477       ljmp display_reflow_page
06B0            478       jump1:
06B0 1207D4     479       lcall INC_DEC_Reflow_temp
06B3            480   
06B3            481   
06B3            482       display_reflow_page:
06B3 C0E0       483            push acc
06B5 7405       483            mov a, #5
06B7 14         483            dec a
06B8 120331     483            lcall ?Set_Cursor_1 ; Select column and row
06BB D0E0       483            pop acc
06BD C000       484            push ar0
06BF A84C       484            mov r0, reflow_temp+0
06C1 120336     484            lcall ?Display_BCD
06C4 D000       484            pop ar0
06C6 C0E0       485            push acc
06C8 7407       485            mov a, #7
06CA 14         485            dec a
06CB 120331     485            lcall ?Set_Cursor_1 ; Select column and row
06CE D0E0       485            pop acc
06D0 C000       486            push ar0
06D2 A84D       486            mov r0, reflow_temp+1
06D4 120336     486            lcall ?Display_BCD
06D7 D000       486            pop ar0
06D9            487          
06D9            488       
06D9 C0E0       489            push acc
06DB 7401       489            mov a, #1
06DD 14         489            dec a
06DE 120331     489            lcall ?Set_Cursor_1 ; Select column and row
06E1 D0E0       489            pop acc
06E3 C083       490            push dph
06E5 C082       490            push dpl
06E7 C0E0       490            push acc
06E9 900516     490            mov dptr, #reflow_setup
06EC 120324     490            lcall ?Send_Constant_String
06EF D0E0       490            pop acc
06F1 D082       490            pop dpl
06F3 D083       490            pop dph
06F5 C0E0       491            push acc
06F7 7409       491            mov a, #9
06F9 14         491            dec a
06FA 120331     491            lcall ?Set_Cursor_1 ; Select column and row
06FD D0E0       491            pop acc
06FF C083       492            push dph
0701 C082       492            push dpl
0703 C0E0       492            push acc
0705 90051B     492            mov dptr, #reflow_setup4
0708 120324     492            lcall ?Send_Constant_String
070B D0E0       492            pop acc
070D D082       492            pop dpl
070F D083       492            pop dph
0711            493   
0711 C0E0       494            push acc
0713 7401       494            mov a, #1
0715 14         494            dec a
0716 12032F     494            lcall ?Set_Cursor_2 ; Select column and row
0719 D0E0       494            pop acc
071B C083       495            push dph
071D C082       495            push dpl
071F C0E0       495            push acc
0721 900524     495            mov dptr, #reflow_setup2
0724 120324     495            lcall ?Send_Constant_String
0727 D0E0       495            pop acc
0729 D082       495            pop dpl
072B D083       495            pop dph
072D C0E0       496            push acc
072F 7408       496            mov a, #8
0731 14         496            dec a
0732 12032F     496            lcall ?Set_Cursor_2 ; Select column and row
0735 D0E0       496            pop acc
0737 C083       497            push dph
0739 C082       497            push dpl
073B C0E0       497            push acc
073D 900503     497            mov dptr, #dots
0740 120324     497            lcall ?Send_Constant_String
0743 D0E0       497            pop acc
0745 D082       497            pop dpl
0747 D083       497            pop dph
0749 C0E0       498            push acc
074B 740C       498            mov a, #12
074D 14         498            dec a
074E 12032F     498            lcall ?Set_Cursor_2 ; Select column and row
0751 D0E0       498            pop acc
0753 C083       499            push dph
0755 C082       499            push dpl
0757 C0E0       499            push acc
0759 900529     499            mov dptr, #reflow_setup3
075C 120324     499            lcall ?Send_Constant_String
075F D0E0       499            pop acc
0761 D082       499            pop dpl
0763 D083       499            pop dph
0765 C0E0       500            push acc
0767 7409       500            mov a, #9
0769 14         500            dec a
076A 12032F     500            lcall ?Set_Cursor_2 ; Select column and row
076D D0E0       500            pop acc
076F C000       501            push ar0
0771 A852       501            mov r0, reflow_sec
0773 120336     501            lcall ?Display_BCD
0776 D000       501            pop ar0
0778 C0E0       502            push acc
077A 7406       502            mov a, #6
077C 14         502            dec a
077D 12032F     502            lcall ?Set_Cursor_2 ; Select column and row
0780 D0E0       502            pop acc
0782 C000       503            push ar0
0784 A853       503            mov r0, reflow_min
0786 120336     503            lcall ?Display_BCD
0789 D000       503            pop ar0
078B            504   
078B 22         505       ret
078C            506   INC_DEC_Reflow_time:
078C            507   
078C 20A424     508            jb SETUP_SOAK_Button, check_decrement
078F C002       508            push AR2
0791 7A0A       508            mov R2, #10
0793 1202A9     508            lcall ?Wait_Milli_Seconds
0796 D002       508            pop AR2
0798 20A418     508            jb SETUP_SOAK_Button, check_decrement
079B 30A4FD     508            jnb SETUP_SOAK_Button, $
079E            508    ; setup soak is also used to increment 
079E            509   
079E E552       510       mov a, reflow_sec
07A0 B4590B     511       cjne a, #0x59, add_reflow_sec
07A3 E553       512       mov a, reflow_min
07A5 2401       513       add a, #0x01
07A7 D4         514       da a
07A8 F553       515       mov reflow_min, a
07AA E4         516       clr a 
07AB 0207B1     517       ljmp Continue5
07AE            518       add_reflow_sec:
07AE 2401       519       add a, #0x01
07B0 D4         520       da a ; Decimal adjust instruction.  Check datasheet for more details!
07B1            521       Continue5:
07B1 F552       522       mov reflow_sec, a
07B3            523   
07B3            524       check_decrement:
07B3 20A61D     525            jb Button_min, continue8
07B6 C002       525            push AR2
07B8 7A0A       525            mov R2, #10
07BA 1202A9     525            lcall ?Wait_Milli_Seconds
07BD D002       525            pop AR2
07BF 20A611     525            jb Button_min, continue8
07C2 30A6FD     525            jnb Button_min, $
07C5            525   
07C5 E552       526       mov a, reflow_sec
07C7 B40004     527       cjne a, #0x00, sub_reflow_sec
07CA E4         528       clr a 
07CB 0207D1     529       ljmp Continue6
07CE            530       sub_reflow_sec:
07CE 2499       531       add a, #0x99 ; add 99 reduces 1
07D0 D4         532       da a ; Decimal adjust instruction.  Check datasheet for more details!
07D1            533       Continue6:
07D1 F552       534       mov reflow_sec, a
07D3            535       continue8:
07D3 22         536       ret
07D4            537   INC_DEC_Reflow_temp:
07D4            538       ;PushButton(SETUP_SOAK_Button,check_decrement2) ; setup soak is also used to increment 
07D4            539   
07D4 20A464     540           jb SETUP_SOAK_Button, check_decrement2  
07D7 C002       541            push AR2
07D9 7A32       541            mov R2, #50
07DB 1202A9     541            lcall ?Wait_Milli_Seconds
07DE D002       541            pop AR2         
07E0 20A458     542           jb SETUP_SOAK_Button, check_decrement2  
07E3            543           loop_hold_inc:
07E3            544   
07E3 30A40F     545                    jnb SETUP_SOAK_Button, jump2
07E6 C002       546            push AR2
07E8 7A64       546            mov R2, #100
07EA 1202A9     546            lcall ?Wait_Milli_Seconds
07ED D002       546            pop AR2
07EF 30A403     547           jnb SETUP_SOAK_Button, jump2
07F2 02083B     548           ljmp hold_done
07F5            549           jump2:
07F5 C0E0       550            push acc
07F7 7405       550            mov a, #5
07F9 14         550            dec a
07FA 120331     550            lcall ?Set_Cursor_1 ; Select column and row
07FD D0E0       550            pop acc
07FF C000       551            push ar0
0801 A84C       551            mov r0, reflow_temp+0
0803 120336     551            lcall ?Display_BCD
0806 D000       551            pop ar0
0808 C0E0       552            push acc
080A 7407       552            mov a, #7
080C 14         552            dec a
080D 120331     552            lcall ?Set_Cursor_1 ; Select column and row
0810 D0E0       552            pop acc
0812 C000       553            push ar0
0814 A84D       553            mov r0, reflow_temp+1
0816 120336     553            lcall ?Display_BCD
0819 D000       553            pop ar0
081B C002       554            push AR2
081D 7A64       554            mov R2, #100
081F 1202A9     554            lcall ?Wait_Milli_Seconds
0822 D002       554            pop AR2         
0824 E54D       555           mov a, reflow_temp+1
0826 2401       556           add a, #0x01
0828 D4         557           da a ; Decimal adjust instruction.  Check datasheet for more details!
0829 F54D       558           mov reflow_temp+1, a
082B E54D       559           mov a, reflow_temp+1
082D 7009       560           jnz INC_reflow_temp_done2
082F E54C       561           mov a, reflow_temp+0
0831 2401       562           add a, #0x01
0833 D4         563           da a ; Decimal adjust instruction.  Check datasheet for more details!
0834 F54C       564           mov reflow_temp+0, a
0836 E54D       565           mov a, reflow_temp+1
0838            566           INC_reflow_temp_done2:
0838            567           
0838 0207E3     568           ljmp loop_hold_inc
083B            569       hold_done:
083B            570       
083B            571   
083B            572   
083B            573       check_decrement2:
083B 20A664     574           jb Button_min, DEC_reflow_temp_done2  
083E C002       575            push AR2
0840 7A32       575            mov R2, #50
0842 1202A9     575            lcall ?Wait_Milli_Seconds
0845 D002       575            pop AR2         
0847 20A658     576           jb Button_min, DEC_reflow_temp_done2  
084A            577           loop_hold_dec:
084A            578   
084A 30A60F     579                    jnb Button_min, jump3
084D C002       580            push AR2
084F 7A64       580            mov R2, #100
0851 1202A9     580            lcall ?Wait_Milli_Seconds
0854 D002       580            pop AR2
0856 30A603     581           jnb Button_min, jump3
0859 0208A2     582           ljmp DEC_reflow_temp_done2
085C            583           jump3:
085C C0E0       584            push acc
085E 7405       584            mov a, #5
0860 14         584            dec a
0861 120331     584            lcall ?Set_Cursor_1 ; Select column and row
0864 D0E0       584            pop acc
0866 C000       585            push ar0
0868 A84C       585            mov r0, reflow_temp+0
086A 120336     585            lcall ?Display_BCD
086D D000       585            pop ar0
086F C0E0       586            push acc
0871 7407       586            mov a, #7
0873 14         586            dec a
0874 120331     586            lcall ?Set_Cursor_1 ; Select column and row
0877 D0E0       586            pop acc
0879 C000       587            push ar0
087B A84D       587            mov r0, reflow_temp+1
087D 120336     587            lcall ?Display_BCD
0880 D000       587            pop ar0
0882 C002       588            push AR2
0884 7A64       588            mov R2, #100
0886 1202A9     588            lcall ?Wait_Milli_Seconds
0889 D002       588            pop AR2         
088B E54D       589           mov a, reflow_temp+1
088D 2499       590           add a, #0x99
088F D4         591           da a ; Decimal adjust instruction.  Check datasheet for more details!
0890 F54D       592           mov reflow_temp+1, a
0892 E54D       593           mov a, reflow_temp+1
0894 7009       594           jnz INC_reflow_temp_done
0896 E54C       595           mov a, reflow_temp+0
0898 2499       596           add a, #0x99
089A D4         597           da a ; Decimal adjust instruction.  Check datasheet for more details!
089B F54C       598           mov reflow_temp+0, a
089D E54D       599           mov a, reflow_temp+1
089F            600           INC_reflow_temp_done:
089F            601           
089F 02084A     602           ljmp loop_hold_dec
08A2            603   
08A2            604       DEC_reflow_temp_done2:
08A2            605      
08A2            606   
08A2 22         607       ret
08A3            608   second_page:
08A3 C0E0       609            push acc
08A5 7401       609            mov a, #1
08A7 14         609            dec a
08A8 120331     609            lcall ?Set_Cursor_1 ; Select column and row
08AB D0E0       609            pop acc
08AD C083       610            push dph
08AF C082       610            push dpl
08B1 C0E0       610            push acc
08B3 900505     610            mov dptr, #soak_reflw
08B6 120324     610            lcall ?Send_Constant_String
08B9 D0E0       610            pop acc
08BB D082       610            pop dpl
08BD D083       610            pop dph
08BF C0E0       611            push acc
08C1 7401       611            mov a, #1
08C3 14         611            dec a
08C4 12032F     611            lcall ?Set_Cursor_2 ; Select column and row
08C7 D0E0       611            pop acc
08C9 C083       612            push dph
08CB C082       612            push dpl
08CD C0E0       612            push acc
08CF 9004BF     612            mov dptr, #nothing
08D2 120324     612            lcall ?Send_Constant_String
08D5 D0E0       612            pop acc
08D7 D082       612            pop dpl
08D9 D083       612            pop dph
08DB 22         613       ret
08DC            614   ;---------------------------------;
08DC            615   ; Main program. Includes hardware ;
08DC            616   ; initialization and 'forever'    ;
08DC            617   ; loop.                           ;
08DC            618   ;---------------------------------;
08DC            619   MainProgram:
08DC 75817F     620           mov SP, #7FH ; Set the stack pointer to the begining of idata
08DF            621           ; Initialization_LCD
08DF 1202F8     622           lcall LCD_4BIT
08E2            623           ; Initialization_Termometer
08E2 1203FB     624           lcall INIT_SPI
08E5            625           ; Initialization_timer
08E5            626       
08E5 120362     627           lcall Timer0_Init
08E8            628           ;lcall Timer1_Init
08E8 12037E     629           lcall Timer2_Init
08EB D2AF       630           setb EA   ; Enable Global interrupts
08ED D201       631           setb half_seconds_flag
08EF 754F00     632                mov BCD_counter, #0x00
08F2 755200     633           mov reflow_sec, #0x00
08F5 755300     634           mov reflow_min, #0x00
08F8 755000     635           mov min, #0x00
08FB 754600     636           mov state_lcd, #0
08FE C206       637           clr TR2_flag
0900 754C01     638           mov reflow_temp+0, #0x01
0903 754D50     639           mov reflow_temp+1, #0x50
0906 C207       640           clr tt_reflow_flag
0908            641   
0908            642           
0908            643   
0908            644   
0908            645       Forever: 
0908            646        
0908 E546       647           mov a, state_lcd
090A            648   
090A            649   ;        Check_start_Button:
090A            650   ;        PushButton(start,Check_stop_button)
090A            651   ;        setb TR2
090A            652   ;        ljmp forever
090A            653   ;        Check_stop_button:
090A            654   ;        PushButton(stop_Button, Continue8 )
090A            655   ;        clr TR2
090A            656   ;        ljmp Forever 
090A            657   ;     ;   lcall Reset_timer
090A            658   ;        Continue8:
090A            659   
090A            660           ;----------------STATE 0------------------;
090A            661            home_state:
090A B4001E     662               cjne a, #0, soak_reflow_state
090D 20A515     663            jb set_BUTTON, done_home2
0910 C002       663            push AR2
0912 7A0A       663            mov R2, #10
0914 1202A9     663            lcall ?Wait_Milli_Seconds
0917 D002       663            pop AR2
0919 20A509     663            jb set_BUTTON, done_home2
091C 30A5FD     663            jnb set_BUTTON, $
091F            663    
091F            664               ;setb set_flag  
091F 754601     665               mov state_lcd, #1
0922 020928     666               ljmp done_home
0925            667               done_home2:
0925            668               ;clr set_flag
0925 12067D     669               lcall home_page
0928            670               done_home:
0928 020908     671               ljmp Forever           
092B            672           ;------------------------------------------;
092B            673           
092B            674           ;----------------STATE 1-------------------;
092B            675           soak_reflow_state:
092B B4014B     676               cjne a, #1, setup_soak
092E 1208A3     677               lcall second_page
0931            678             ;  Wait_Milli_Seconds(#50)
0931 12065C     679               lcall sec_counter ; prevent the timer to go over 60
0934 12066C     680               lcall min_counter
0937 20A712     681            jb HOME_BUTTON, next_pushb
093A C002       681            push AR2
093C 7A0A       681            mov R2, #10
093E 1202A9     681            lcall ?Wait_Milli_Seconds
0941 D002       681            pop AR2
0943 20A706     681            jb HOME_BUTTON, next_pushb
0946 30A7FD     681            jnb HOME_BUTTON, $
0949            681    ; check if home button is pressed 
0949 754600     682               mov state_lcd, #0
094C            683               next_pushb:
094C 20A412     684            jb SETUP_SOAK_Button, next_pushb2
094F C002       684            push AR2
0951 7A0A       684            mov R2, #10
0953 1202A9     684            lcall ?Wait_Milli_Seconds
0956 D002       684            pop AR2
0958 20A406     684            jb SETUP_SOAK_Button, next_pushb2
095B 30A4FD     684            jnb SETUP_SOAK_Button, $
095E            684    ; check if the the button to setup soak is pressed
095E 754602     685               mov state_lcd, #2
0961            686               next_pushb2:
0961 20A612     687            jb Button_min, done_soak
0964 C002       687            push AR2
0966 7A0A       687            mov R2, #10
0968 1202A9     687            lcall ?Wait_Milli_Seconds
096B D002       687            pop AR2
096D 20A606     687            jb Button_min, done_soak
0970 30A6FD     687            jnb Button_min, $
0973            687    ; check if the buttion to setup the reflow was pressed 
0973 754603     688               mov state_lcd, #3
0976            689               done_soak:
0976 020908     690              ljmp Forever
0979            691           ;------------------------------------------;
0979            692   
0979            693           ;-----------------STATE 2------------------;
0979            694           setup_soak:
0979 B40221     695               cjne a, #2, setup_reflow
097C 120693     696               lcall setup_reflow_page
097F            697             ;  Wait_Milli_Seconds(#50)
097F 12065C     698               lcall sec_counter ; prevent the timer to go over 60
0982 12066C     699               lcall min_counter
0985 20A712     700            jb HOME_BUTTON, done_setup_soak
0988 C002       700            push AR2
098A 7A0A       700            mov R2, #10
098C 1202A9     700            lcall ?Wait_Milli_Seconds
098F D002       700            pop AR2
0991 20A706     700            jb HOME_BUTTON, done_setup_soak
0994 30A7FD     700            jnb HOME_BUTTON, $
0997            700    ; check if home button is pressed 
0997 754600     701               mov state_lcd, #0
099A            702               done_setup_soak:
099A 020908     703               ljmp Forever
099D            704           ;------------------------------------------;
099D            705   
099D            706           ;----------------STATE 3-------------------;
099D            707           setup_reflow:
099D B40303     708               cjne a, #3, FDP
09A0 0209A6     709               ljmp FDP2
09A3            710               FDP:
09A3 02090A     711               ljmp home_state
09A6            712               FDP2:
09A6 C0E0       713            push acc
09A8 7401       713            mov a, #1
09AA 14         713            dec a
09AB 120331     713            lcall ?Set_Cursor_1 ; Select column and row
09AE D0E0       713            pop acc
09B0 C083       714            push dph
09B2 C082       714            push dpl
09B4 C0E0       714            push acc
09B6 9004D0     714            mov dptr, #test2
09B9 120324     714            lcall ?Send_Constant_String
09BC D0E0       714            pop acc
09BE D082       714            pop dpl
09C0 D083       714            pop dph
09C2 C0E0       715            push acc
09C4 7401       715            mov a, #1
09C6 14         715            dec a
09C7 12032F     715            lcall ?Set_Cursor_2 ; Select column and row
09CA D0E0       715            pop acc
09CC C083       716            push dph
09CE C082       716            push dpl
09D0 C0E0       716            push acc
09D2 9004D0     716            mov dptr, #test2
09D5 120324     716            lcall ?Send_Constant_String
09D8 D0E0       716            pop acc
09DA D082       716            pop dpl
09DC D083       716            pop dph
09DE 12065C     717               lcall sec_counter ; prevent the timer to go over 60
09E1 12066C     718               lcall min_counter
09E4 20A712     719            jb HOME_BUTTON, done_setup_reflow
09E7 C002       719            push AR2
09E9 7A0A       719            mov R2, #10
09EB 1202A9     719            lcall ?Wait_Milli_Seconds
09EE D002       719            pop AR2
09F0 20A706     719            jb HOME_BUTTON, done_setup_reflow
09F3 30A7FD     719            jnb HOME_BUTTON, $
09F6            719    ; check if home button is pressed 
09F6 754600     720               mov state_lcd, #0
09F9            721               done_setup_reflow:
09F9 020908     722               ljmp Forever
09FC            723           ;------------------------------------------;
09FC            724   END
