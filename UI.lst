0000              1   ;Start/Constants
                 -1       $MODLP51
0000              1   ;--------------------------------------------------------
0000              2   ; Special Function Registers
0000              3   ;--------------------------------------------------------
0000              4   ACC            DATA 0xe0
0000              5   B              DATA 0xf0
0000              6   PSW            DATA 0xd0
0000              7   SP             DATA 0x81
0000              8   SPX            DATA 0xef
0000              9   DPL            DATA 0x82
0000             10   DPH            DATA 0x83
0000             11   DPLB           DATA 0xd4
0000             12   DPHB           DATA 0xd5
0000             13   PAGE           DATA 0xf6
0000             14   AX             DATA 0xe1
0000             15   BX             DATA 0xf7
0000             16   DSPR           DATA 0xe2
0000             17   FIRD           DATA 0xe3
0000             18   MACL           DATA 0xe4
0000             19   MACH           DATA 0xe5
0000             20   PCON           DATA 0x87
0000             21   AUXR           DATA 0x8e
0000             22   AUXR1          DATA 0xa2
0000             23   DPCF           DATA 0xa1
0000             24   CKRL           DATA 0x97
0000             25   CKCKON0        DATA 0x8f
0000             26   CKCKON1        DATA 0xaf
0000             27   CKSEL          DATA 0x85
0000             28   CLKREG         DATA 0xae
0000             29   OSCCON         DATA 0x85
0000             30   IE             DATA 0xa8
0000             31   IEN0           DATA 0xa8
0000             32   IEN1           DATA 0xb1
0000             33   IPH0           DATA 0xb7
0000             34   IP             DATA 0xb8
0000             35   IPL0           DATA 0xb8
0000             36   IPH1           DATA 0xb3
0000             37   IPL1           DATA 0xb2
0000             38   P0             DATA 0x80
0000             39   P1             DATA 0x90
0000             40   P2             DATA 0xa0
0000             41   P3             DATA 0xb0
0000             42   P4             DATA 0xc0
0000             43   P0M0           DATA 0xe6
0000             44   P0M1           DATA 0xe7
0000             45   P1M0           DATA 0xd6
0000             46   P1M1           DATA 0xd7
0000             47   P2M0           DATA 0xce
0000             48   P2M1           DATA 0xcf
0000             49   P3M0           DATA 0xc6
0000             50   P3M1           DATA 0xc7
0000             51   P4M0           DATA 0xbe
0000             52   P4M1           DATA 0xbf
0000             53   SCON           DATA 0x98
0000             54   SBUF           DATA 0x99
0000             55   SADEN          DATA 0xb9
0000             56   SADDR          DATA 0xa9
0000             57   BDRCON         DATA 0x9b
0000             58   BRL            DATA 0x9a
0000             59   TCON           DATA 0x88
0000             60   TMOD           DATA 0x89
0000             61   TCONB          DATA 0x91
0000             62   TL0            DATA 0x8a
0000             63   TH0            DATA 0x8c
0000             64   TL1            DATA 0x8b
0000             65   TH1            DATA 0x8d
0000             66   RL0            DATA 0xf2
0000             67   RL1            DATA 0xf3
0000             68   RH0            DATA 0xf4
0000             69   RH1            DATA 0xf5
0000             70   WDTRST         DATA 0xa6
0000             71   WDTPRG         DATA 0xa7
0000             72   T2CON          DATA 0xc8
0000             73   T2MOD          DATA 0xc9
0000             74   RCAP2H         DATA 0xcb
0000             75   RCAP2L         DATA 0xca
0000             76   TH2            DATA 0xcd
0000             77   TL2            DATA 0xcc
0000             78   SPCON          DATA 0xc3
0000             79   SPSTA          DATA 0xc4
0000             80   SPDAT          DATA 0xc5
0000             81   SSCON          DATA 0x93
0000             82   SSCS           DATA 0x94
0000             83   SSDAT          DATA 0x95
0000             84   SSADR          DATA 0x96
0000             85   KBLS           DATA 0x9c
0000             86   KBE            DATA 0x9d
0000             87   KBF            DATA 0x9e
0000             88   KBMOD          DATA 0x9f
0000             89   BMSEL          DATA 0x92
0000             90   FCON           DATA 0xd2
0000             91   EECON          DATA 0xd2
0000             92   ACSRA          DATA 0xa3
0000             93   ACSRB          DATA 0xab
0000             94   AREF           DATA 0xbd
0000             95   DADC           DATA 0xa4
0000             96   DADI           DATA 0xa5
0000             97   DADL           DATA 0xac
0000             98   DADH           DATA 0xad
0000             99   CCON           DATA 0xd8
0000            100   CMOD           DATA 0xd9
0000            101   CL             DATA 0xe9
0000            102   CH             DATA 0xf9
0000            103   CCAPM0         DATA 0xda
0000            104   CCAPM1         DATA 0xdb
0000            105   CCAPM2         DATA 0xdc
0000            106   CCAPM3         DATA 0xdd
0000            107   CCAPM4         DATA 0xde
0000            108   CCAP0H         DATA 0xfa
0000            109   CCAP1H         DATA 0xfb
0000            110   CCAP2H         DATA 0xfc
0000            111   CCAP3H         DATA 0xfd
0000            112   CCAP4H         DATA 0xfe
0000            113   CCAP0L         DATA 0xea
0000            114   CCAP1L         DATA 0xeb
0000            115   CCAP2L         DATA 0xec
0000            116   CCAP3L         DATA 0xed
0000            117   CCAP4L         DATA 0xee
0000            118   ;--------------------------------------------------------
0000            119   ; special function bits
0000            120   ;--------------------------------------------------------
0000            121   P              BIT 0xd0
0000            122   F1             BIT 0xd1
0000            123   OV             BIT 0xd2
0000            124   RS0            BIT 0xd3
0000            125   RS1            BIT 0xd4
0000            126   F0             BIT 0xd5
0000            127   AC             BIT 0xd6
0000            128   CY             BIT 0xd7
0000            129   EX0            BIT 0xa8
0000            130   ET0            BIT 0xa9
0000            131   EX1            BIT 0xaa
0000            132   ET1            BIT 0xab
0000            133   ES             BIT 0xac
0000            134   ET2            BIT 0xad
0000            135   EC             BIT 0xae
0000            136   EA             BIT 0xaf
0000            137   PX0            BIT 0xb8
0000            138   PT0            BIT 0xb9
0000            139   PX1            BIT 0xba
0000            140   PT1            BIT 0xbb
0000            141   PS             BIT 0xbc
0000            142   PT2            BIT 0xbd
0000            143   IP0D           BIT 0xbf
0000            144   PPCL           BIT 0xbe
0000            145   PT2L           BIT 0xbd
0000            146   PLS            BIT 0xbc
0000            147   PT1L           BIT 0xbb
0000            148   PX1L           BIT 0xba
0000            149   PT0L           BIT 0xb9
0000            150   PX0L           BIT 0xb8
0000            151   RXD            BIT 0xb0
0000            152   TXD            BIT 0xb1
0000            153   INT0           BIT 0xb2
0000            154   INT1           BIT 0xb3
0000            155   T0             BIT 0xb4
0000            156   T1             BIT 0xb5
0000            157   WR             BIT 0xb6
0000            158   RD             BIT 0xb7
0000            159   RI             BIT 0x98
0000            160   TI             BIT 0x99
0000            161   RB8            BIT 0x9a
0000            162   TB8            BIT 0x9b
0000            163   REN            BIT 0x9c
0000            164   SM2            BIT 0x9d
0000            165   SM1            BIT 0x9e
0000            166   SM0            BIT 0x9f
0000            167   IT0            BIT 0x88
0000            168   IE0            BIT 0x89
0000            169   IT1            BIT 0x8a
0000            170   IE1            BIT 0x8b
0000            171   TR0            BIT 0x8c
0000            172   TF0            BIT 0x8d
0000            173   TR1            BIT 0x8e
0000            174   TF1            BIT 0x8f
0000            175   CP_RL2         BIT 0xc8
0000            176   C_T2           BIT 0xc9
0000            177   TR2            BIT 0xca
0000            178   EXEN2          BIT 0xcb
0000            179   TCLK           BIT 0xcc
0000            180   RCLK           BIT 0xcd
0000            181   EXF2           BIT 0xce
0000            182   TF2            BIT 0xcf
0000            183   CF             BIT 0xdf
0000            184   CR             BIT 0xde
0000            185   CCF4           BIT 0xdc
0000            186   CCF3           BIT 0xdb
0000            187   CCF2           BIT 0xda
0000            188   CCF1           BIT 0xd9
0000            189   CCF0           BIT 0xd8
0000              3           ; Reset vector
0000              4           org 0x0000
0000 020779       5               ljmp MainProgram
0003              6   
0003              7           ; External interrupt 0 vector (not used in this code)
0003              8           org 0x0003
0003 32           9               reti
0004             10   
0004             11           ; Timer/Counter 0 overflow interrupt vector
000B             12           org 0x000B
000B 02037B      13               ljmp Timer0_ISR
000E             14   
000E             15           ; External interrupt 1 vector (not used in this code)
0013             16           org 0x0013
0013 32          17               reti
0014             18   
0014             19           ; Timer/Counter 1 overflow interrupt vector (not used in this code)
001B             20           org 0x001B
001B 32          21               reti
001C             22   
001C             23           ; Serial port receive/transmit interrupt vector (not used in this code)
0023             24           org 0x0023 
0023 32          25               reti
0024             26               
0024             27           ; Timer/Counter 2 overflow interrupt vector
002B             28           org 0x002B
002B 020397      29               ljmp Timer2_ISR
002E             30   
002E             31       ;CLK  EQU 22118400
002E             32       CLK  EQU 22118400
002E             33       ;termometer
002E             34       BAUD equ 115200
002E             35       BRG_VAL equ (0x100-(CLK/(16*BAUD)))
002E             36       ;timer
002E             37       TIMER0_RATE   EQU 4096     ; 2048Hz squarewave (peak amplitude of CEM-1203 speaker)
002E             38       TIMER0_RELOAD EQU ((65536-(CLK/TIMER0_RATE)))
002E             39       TIMER2_RATE   EQU 1000     ; 1000Hz, for a timer tick of 1ms
002E             40       TIMER2_RELOAD EQU ((65536-(CLK/TIMER2_RATE)))
002E             41   
002E             42   
002E             43       ; There is a couple of typos in MODLP51 in the definition of the timer 0/1 reload
002E             44       ; special function registers (SFRs), so:
002E             45   
002E             46       TIMER0_RELOAD_L DATA 0xf2
002E             47       TIMER1_RELOAD_L DATA 0xf3
002E             48       TIMER0_RELOAD_H DATA 0xf4
002E             49       TIMER1_RELOAD_H DATA 0xf5
002E             50   
002E             51   ;Variables (dseg)
0030             52       DSEG at 30H
0030             53   
0030             54       Result:    ds 4
0034             55       x:         ds 4
0038             56       y:         ds 4
003C             57       bcd:       ds 5
0041             58       ;FSM varialbles
0041             59       temp_soak: ds 1
0042             60       time_soak: ds 1
0043             61       temp_refl: ds 1
0044             62       time_refl: ds 1
0045             63       state:     ds 1
0046             64       state_lcd: ds 1
0047             65       temp:      ds 1
0048             66       sec:       ds 1
0049             67       pwm:       ds 1 ; Register that controls the power of the oven 
004A             68       ;;owen_temp ds 1
004A             69   
004A             70       ;Timer variables
004A             71       Count1ms:     ds 2 ; Used to determine when half second has passed
004C             72       BCD_counter:  ds 1 ; The BCD counter incrememted in the ISR and displayed in the main loop
004D             73       min:          ds 1
004E             74       hour:         ds 1
004F             75       reflow_sec:   ds 1
0050             76       reflow_min:   ds 1
0051             77       alarm_min:    ds 1
0052             78       alarm_hour:   ds 1
0053             79       day:          ds 1
0054             80       month:        ds 1
0055             81       year:         ds 1
0056             82       hour_24:      ds 1
0057             83   
0057             84   
0057             85   ;flags (bseg)
0000             86       bseg
0000             87       mf:                dbit 1
0001             88       half_seconds_flag: dbit 1 ; Set to one in the ISR every time 500 ms had passed
0002             89       AMPM_flag:         dbit 1
0003             90       alarm_AMPM_flag:   dbit 1
0004             91       on_off_flag:       dbit 1 ; 1 is on
0005             92       alarm_buzzer_flag: dbit 1
0006             93       TR2_flag:          dbit 1
0007             94   
0007             95   ;Pins Config (cseg)
002E             96       CSEG 
002E             97   
002E             98       done_button equ P0.0    
002E             99       done                   equ P0.1
002E            100       setup                  equ P0.2
002E            101       setmin                 equ P0.3
002E            102       sethour        equ P0.4
002E            103       setday        equ P0.5
002E            104   
002E            105       start         equ P0.7
002E            106   
002E            107       LCD_RS        equ P1.1
002E            108       LCD_RW        equ P1.2
002E            109       LCD_E         equ P1.3
002E            110       start2         equ p1.7   ;in slide it was KEY.3 which should be decided later so p1.7 is just a random pin
002E            111   
002E            112   
002E            113       ; These �EQU� must match the wiring between the microcontroller and ADC 
002E            114       CE_ADC       EQU  P2.0 
002E            115       MY_MOSI      EQU  P2.1 
002E            116       MY_MISO      EQU  P2.2 
002E            117       MY_SCLK      EQU  P2.3
002E            118       SETUP_SOAK_Button equ  P2.4
002E            119       set_BUTTON           equ  P2.5
002E            120       Button_min    equ  P2.6
002E            121       HOME_BUTTON   equ  P2.7
002E            122   
002E            123       ;LCD 4bits data
002E            124       LCD_D4        equ  P3.2
002E            125       LCD_D5        equ  P3.3
002E            126       LCD_D6        equ  P3.4
002E            127       LCD_D7        equ  P3.5
002E            128   
002E            129       BOOT_BUTTON   equ  P4.5
002E            130       SOUND_OUT     equ  P3.7
002E            131   
002E            132   ;include files 
                546   $LIST
                135   	    $LIST
0362            137   
0362            138   
0362            139   ;ISR
0362            140   
0362            141       
0362            142       ;---------------------------------;
0362            143       ; Routine to initialize the ISR   ;
0362            144       ; for timer 0                     ;
0362            145       ;---------------------------------;
0362            146       Timer0_Init:
0362 E589       147           mov a, TMOD
0364 54F0       148           anl a, #0xf0 ; Clear the bits for timer 0
0366 4401       149           orl a, #0x01 ; Configure timer 0 as 16-timer
0368 F589       150           mov TMOD, a
036A 758CEA     151           mov TH0, #high(TIMER0_RELOAD)
036D 758AE8     152           mov TL0, #low(TIMER0_RELOAD)
0370            153           ; Set autoreload value
0370 75F4EA     154           mov TIMER0_RELOAD_H, #high(TIMER0_RELOAD)
0373 75F2E8     155           mov TIMER0_RELOAD_L, #low(TIMER0_RELOAD)
0376            156           ; Enable the timer and interrupts
0376 D2A9       157           setb ET0  ; Enable timer 0 interrupt
0378 D28C       158           setb TR0  ; Start timer 0
037A 22         159           ret
037B            160   
037B            161       ;---------------------------------;
037B            162       ; ISR for timer 0.  Set to execute;
037B            163       ; every 1/4096Hz to generate a    ;
037B            164       ; 2048 Hz square wave at pin P3.7 ;
037B            165       ;---------------------------------;
037B            166       Timer0_ISR:
037B            167           ;clr TF0  ; According to the data sheet this is done for us already.
037B B2B7       168           cpl SOUND_OUT ; Connect speaker to P3.7!
037D 32         169           reti
037E            170   
037E            171       ;---------------------------------;
037E            172       ; Routine to initialize the ISR   ;
037E            173       ; for timer 2                     ;
037E            174       ;---------------------------------;
037E            175       Timer2_Init:
037E 75C800     176           mov T2CON, #0 ; Stop timer/counter.  Autoreload mode.
0381 75CDA9     177           mov TH2, #high(TIMER2_RELOAD)
0384 75CC9A     178           mov TL2, #low(TIMER2_RELOAD)
0387            179           ; Set the reload value
0387 75CBA9     180           mov RCAP2H, #high(TIMER2_RELOAD)
038A 75CA9A     181           mov RCAP2L, #low(TIMER2_RELOAD)
038D            182           ; Init One millisecond interrupt counter.  It is a 16-bit variable made with two 8-bit parts
038D E4         183           clr a
038E F54A       184           mov Count1ms+0, a
0390 F54B       185           mov Count1ms+1, a
0392            186           ; Enable the timer and interrupts
0392 D2AD       187           setb ET2  ; Enable timer 2 interrupt
0394 D2CA       188           setb TR2  ; Enable timer 2
0396 22         189           ret
0397            190   
0397            191       ;---------------------------------;
0397            192       ; ISR for timer 2                 ;
0397            193       ;---------------------------------;
0397            194       Timer2_ISR:
0397 C2CF       195           clr TF2  ; Timer 2 doesn't clear TF2 automatically. Do it in ISR
0399 B2B6       196           cpl P3.6 ; To check the interrupt rate with oscilloscope. It must be precisely a 1 ms pulse.
039B            197           
039B            198           ; The two registers used in the ISR must be saved in the stack
039B C0E0       199           push acc
039D C0D0       200           push psw
039F            201           
039F            202           ; Increment the 16-bit one mili second counter
039F 054A       203           inc Count1ms+0    ; Increment the low 8-bits first
03A1 E54A       204           mov a, Count1ms+0 ; If the low 8-bits overflow, then increment high 8-bits
03A3 7002       205           jnz Inc_Done
03A5 054B       206           inc Count1ms+1
03A7            207   
03A7            208       Inc_Done:
03A7            209           ; Check if half second has passed
03A7 E54A       210           mov a, Count1ms+0
03A9 B4E817     211           cjne a, #low(1000), Timer2_ISR_done ; Warning: this instruction changes the carry flag!
03AC E54B       212           mov a, Count1ms+1
03AE B40312     213           cjne a, #high(1000), Timer2_ISR_done
03B1            214           
03B1            215           ; 500 milliseconds have passed.  Set a flag so the main program knows
03B1 D201       216           setb half_seconds_flag ; Let the main program know half second had passed
03B3 B28C       217           cpl TR0 ; Enable/disable timer/counter 0. This line creates a beep-silence-beep-silence sound.
03B5            218           ; Reset to zero the milli-seconds counter, it is a 16-bit variable
03B5 E4         219           clr a
03B6 F54A       220           mov Count1ms+0, a
03B8 F54B       221           mov Count1ms+1, a
03BA            222           ; Increment the BCD counter
03BA E54C       223           mov a, BCD_counter
03BC            224          ; jnb UPDOWN, Timer2_ISR_decrement
03BC 2401       225           add a, #0x01
03BE 8000       226           sjmp Timer2_ISR_da
03C0            227       Timer2_ISR_decrement:
03C0            228          ; add a, #0x99 ; Adding the 10-complement of -1 is like subtracting 1.
03C0            229       Timer2_ISR_da:
03C0 D4         230           da a ; Decimal adjust instruction.  Check datasheet for more details!
03C1 F54C       231           mov BCD_counter, a
03C3            232           
03C3            233       Timer2_ISR_done:
03C3 D0D0       234           pop psw
03C5 D0E0       235           pop acc
03C7 32         236           reti
03C8            237   
03C8            238   
03C8            239   ;CONFIG:
03C8            240       ; Configure the serial port and baud rate
03C8            241       InitSerialPort:
03C8            242           ; Since the reset button bounces, we need to wait a bit before
03C8            243           ; sending messages, otherwise we risk displaying gibberish!
03C8 79DE       244           mov R1, #222
03CA 78A6       245           mov R0, #166
03CC D8FE       246           djnz R0, $   ; 3 cycles->3*45.21123ns*166=22.51519us
03CE D9FA       247           djnz R1, $-4 ; 22.51519us*222=4.998ms
03D0            248           ; Now we can proceed with the configuration
03D0 438780     249           orl      PCON,#0x80
03D3 759852     250           mov      SCON,#0x52
03D6 759B00     251           mov      BDRCON,#0x00
03D9 759AF4     252           mov      BRL,#BRG_VAL
03DC 759B1E     253           mov      BDRCON,#0x1E ; BDRCON=BRR|TBCK|RBCK|SPD;
03DF 22         254           ret
03E0            255   
03E0            256       ; Send a character using the serial port
03E0            257       putchar:
03E0 3099FD     258           jnb TI, putchar 
03E3            259           ; TI serial interrupt flag is set and when last bit (stop bit) 
03E3            260           ; of receiving data byte is received, RI flag get set. IE register
03E3            261           ; is used to enable/disable interrupt sources.
03E3 C299       262           clr TI
03E5 F599       263           mov SBUF, a
03E7 22         264           ret
03E8            265   
03E8            266       getchar: 
03E8 3098FD     267           jnb RI, getchar 
03EB C298       268           clr RI 
03ED E599       269           mov a, SBUF 
03EF 22         270           ret
03F0            271   
03F0            272       ; Send a constant-zero-terminated string using the serial port
03F0            273       SendString:
03F0 E4         274           clr A
03F1 93         275           movc A, @A+DPTR
03F2 6006       276           jz SendStringDone
03F4 1203E0     277           lcall putchar
03F7 A3         278           inc DPTR
03F8 80F6       279           sjmp SendString
03FA            280       SendStringDone:
03FA 22         281           ret
03FB            282   
03FB            283       INIT_SPI:     
03FB D2A2       284           setb MY_MISO    ; Make MISO an input pin  1 master input 0 slave out   ;MISO master in/slave out
03FD C2A3       285           clr MY_SCLK     ; For mode (0,0) SCLK is zero     
03FF 22         286           ret 
0400            287   
0400            288       DO_SPI_G:     
0400 C0E0       289           push acc     
0402 7900       290           mov R1, #0      ; Received byte stored in R1     
0404 7A08       291           mov R2, #8      ; Loop counter (8-bits)
0406            292           
0406            293       DO_SPI_G_LOOP:     
0406 E8         294           mov a, R0       ; Byte to write is in R0     
0407 33         295           rlc a           ; Carry flag has bit to write 
0408 F8         296           mov R0, a     
0409 92A1       297           mov MY_MOSI, c     
040B D2A3       298           setb MY_SCLK    ; Transmit     
040D A2A2       299           mov c, MY_MISO  ; Read received bit     
040F E9         300           mov a, R1       ; Save received bit in R1     
0410 33         301           rlc a     
0411 F9         302           mov R1, a     
0412 C2A3       303           clr MY_SCLK     
0414 DAF0       304           djnz R2, DO_SPI_G_LOOP     
0416 D0E0       305           pop acc     
0418 22         306           ret 
0419            307       
0419            308       WaitHalfSec:
0419 7AB2       309           mov R2, #178
041B 79FA       310       Lr3: mov R1, #250
041D 78A6       311       Lr2: mov R0, #166
041F D8FE       312       Lr1: djnz R0, Lr1 ; 3 cycles->3*45.21123ns*166=22.51519us
0421 D9FA       313       djnz R1, Lr2 ; 22.51519us*250=5.629ms
0423 DAF6       314       djnz R2, Lr3 ; 5.629ms*89=0.5s (approximately)
0425 22         315       ret
0426            316            
0426            317   blink:
0426 75817F     318           mov SP, #7FH
0429 75C700     319           mov P3M1, #0   ; Configure P3 in bidirectional mode
042C            320       M0:
042C B2B7       321           cpl P3.7
042E C0E0       322            push acc
0430 7401       322            mov a, #1
0432 14         322            dec a
0433 120331     322            lcall ?Set_Cursor_1 ; Select column and row
0436 D0E0       322            pop acc
0438 C083       323            push dph
043A C082       323            push dpl
043C C0E0       323            push acc
043E 9004BF     323            mov dptr, #nothing
0441 120324     323            lcall ?Send_Constant_String
0444 D0E0       323            pop acc
0446 D082       323            pop dpl
0448 D083       323            pop dph
044A C0E0       324            push acc
044C 7401       324            mov a, #1
044E 14         324            dec a
044F 12032F     324            lcall ?Set_Cursor_2 ; Select column and row
0452 D0E0       324            pop acc
0454 C083       325            push dph
0456 C082       325            push dpl
0458 C0E0       325            push acc
045A 9004BF     325            mov dptr, #nothing
045D 120324     325            lcall ?Send_Constant_String
0460 D0E0       325            pop acc
0462 D082       325            pop dpl
0464 D083       325            pop dph
0466 C0E0       326            push acc
0468 7401       326            mov a, #1
046A 14         326            dec a
046B 120331     326            lcall ?Set_Cursor_1 ; Select column and row
046E D0E0       326            pop acc
0470 C083       327            push dph
0472 C082       327            push dpl
0474 C0E0       327            push acc
0476 9004E1     327            mov dptr, #hot
0479 120324     327            lcall ?Send_Constant_String
047C D0E0       327            pop acc
047E D082       327            pop dpl
0480 D083       327            pop dph
0482 C0E0       328            push acc
0484 7401       328            mov a, #1
0486 14         328            dec a
0487 12032F     328            lcall ?Set_Cursor_2 ; Select column and row
048A D0E0       328            pop acc
048C C083       329            push dph
048E C082       329            push dpl
0490 C0E0       329            push acc
0492 9004E1     329            mov dptr, #hot
0495 120324     329            lcall ?Send_Constant_String
0498 D0E0       329            pop acc
049A D082       329            pop dpl
049C D083       329            pop dph
049E            330   
049E 120419     331           lcall WaitHalfSec
04A1            332   
04A1 22         333           ret
04A2            334   
04A2            335       
04A2            336   Strings:
04A2            337       ;Hello_World:
04A2            338           ;DB  'Hello, World!', '\r', '\n', 0
04A2            339       Newline:
04A2 0D0A00     340               DB   '\r', '\n', 0
04A5            341       Space:
04A5 20202020   342               DB   '      ','\r', '\n', 0
     20200D0A
     00
04AE            343   
04AE            344                       ;     1234567890123456
04AE 54656D70   345       Temp0:            db 'Temp:xxxC       ', 0
     3A787878
     43202020
     20202020
     00
04BF 20202020   346       nothing:          db '                ',0
     20202020
     20202020
     20202020
     00
04D0 20202020   347       test2:            db '      Test2     ',0
     20205465
     73743220
     20202020
     00
04E1 20202020   348       hot:                           db '      HOT       ', 0
     2020484F
     54202020
     20202020
     00
04F2 54696D65   349       Time:             db 'Time xx:xx SET  ', 0
     2078783A
     78782053
     45542020
     00
0503 3A00       350       dots:             db ':',0
0505 2020534F   351       soak_reflw:       db '  SOAK  REFLOW  ', 0
     414B2020
     5245464C
     4F572020
     00
0516 54656D70   352       reflow_setup:     db 'Temp:XXX*REFLOW*',0
     3A585858
     2A524546
     4C4F572A
     00
0527 54696D65   353       reflow_setup2:    db 'Time   :   HOME ',0
     2020203A
     20202048
     4F4D4520
     00
0538            354   
0538            355   
0538            356   convert:
0538 853034     357       mov x+0, Result
053B 853135     358            mov x+1, Result+1 
053E 753600     359            mov x+2, #0
0541 753700     360            mov x+3, #0
0544 22         361       ret
0545            362   Display_temp:
0545 75389A     363            mov y+0, #low (410 % 0x10000) 
0548 753901     363            mov y+1, #high(410 % 0x10000) 
054B 753A00     363            mov y+2, #low (410 / 0x10000) 
054E 753B00     363            mov y+3, #high(410 / 0x10000) 
0551            363   
0551 1201A8     364       lcall mul32
0554 7538FF     365            mov y+0, #low (1023 % 0x10000) 
0557 753903     365            mov y+1, #high(1023 % 0x10000) 
055A 753A00     365            mov y+2, #low (1023 / 0x10000) 
055D 753B00     365            mov y+3, #high(1023 / 0x10000) 
0560 120235     366       lcall div32
0563 753811     367            mov y+0, #low (273 % 0x10000) 
0566 753901     367            mov y+1, #high(273 % 0x10000) 
0569 753A00     367            mov y+2, #low (273 / 0x10000) 
056C 753B00     367            mov y+3, #high(273 / 0x10000) 
056F 120114     368       lcall sub32
0572 12002E     369       lcall hex2bcd
0575 1203C8     370       lcall InitSerialPort
0578 C0E0       371            push acc
057A 7401       371            mov a, #1
057C 14         371            dec a
057D 120331     371            lcall ?Set_Cursor_1 ; Select column and row
0580 D0E0       371            pop acc
0582 C083       372            push dph
0584 C082       372            push dpl
0586 C0E0       372            push acc
0588 9004AE     372            mov dptr, #Temp0
058B 120324     372            lcall ?Send_Constant_String
058E D0E0       372            pop acc
0590 D082       372            pop dpl
0592 D083       372            pop dph
0594 1203F0     373       lcall SendString
0597 C0E0       374            push acc
0599 7405       374            mov a, #5
059B 14         374            dec a
059C 120331     374            lcall ?Set_Cursor_1 ; Select column and row
059F D0E0       374            pop acc    
05A1 C000       375            push ar0
05A3 A83D       375            mov r0, bcd+1
05A5 12034C     375            lcall ?Send_BCD
05A8 D000       375            pop ar0 ; send fisrt 2 digits to putty
05AA C000       376            push ar0
05AC A83D       376            mov r0, bcd+1
05AE 120336     376            lcall ?Display_BCD
05B1 D000       376            pop ar0; send fisrt 2 digits to lcd
05B3 C0E0       377            push acc
05B5 7407       377            mov a, #7
05B7 14         377            dec a
05B8 120331     377            lcall ?Set_Cursor_1 ; Select column and row
05BB D0E0       377            pop acc 
05BD C000       378            push ar0
05BF A83C       378            mov r0, bcd
05C1 12034C     378            lcall ?Send_BCD
05C4 D000       378            pop ar0 ; send last 2 digits to putty
05C6 C000       379            push ar0
05C8 A83C       379            mov r0, bcd+0
05CA 120336     379            lcall ?Display_BCD
05CD D000       379            pop ar0 ; send last 2 digits to lcd
05CF C0E0       380            push acc
05D1 7405       380            mov a, #5
05D3 14         380            dec a
05D4 120331     380            lcall ?Set_Cursor_1 ; Select column and row
05D7 D0E0       380            pop acc
05D9 C083       381            push dph
05DB C082       381            push dpl
05DD C0E0       381            push acc
05DF 900503     381            mov dptr, #dots
05E2 120324     381            lcall ?Send_Constant_String
05E5 D0E0       381            pop acc
05E7 D082       381            pop dpl
05E9 D083       381            pop dph
05EB 1203F0     382       lcall SendString
05EE 9004A2     383       mov DPTR, #Newline
05F1 1203F0     384       lcall SendString
05F4 22         385       ret
05F5            386   config_adc:
05F5 C2A0       387           clr CE_ADC 
05F7 7801       388           mov R0, #00000001B; Start bit:1 
05F9 120400     389           lcall DO_SPI_G
05FC            390   
05FC 7880       391           mov R0, #10000000B; Single ended, read channel 0 
05FE 120400     392           lcall DO_SPI_G 
0601 E9         393           mov a, R1          ; R1 contains bits 8 and 9 
0602 5403       394           anl a, #00000011B  ; We need only the two least significant bits 
0604 F531       395           mov Result+1, a    ; Save result high.
0606            396   
0606 7855       397           mov R0, #55H; It doesn't matter what we transmit... 
0608 120400     398           lcall DO_SPI_G 
060B 8930       399           mov Result, R1     ; R1 contains bits 0 to 7.  Save result low. 
060D D2A0       400           setb CE_ADC 
060F 120538     401           lcall convert  
0612 E53C       402           mov a, bcd ; move temp to accumulator 
0614 22         403           ret
0615            404   Reset_timer:
0615            405   
0615 C2CA       406       clr TR2                 ; Stop timer 2
0617 E4         407       clr a
0618 F54A       408            mov Count1ms+0, a
061A F54B       409            mov Count1ms+1, a
061C            410            ; Now clear the BCD counter and min
061C F54C       411            mov BCD_counter, a
061E D2CA       412            setb TR2                ; Start timer 2
0620            413   
0620 22         414       ret
0621            415   Display_time:
0621 C0E0       416            push acc
0623 7401       416            mov a, #1
0625 14         416            dec a
0626 12032F     416            lcall ?Set_Cursor_2 ; Select column and row
0629 D0E0       416            pop acc
062B C083       417            push dph
062D C082       417            push dpl
062F C0E0       417            push acc
0631 9004F2     417            mov dptr, #Time
0634 120324     417            lcall ?Send_Constant_String
0637 D0E0       417            pop acc
0639 D082       417            pop dpl
063B D083       417            pop dph
063D C201       418       clr half_seconds_flag ; We clear this flag in the main loop, but it is set in the ISR for timer 2
063F C0E0       419            push acc
0641 7409       419            mov a, #9
0643 14         419            dec a
0644 12032F     419            lcall ?Set_Cursor_2 ; Select column and row
0647 D0E0       419            pop acc     ; the place in the LCD where we want the BCD counter value
0649 C000       420            push ar0
064B A84C       420            mov r0, BCD_counter
064D 120336     420            lcall ?Display_BCD
0650 D000       420            pop ar0 ; This macro is also in 'LCD_4bit.inc'
0652 C0E0       421            push acc
0654 7406       421            mov a, #6
0656 14         421            dec a
0657 12032F     421            lcall ?Set_Cursor_2 ; Select column and row
065A D0E0       421            pop acc     ; the place in the LCD where we want the BCD counter value
065C C000       422            push ar0
065E A84D       422            mov r0, min
0660 120336     422            lcall ?Display_BCD
0663 D000       422            pop ar0 ; This macro is also in 'LCD_4bit.inc'
0665            423   
0665 22         424       ret
0666            425   ;Timer couter 
0666            426       sec_counter: 
0666 E54C       427           mov a,BCD_counter
0668 B4600A     428           cjne a, #0x60, Continue1 ; check if the couter reached 60s
066B E54D       429           mov a, min
066D 2401       430           add a, #0x01 ; add one to the minutes
066F D4         431           da a ; Decimal adjust instruction.  Check datasheet for more details!
0670 F54D       432           mov min, a
0672 120615     433           lcall Reset_timer
0675            434                Continue1:
0675 22         435           ret
0676            436       min_counter:
0676 E54D       437                    mov a,min
0678 B4600B     438                    cjne a, #0x60, Continue2
067B C2CA       439                    clr TR2                 ; Stop timer 2
067D E4         440                    clr a                   
067E F54A       441                    mov Count1ms+0, a
0680 F54B       442                    mov Count1ms+1, a       ; Now clear the BCD counter
0682 F54D       443                    mov min, a              ; Reset min
0684 D2CA       444           setb TR2                ; Start timer 2
0686            445   
0686            446                    Continue2:
0686 22         447           ret
0687            448   home_page:
0687            449       ;--------Timer----------;
0687 300109     450       jnb half_seconds_flag, Temp_sensor
068A 120666     451       lcall sec_counter
068D 120676     452       lcall min_counter
0690 120621     453       lcall Display_time
0693            454       ;-----------------------;
0693            455               
0693            456       ;-----TEMP SENSOR-------;
0693            457       Temp_sensor:
0693 1205F5     458       lcall config_adc
0696 120545     459       lcall Display_temp
0699 120419     460       lcall  WaitHalfSec 
069C            461       ;-----------------------;
069C 22         462       ret
069D            463   
069D            464   setup_reflow_page:
069D            465      ; jnb half_seconds_flag, display_reflow_page
069D 1206FF     466       lcall INC_DEC_Reflow_time
06A0            467       display_reflow_page:
06A0 C0E0       468            push acc
06A2 7401       468            mov a, #1
06A4 14         468            dec a
06A5 120331     468            lcall ?Set_Cursor_1 ; Select column and row
06A8 D0E0       468            pop acc
06AA C083       469            push dph
06AC C082       469            push dpl
06AE C0E0       469            push acc
06B0 900516     469            mov dptr, #reflow_setup
06B3 120324     469            lcall ?Send_Constant_String
06B6 D0E0       469            pop acc
06B8 D082       469            pop dpl
06BA D083       469            pop dph
06BC C0E0       470            push acc
06BE 7401       470            mov a, #1
06C0 14         470            dec a
06C1 12032F     470            lcall ?Set_Cursor_2 ; Select column and row
06C4 D0E0       470            pop acc
06C6 C083       471            push dph
06C8 C082       471            push dpl
06CA C0E0       471            push acc
06CC 900527     471            mov dptr, #reflow_setup2
06CF 120324     471            lcall ?Send_Constant_String
06D2 D0E0       471            pop acc
06D4 D082       471            pop dpl
06D6 D083       471            pop dph
06D8 C0E0       472            push acc
06DA 7409       472            mov a, #9
06DC 14         472            dec a
06DD 12032F     472            lcall ?Set_Cursor_2 ; Select column and row
06E0 D0E0       472            pop acc
06E2 C000       473            push ar0
06E4 A84F       473            mov r0, reflow_sec
06E6 120336     473            lcall ?Display_BCD
06E9 D000       473            pop ar0
06EB C0E0       474            push acc
06ED 7406       474            mov a, #6
06EF 14         474            dec a
06F0 12032F     474            lcall ?Set_Cursor_2 ; Select column and row
06F3 D0E0       474            pop acc
06F5 C000       475            push ar0
06F7 A850       475            mov r0, reflow_min
06F9 120336     475            lcall ?Display_BCD
06FC D000       475            pop ar0
06FE            476   
06FE 22         477       ret
06FF            478   INC_DEC_Reflow_time:
06FF            479   
06FF 20A41D     480            jb SETUP_SOAK_Button, check_decrement
0702 C002       480            push AR2
0704 7A0A       480            mov R2, #10
0706 1202A9     480            lcall ?Wait_Milli_Seconds
0709 D002       480            pop AR2
070B 20A411     480            jb SETUP_SOAK_Button, check_decrement
070E 30A4FD     480            jnb SETUP_SOAK_Button, $
0711            480    ; setup soak is also used to increment 
0711            481   
0711 E54F       482       mov a, reflow_sec
0713 B45904     483       cjne a, #0x59, add_reflow_sec
0716            484     ;  mov a, reflow_min
0716            485      ; add a, #0x01
0716            486      ; da a
0716            487      ; mov reflow_min, a
0716 E4         488       clr a 
0717 02071D     489       ljmp Continue5
071A            490       add_reflow_sec:
071A 2401       491       add a, #0x01
071C D4         492       da a ; Decimal adjust instruction.  Check datasheet for more details!
071D            493       Continue5:
071D F54F       494       mov reflow_sec, a
071F            495   
071F            496       check_decrement:
071F 20A61D     497            jb Button_min, continue8
0722 C002       497            push AR2
0724 7A0A       497            mov R2, #10
0726 1202A9     497            lcall ?Wait_Milli_Seconds
0729 D002       497            pop AR2
072B 20A611     497            jb Button_min, continue8
072E 30A6FD     497            jnb Button_min, $
0731            497   
0731 E54F       498       mov a, reflow_sec
0733 B40004     499       cjne a, #0x00, sub_reflow_sec
0736            500    ;   mov a, reflow_min
0736            501     ;  add a, #0x99
0736            502     ;  da a
0736            503     ;  mov reflow_min, a
0736 E4         504       clr a 
0737 02073D     505       ljmp Continue6
073A            506       sub_reflow_sec:
073A 2499       507       add a, #0x99 ; add 99 reduces 1
073C D4         508       da a ; Decimal adjust instruction.  Check datasheet for more details!
073D            509       Continue6:
073D F54F       510       mov reflow_sec, a
073F            511       continue8:
073F 22         512       ret
0740            513   second_page:
0740 C0E0       514            push acc
0742 7401       514            mov a, #1
0744 14         514            dec a
0745 120331     514            lcall ?Set_Cursor_1 ; Select column and row
0748 D0E0       514            pop acc
074A C083       515            push dph
074C C082       515            push dpl
074E C0E0       515            push acc
0750 900505     515            mov dptr, #soak_reflw
0753 120324     515            lcall ?Send_Constant_String
0756 D0E0       515            pop acc
0758 D082       515            pop dpl
075A D083       515            pop dph
075C C0E0       516            push acc
075E 7401       516            mov a, #1
0760 14         516            dec a
0761 12032F     516            lcall ?Set_Cursor_2 ; Select column and row
0764 D0E0       516            pop acc
0766 C083       517            push dph
0768 C082       517            push dpl
076A C0E0       517            push acc
076C 9004BF     517            mov dptr, #nothing
076F 120324     517            lcall ?Send_Constant_String
0772 D0E0       517            pop acc
0774 D082       517            pop dpl
0776 D083       517            pop dph
0778 22         518       ret
0779            519   ;---------------------------------;
0779            520   ; Main program. Includes hardware ;
0779            521   ; initialization and 'forever'    ;
0779            522   ; loop.                           ;
0779            523   ;---------------------------------;
0779            524   MainProgram:
0779 75817F     525           mov SP, #7FH ; Set the stack pointer to the begining of idata
077C            526           ; Initialization_LCD
077C 1202F8     527           lcall LCD_4BIT
077F            528           ; Initialization_Termometer
077F 1203FB     529           lcall INIT_SPI
0782            530           ; Initialization_timer
0782            531       
0782 120362     532           lcall Timer0_Init
0785            533           ;lcall Timer1_Init
0785 12037E     534           lcall Timer2_Init
0788 D2AF       535           setb EA   ; Enable Global interrupts
078A D201       536           setb half_seconds_flag
078C 754C00     537                mov BCD_counter, #0x00
078F 754F00     538           mov reflow_sec, #0x00
0792 755000     539           mov reflow_min, #0x00
0795 754D00     540           mov min, #0x00
0798 754600     541           mov state_lcd, #0
079B C206       542           clr TR2_flag
079D            543   
079D            544       Forever: 
079D            545        
079D E546       546           mov a, state_lcd
079F            547   
079F            548   ;        Check_start_Button:
079F            549   ;        PushButton(start,Check_stop_button)
079F            550   ;        setb TR2
079F            551   ;        ljmp forever
079F            552   ;        Check_stop_button:
079F            553   ;        PushButton(stop_Button, Continue8 )
079F            554   ;        clr TR2
079F            555   ;        ljmp Forever 
079F            556   ;     ;   lcall Reset_timer
079F            557   ;        Continue8:
079F            558   
079F            559           ;----------------STATE 0------------------;
079F            560            home_state:
079F B4001E     561               cjne a, #0, soak_reflow_state
07A2 20A515     562            jb set_BUTTON, done_home2
07A5 C002       562            push AR2
07A7 7A0A       562            mov R2, #10
07A9 1202A9     562            lcall ?Wait_Milli_Seconds
07AC D002       562            pop AR2
07AE 20A509     562            jb set_BUTTON, done_home2
07B1 30A5FD     562            jnb set_BUTTON, $
07B4            562    
07B4            563               ;setb set_flag  
07B4 754601     564               mov state_lcd, #1
07B7 0207BD     565               ljmp done_home
07BA            566               done_home2:
07BA            567               ;clr set_flag
07BA 120687     568               lcall home_page
07BD            569               done_home:
07BD 02079D     570               ljmp Forever           
07C0            571           ;------------------------------------------;
07C0            572           
07C0            573           ;----------------STATE 1-------------------;
07C0            574           soak_reflow_state:
07C0 B4014B     575               cjne a, #1, setup_soak
07C3 120740     576               lcall second_page
07C6            577             ;  Wait_Milli_Seconds(#50)
07C6 120666     578               lcall sec_counter ; prevent the timer to go over 60
07C9 120676     579               lcall min_counter
07CC 20A712     580            jb HOME_BUTTON, next_pushb
07CF C002       580            push AR2
07D1 7A0A       580            mov R2, #10
07D3 1202A9     580            lcall ?Wait_Milli_Seconds
07D6 D002       580            pop AR2
07D8 20A706     580            jb HOME_BUTTON, next_pushb
07DB 30A7FD     580            jnb HOME_BUTTON, $
07DE            580    ; check if home button is pressed 
07DE 754600     581               mov state_lcd, #0
07E1            582               next_pushb:
07E1 20A412     583            jb SETUP_SOAK_Button, next_pushb2
07E4 C002       583            push AR2
07E6 7A0A       583            mov R2, #10
07E8 1202A9     583            lcall ?Wait_Milli_Seconds
07EB D002       583            pop AR2
07ED 20A406     583            jb SETUP_SOAK_Button, next_pushb2
07F0 30A4FD     583            jnb SETUP_SOAK_Button, $
07F3            583    ; check if the the button to setup soak is pressed
07F3 754602     584               mov state_lcd, #2
07F6            585               next_pushb2:
07F6 20A612     586            jb Button_min, done_soak
07F9 C002       586            push AR2
07FB 7A0A       586            mov R2, #10
07FD 1202A9     586            lcall ?Wait_Milli_Seconds
0800 D002       586            pop AR2
0802 20A606     586            jb Button_min, done_soak
0805 30A6FD     586            jnb Button_min, $
0808            586    ; check if the buttion to setup the reflow was pressed 
0808 754603     587               mov state_lcd, #3
080B            588               done_soak:
080B 02079D     589              ljmp Forever
080E            590           ;------------------------------------------;
080E            591   
080E            592           ;-----------------STATE 2------------------;
080E            593           setup_soak:
080E B40221     594               cjne a, #2, setup_reflow
0811 12069D     595               lcall setup_reflow_page
0814            596             ;  Wait_Milli_Seconds(#50)
0814 120666     597               lcall sec_counter ; prevent the timer to go over 60
0817 120676     598               lcall min_counter
081A 20A712     599            jb HOME_BUTTON, done_setup_soak
081D C002       599            push AR2
081F 7A0A       599            mov R2, #10
0821 1202A9     599            lcall ?Wait_Milli_Seconds
0824 D002       599            pop AR2
0826 20A706     599            jb HOME_BUTTON, done_setup_soak
0829 30A7FD     599            jnb HOME_BUTTON, $
082C            599    ; check if home button is pressed 
082C 754600     600               mov state_lcd, #0
082F            601               done_setup_soak:
082F 02079D     602               ljmp Forever
0832            603           ;------------------------------------------;
0832            604   
0832            605           ;----------------STATE 3-------------------;
0832            606           setup_reflow:
0832 B40303     607               cjne a, #3, FDP
0835 02083B     608               ljmp FDP2
0838            609               FDP:
0838 02079F     610               ljmp home_state
083B            611               FDP2:
083B C0E0       612            push acc
083D 7401       612            mov a, #1
083F 14         612            dec a
0840 120331     612            lcall ?Set_Cursor_1 ; Select column and row
0843 D0E0       612            pop acc
0845 C083       613            push dph
0847 C082       613            push dpl
0849 C0E0       613            push acc
084B 9004D0     613            mov dptr, #test2
084E 120324     613            lcall ?Send_Constant_String
0851 D0E0       613            pop acc
0853 D082       613            pop dpl
0855 D083       613            pop dph
0857 C0E0       614            push acc
0859 7401       614            mov a, #1
085B 14         614            dec a
085C 12032F     614            lcall ?Set_Cursor_2 ; Select column and row
085F D0E0       614            pop acc
0861 C083       615            push dph
0863 C082       615            push dpl
0865 C0E0       615            push acc
0867 9004D0     615            mov dptr, #test2
086A 120324     615            lcall ?Send_Constant_String
086D D0E0       615            pop acc
086F D082       615            pop dpl
0871 D083       615            pop dph
0873 120666     616               lcall sec_counter ; prevent the timer to go over 60
0876 120676     617               lcall min_counter
0879 20A712     618            jb HOME_BUTTON, done_setup_reflow
087C C002       618            push AR2
087E 7A0A       618            mov R2, #10
0880 1202A9     618            lcall ?Wait_Milli_Seconds
0883 D002       618            pop AR2
0885 20A706     618            jb HOME_BUTTON, done_setup_reflow
0888 30A7FD     618            jnb HOME_BUTTON, $
088B            618    ; check if home button is pressed 
088B 754600     619               mov state_lcd, #0
088E            620               done_setup_reflow:
088E 02079D     621               ljmp Forever
0891            622           ;------------------------------------------;
0891            623   END
