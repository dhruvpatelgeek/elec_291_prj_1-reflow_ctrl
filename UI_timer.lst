0000              1   ;Start/Constants
                 -1       $MODLP51
0000              1   ;--------------------------------------------------------
0000              2   ; Special Function Registers
0000              3   ;--------------------------------------------------------
0000              4   ACC            DATA 0xe0
0000              5   B              DATA 0xf0
0000              6   PSW            DATA 0xd0
0000              7   SP             DATA 0x81
0000              8   SPX            DATA 0xef
0000              9   DPL            DATA 0x82
0000             10   DPH            DATA 0x83
0000             11   DPLB           DATA 0xd4
0000             12   DPHB           DATA 0xd5
0000             13   PAGE           DATA 0xf6
0000             14   AX             DATA 0xe1
0000             15   BX             DATA 0xf7
0000             16   DSPR           DATA 0xe2
0000             17   FIRD           DATA 0xe3
0000             18   MACL           DATA 0xe4
0000             19   MACH           DATA 0xe5
0000             20   PCON           DATA 0x87
0000             21   AUXR           DATA 0x8e
0000             22   AUXR1          DATA 0xa2
0000             23   DPCF           DATA 0xa1
0000             24   CKRL           DATA 0x97
0000             25   CKCKON0        DATA 0x8f
0000             26   CKCKON1        DATA 0xaf
0000             27   CKSEL          DATA 0x85
0000             28   CLKREG         DATA 0xae
0000             29   OSCCON         DATA 0x85
0000             30   IE             DATA 0xa8
0000             31   IEN0           DATA 0xa8
0000             32   IEN1           DATA 0xb1
0000             33   IPH0           DATA 0xb7
0000             34   IP             DATA 0xb8
0000             35   IPL0           DATA 0xb8
0000             36   IPH1           DATA 0xb3
0000             37   IPL1           DATA 0xb2
0000             38   P0             DATA 0x80
0000             39   P1             DATA 0x90
0000             40   P2             DATA 0xa0
0000             41   P3             DATA 0xb0
0000             42   P4             DATA 0xc0
0000             43   P0M0           DATA 0xe6
0000             44   P0M1           DATA 0xe7
0000             45   P1M0           DATA 0xd6
0000             46   P1M1           DATA 0xd7
0000             47   P2M0           DATA 0xce
0000             48   P2M1           DATA 0xcf
0000             49   P3M0           DATA 0xc6
0000             50   P3M1           DATA 0xc7
0000             51   P4M0           DATA 0xbe
0000             52   P4M1           DATA 0xbf
0000             53   SCON           DATA 0x98
0000             54   SBUF           DATA 0x99
0000             55   SADEN          DATA 0xb9
0000             56   SADDR          DATA 0xa9
0000             57   BDRCON         DATA 0x9b
0000             58   BRL            DATA 0x9a
0000             59   TCON           DATA 0x88
0000             60   TMOD           DATA 0x89
0000             61   TCONB          DATA 0x91
0000             62   TL0            DATA 0x8a
0000             63   TH0            DATA 0x8c
0000             64   TL1            DATA 0x8b
0000             65   TH1            DATA 0x8d
0000             66   RL0            DATA 0xf2
0000             67   RL1            DATA 0xf3
0000             68   RH0            DATA 0xf4
0000             69   RH1            DATA 0xf5
0000             70   WDTRST         DATA 0xa6
0000             71   WDTPRG         DATA 0xa7
0000             72   T2CON          DATA 0xc8
0000             73   T2MOD          DATA 0xc9
0000             74   RCAP2H         DATA 0xcb
0000             75   RCAP2L         DATA 0xca
0000             76   TH2            DATA 0xcd
0000             77   TL2            DATA 0xcc
0000             78   SPCON          DATA 0xc3
0000             79   SPSTA          DATA 0xc4
0000             80   SPDAT          DATA 0xc5
0000             81   SSCON          DATA 0x93
0000             82   SSCS           DATA 0x94
0000             83   SSDAT          DATA 0x95
0000             84   SSADR          DATA 0x96
0000             85   KBLS           DATA 0x9c
0000             86   KBE            DATA 0x9d
0000             87   KBF            DATA 0x9e
0000             88   KBMOD          DATA 0x9f
0000             89   BMSEL          DATA 0x92
0000             90   FCON           DATA 0xd2
0000             91   EECON          DATA 0xd2
0000             92   ACSRA          DATA 0xa3
0000             93   ACSRB          DATA 0xab
0000             94   AREF           DATA 0xbd
0000             95   DADC           DATA 0xa4
0000             96   DADI           DATA 0xa5
0000             97   DADL           DATA 0xac
0000             98   DADH           DATA 0xad
0000             99   CCON           DATA 0xd8
0000            100   CMOD           DATA 0xd9
0000            101   CL             DATA 0xe9
0000            102   CH             DATA 0xf9
0000            103   CCAPM0         DATA 0xda
0000            104   CCAPM1         DATA 0xdb
0000            105   CCAPM2         DATA 0xdc
0000            106   CCAPM3         DATA 0xdd
0000            107   CCAPM4         DATA 0xde
0000            108   CCAP0H         DATA 0xfa
0000            109   CCAP1H         DATA 0xfb
0000            110   CCAP2H         DATA 0xfc
0000            111   CCAP3H         DATA 0xfd
0000            112   CCAP4H         DATA 0xfe
0000            113   CCAP0L         DATA 0xea
0000            114   CCAP1L         DATA 0xeb
0000            115   CCAP2L         DATA 0xec
0000            116   CCAP3L         DATA 0xed
0000            117   CCAP4L         DATA 0xee
0000            118   ;--------------------------------------------------------
0000            119   ; special function bits
0000            120   ;--------------------------------------------------------
0000            121   P              BIT 0xd0
0000            122   F1             BIT 0xd1
0000            123   OV             BIT 0xd2
0000            124   RS0            BIT 0xd3
0000            125   RS1            BIT 0xd4
0000            126   F0             BIT 0xd5
0000            127   AC             BIT 0xd6
0000            128   CY             BIT 0xd7
0000            129   EX0            BIT 0xa8
0000            130   ET0            BIT 0xa9
0000            131   EX1            BIT 0xaa
0000            132   ET1            BIT 0xab
0000            133   ES             BIT 0xac
0000            134   ET2            BIT 0xad
0000            135   EC             BIT 0xae
0000            136   EA             BIT 0xaf
0000            137   PX0            BIT 0xb8
0000            138   PT0            BIT 0xb9
0000            139   PX1            BIT 0xba
0000            140   PT1            BIT 0xbb
0000            141   PS             BIT 0xbc
0000            142   PT2            BIT 0xbd
0000            143   IP0D           BIT 0xbf
0000            144   PPCL           BIT 0xbe
0000            145   PT2L           BIT 0xbd
0000            146   PLS            BIT 0xbc
0000            147   PT1L           BIT 0xbb
0000            148   PX1L           BIT 0xba
0000            149   PT0L           BIT 0xb9
0000            150   PX0L           BIT 0xb8
0000            151   RXD            BIT 0xb0
0000            152   TXD            BIT 0xb1
0000            153   INT0           BIT 0xb2
0000            154   INT1           BIT 0xb3
0000            155   T0             BIT 0xb4
0000            156   T1             BIT 0xb5
0000            157   WR             BIT 0xb6
0000            158   RD             BIT 0xb7
0000            159   RI             BIT 0x98
0000            160   TI             BIT 0x99
0000            161   RB8            BIT 0x9a
0000            162   TB8            BIT 0x9b
0000            163   REN            BIT 0x9c
0000            164   SM2            BIT 0x9d
0000            165   SM1            BIT 0x9e
0000            166   SM0            BIT 0x9f
0000            167   IT0            BIT 0x88
0000            168   IE0            BIT 0x89
0000            169   IT1            BIT 0x8a
0000            170   IE1            BIT 0x8b
0000            171   TR0            BIT 0x8c
0000            172   TF0            BIT 0x8d
0000            173   TR1            BIT 0x8e
0000            174   TF1            BIT 0x8f
0000            175   CP_RL2         BIT 0xc8
0000            176   C_T2           BIT 0xc9
0000            177   TR2            BIT 0xca
0000            178   EXEN2          BIT 0xcb
0000            179   TCLK           BIT 0xcc
0000            180   RCLK           BIT 0xcd
0000            181   EXF2           BIT 0xce
0000            182   TF2            BIT 0xcf
0000            183   CF             BIT 0xdf
0000            184   CR             BIT 0xde
0000            185   CCF4           BIT 0xdc
0000            186   CCF3           BIT 0xdb
0000            187   CCF2           BIT 0xda
0000            188   CCF1           BIT 0xd9
0000            189   CCF0           BIT 0xd8
0000              3           ; Reset vector
0000              4           org 0x0000
0000 020B03       5               ljmp MainProgram
0003              6   
0003              7           ; External interrupt 0 vector (not used in this code)
0003              8           org 0x0003
0003 32           9               reti
0004             10   
0004             11           ; Timer/Counter 0 overflow interrupt vector
000B             12           org 0x000B
000B 02037B      13               ljmp Timer0_ISR
000E             14   
000E             15           ; External interrupt 1 vector (not used in this code)
0013             16           org 0x0013
0013 32          17               reti
0014             18   
0014             19           ; Timer/Counter 1 overflow interrupt vector (not used in this code)
001B             20           org 0x001B
001B 32          21               reti
001C             22   
001C             23           ; Serial port receive/transmit interrupt vector (not used in this code)
0023             24           org 0x0023 
0023 32          25               reti
0024             26               
0024             27           ; Timer/Counter 2 overflow interrupt vector
002B             28           org 0x002B
002B 020397      29               ljmp Timer2_ISR
002E             30   
002E             31       ;CLK  EQU 22118400
002E             32       CLK  EQU 22118400
002E             33       ;termometer
002E             34       BAUD equ 115200
002E             35       BRG_VAL equ (0x100-(CLK/(16*BAUD)))
002E             36       ;timer
002E             37       TIMER0_RATE   EQU 4096     ; 2048Hz squarewave (peak amplitude of CEM-1203 speaker)
002E             38       TIMER0_RELOAD EQU ((65536-(CLK/TIMER0_RATE)))
002E             39       TIMER2_RATE   EQU 1000     ; 1000Hz, for a timer tick of 1ms
002E             40       TIMER2_RELOAD EQU ((65536-(CLK/TIMER2_RATE)))
002E             41   
002E             42   
002E             43       ; There is a couple of typos in MODLP51 in the definition of the timer 0/1 reload
002E             44       ; special function registers (SFRs), so:
002E             45   
002E             46       TIMER0_RELOAD_L DATA 0xf2
002E             47       TIMER1_RELOAD_L DATA 0xf3
002E             48       TIMER0_RELOAD_H DATA 0xf4
002E             49       TIMER1_RELOAD_H DATA 0xf5
002E             50   
002E             51   ;Variables (dseg)
0030             52       DSEG at 30H
0030             53   
0030             54       Result:    ds 4
0034             55       x:         ds 4
0038             56       y:         ds 4
003C             57       bcd:       ds 5
0041             58       ;FSM varialbles
0041             59       temp_soak: ds 1
0042             60       time_soak: ds 1
0043             61       temp_refl: ds 1
0044             62       time_refl: ds 1
0045             63       state:     ds 1
0046             64       state_lcd: ds 1
0047             65       temp:      ds 1
0048             66       sec:       ds 1
0049             67       pwm:       ds 1 ; Register that controls the power of the oven 
004A             68       ;;owen_temp ds 1
004A             69   
004A             70       ;Timer variables
004A             71       Count1ms:     ds 2 ; Used to determine when half second has passed
004C             72       reflow_temp:  ds 2
004E             73       soak_temp:    ds 2
0050             74       reflow_temp_var: ds 1
0051             75       BCD_counter:  ds 1 ; The BCD counter incrememted in the ISR and displayed in the main loop
0052             76       min:          ds 1
0053             77       hour:         ds 1
0054             78       reflow_sec:   ds 1
0055             79       reflow_min:   ds 1
0056             80       soak_sec:     ds 1
0057             81       soak_min:     ds 1
0058             82       alarm_min:    ds 1
0059             83       alarm_hour:   ds 1
005A             84       day:          ds 1
005B             85       month:        ds 1
005C             86       year:         ds 1
005D             87       hour_24:      ds 1
005E             88   
005E             89   
005E             90   ;flags (bseg)
0000             91       bseg
0000             92       mf:                dbit 1
0001             93       half_seconds_flag: dbit 1 ; Set to one in the ISR every time 500 ms had passed
0002             94       AMPM_flag:         dbit 1
0003             95       alarm_AMPM_flag:   dbit 1
0004             96       on_off_flag:       dbit 1 ; 1 is on
0005             97       alarm_buzzer_flag: dbit 1
0006             98       TR2_flag:          dbit 1
0007             99       tt_reflow_flag:    dbit 1
0008            100       tt_flag_soak:      dbit 1
0009            101   
0009            102   ;Pins Config (cseg)
002E            103       CSEG 
002E            104   
002E            105       done_button equ P0.0    
002E            106       done                   equ P0.1
002E            107       setup                  equ P0.2
002E            108       setmin                 equ P0.3
002E            109       sethour        equ P0.4
002E            110       setday        equ P0.5
002E            111   
002E            112       start         equ P0.7
002E            113   
002E            114       LCD_RS        equ P1.1
002E            115       LCD_RW        equ P1.2
002E            116       LCD_E         equ P1.3
002E            117       start2         equ p1.7   ;in slide it was KEY.3 which should be decided later so p1.7 is just a random pin
002E            118   
002E            119   
002E            120       ; These �EQU� must match the wiring between the microcontroller and ADC 
002E            121       CE_ADC       EQU  P2.0 
002E            122       MY_MOSI      EQU  P2.1 
002E            123       MY_MISO      EQU  P2.2 
002E            124       MY_SCLK      EQU  P2.3
002E            125       SETUP_SOAK_Button equ  P2.4
002E            126       set_BUTTON           equ  P2.5
002E            127       Button_min    equ  P2.6
002E            128       HOME_BUTTON   equ  P2.7
002E            129   
002E            130       ;LCD 4bits data
002E            131       LCD_D4        equ  P3.2
002E            132       LCD_D5        equ  P3.3
002E            133       LCD_D6        equ  P3.4
002E            134       LCD_D7        equ  P3.5
002E            135   
002E            136       BOOT_BUTTON   equ  P4.5
002E            137       SOUND_OUT     equ  P3.7
002E            138   
002E            139   ;include files 
                546   $LIST
                142   	    $LIST
0362            144   
0362            145   
0362            146   ;ISR
0362            147   
0362            148       
0362            149       ;---------------------------------;
0362            150       ; Routine to initialize the ISR   ;
0362            151       ; for timer 0                     ;
0362            152       ;---------------------------------;
0362            153       Timer0_Init:
0362 E589       154           mov a, TMOD
0364 54F0       155           anl a, #0xf0 ; Clear the bits for timer 0
0366 4401       156           orl a, #0x01 ; Configure timer 0 as 16-timer
0368 F589       157           mov TMOD, a
036A 758CEA     158           mov TH0, #high(TIMER0_RELOAD)
036D 758AE8     159           mov TL0, #low(TIMER0_RELOAD)
0370            160           ; Set autoreload value
0370 75F4EA     161           mov TIMER0_RELOAD_H, #high(TIMER0_RELOAD)
0373 75F2E8     162           mov TIMER0_RELOAD_L, #low(TIMER0_RELOAD)
0376            163           ; Enable the timer and interrupts
0376 D2A9       164           setb ET0  ; Enable timer 0 interrupt
0378 D28C       165           setb TR0  ; Start timer 0
037A 22         166           ret
037B            167   
037B            168       ;---------------------------------;
037B            169       ; ISR for timer 0.  Set to execute;
037B            170       ; every 1/4096Hz to generate a    ;
037B            171       ; 2048 Hz square wave at pin P3.7 ;
037B            172       ;---------------------------------;
037B            173       Timer0_ISR:
037B            174           ;clr TF0  ; According to the data sheet this is done for us already.
037B B2B7       175           cpl SOUND_OUT ; Connect speaker to P3.7!
037D 32         176           reti
037E            177   
037E            178       ;---------------------------------;
037E            179       ; Routine to initialize the ISR   ;
037E            180       ; for timer 2                     ;
037E            181       ;---------------------------------;
037E            182       Timer2_Init:
037E 75C800     183           mov T2CON, #0 ; Stop timer/counter.  Autoreload mode.
0381 75CDA9     184           mov TH2, #high(TIMER2_RELOAD)
0384 75CC9A     185           mov TL2, #low(TIMER2_RELOAD)
0387            186           ; Set the reload value
0387 75CBA9     187           mov RCAP2H, #high(TIMER2_RELOAD)
038A 75CA9A     188           mov RCAP2L, #low(TIMER2_RELOAD)
038D            189           ; Init One millisecond interrupt counter.  It is a 16-bit variable made with two 8-bit parts
038D E4         190           clr a
038E F54A       191           mov Count1ms+0, a
0390 F54B       192           mov Count1ms+1, a
0392            193           ; Enable the timer and interrupts
0392 D2AD       194           setb ET2  ; Enable timer 2 interrupt
0394 D2CA       195           setb TR2  ; Enable timer 2
0396 22         196           ret
0397            197   
0397            198       ;---------------------------------;
0397            199       ; ISR for timer 2                 ;
0397            200       ;---------------------------------;
0397            201       Timer2_ISR:
0397 C2CF       202           clr TF2  ; Timer 2 doesn't clear TF2 automatically. Do it in ISR
0399 B2B6       203           cpl P3.6 ; To check the interrupt rate with oscilloscope. It must be precisely a 1 ms pulse.
039B            204           
039B            205           ; The two registers used in the ISR must be saved in the stack
039B C0E0       206           push acc
039D C0D0       207           push psw
039F            208           
039F            209           ; Increment the 16-bit one mili second counter
039F 054A       210           inc Count1ms+0    ; Increment the low 8-bits first
03A1 E54A       211           mov a, Count1ms+0 ; If the low 8-bits overflow, then increment high 8-bits
03A3 7002       212           jnz Inc_Done
03A5 054B       213           inc Count1ms+1
03A7            214   
03A7            215       Inc_Done:
03A7            216           ; Check if half second has passed
03A7 E54A       217           mov a, Count1ms+0
03A9 B4E817     218           cjne a, #low(1000), Timer2_ISR_done ; Warning: this instruction changes the carry flag!
03AC E54B       219           mov a, Count1ms+1
03AE B40312     220           cjne a, #high(1000), Timer2_ISR_done
03B1            221           
03B1            222           ; 500 milliseconds have passed.  Set a flag so the main program knows
03B1 D201       223           setb half_seconds_flag ; Let the main program know half second had passed
03B3 B28C       224           cpl TR0 ; Enable/disable timer/counter 0. This line creates a beep-silence-beep-silence sound.
03B5            225           ; Reset to zero the milli-seconds counter, it is a 16-bit variable
03B5 E4         226           clr a
03B6 F54A       227           mov Count1ms+0, a
03B8 F54B       228           mov Count1ms+1, a
03BA            229           ; Increment the BCD counter
03BA E551       230           mov a, BCD_counter
03BC            231          ; jnb UPDOWN, Timer2_ISR_decrement
03BC 2401       232           add a, #0x01
03BE 8000       233           sjmp Timer2_ISR_da
03C0            234       Timer2_ISR_decrement:
03C0            235          ; add a, #0x99 ; Adding the 10-complement of -1 is like subtracting 1.
03C0            236       Timer2_ISR_da:
03C0 D4         237           da a ; Decimal adjust instruction.  Check datasheet for more details!
03C1 F551       238           mov BCD_counter, a
03C3            239           
03C3            240       Timer2_ISR_done:
03C3 D0D0       241           pop psw
03C5 D0E0       242           pop acc
03C7 32         243           reti
03C8            244   
03C8            245   
03C8            246   ;CONFIG:
03C8            247       ; Configure the serial port and baud rate
03C8            248       InitSerialPort:
03C8            249           ; Since the reset button bounces, we need to wait a bit before
03C8            250           ; sending messages, otherwise we risk displaying gibberish!
03C8 79DE       251           mov R1, #222
03CA 78A6       252           mov R0, #166
03CC D8FE       253           djnz R0, $   ; 3 cycles->3*45.21123ns*166=22.51519us
03CE D9FA       254           djnz R1, $-4 ; 22.51519us*222=4.998ms
03D0            255           ; Now we can proceed with the configuration
03D0 438780     256           orl      PCON,#0x80
03D3 759852     257           mov      SCON,#0x52
03D6 759B00     258           mov      BDRCON,#0x00
03D9 759AF4     259           mov      BRL,#BRG_VAL
03DC 759B1E     260           mov      BDRCON,#0x1E ; BDRCON=BRR|TBCK|RBCK|SPD;
03DF 22         261           ret
03E0            262   
03E0            263       ; Send a character using the serial port
03E0            264       putchar:
03E0 3099FD     265           jnb TI, putchar 
03E3            266           ; TI serial interrupt flag is set and when last bit (stop bit) 
03E3            267           ; of receiving data byte is received, RI flag get set. IE register
03E3            268           ; is used to enable/disable interrupt sources.
03E3 C299       269           clr TI
03E5 F599       270           mov SBUF, a
03E7 22         271           ret
03E8            272   
03E8            273       getchar: 
03E8 3098FD     274           jnb RI, getchar 
03EB C298       275           clr RI 
03ED E599       276           mov a, SBUF 
03EF 22         277           ret
03F0            278   
03F0            279       ; Send a constant-zero-terminated string using the serial port
03F0            280       SendString:
03F0 E4         281           clr A
03F1 93         282           movc A, @A+DPTR
03F2 6006       283           jz SendStringDone
03F4 1203E0     284           lcall putchar
03F7 A3         285           inc DPTR
03F8 80F6       286           sjmp SendString
03FA            287       SendStringDone:
03FA 22         288           ret
03FB            289   
03FB            290       INIT_SPI:     
03FB D2A2       291           setb MY_MISO    ; Make MISO an input pin  1 master input 0 slave out   ;MISO master in/slave out
03FD C2A3       292           clr MY_SCLK     ; For mode (0,0) SCLK is zero     
03FF 22         293           ret 
0400            294   
0400            295       DO_SPI_G:     
0400 C0E0       296           push acc     
0402 7900       297           mov R1, #0      ; Received byte stored in R1     
0404 7A08       298           mov R2, #8      ; Loop counter (8-bits)
0406            299           
0406            300       DO_SPI_G_LOOP:     
0406 E8         301           mov a, R0       ; Byte to write is in R0     
0407 33         302           rlc a           ; Carry flag has bit to write 
0408 F8         303           mov R0, a     
0409 92A1       304           mov MY_MOSI, c     
040B D2A3       305           setb MY_SCLK    ; Transmit     
040D A2A2       306           mov c, MY_MISO  ; Read received bit     
040F E9         307           mov a, R1       ; Save received bit in R1     
0410 33         308           rlc a     
0411 F9         309           mov R1, a     
0412 C2A3       310           clr MY_SCLK     
0414 DAF0       311           djnz R2, DO_SPI_G_LOOP     
0416 D0E0       312           pop acc     
0418 22         313           ret 
0419            314       
0419            315   WaitHalfSec:
0419 7AB2       316           mov R2, #178
041B 79FA       317           Lr3: mov R1, #250
041D 78A6       318           Lr2: mov R0, #166
041F D8FE       319           Lr1: djnz R0, Lr1 ; 3 cycles->3*45.21123ns*166=22.51519us
0421 D9FA       320           djnz R1, Lr2 ; 22.51519us*250=5.629ms
0423 DAF6       321           djnz R2, Lr3 ; 5.629ms*89=0.5s (approximately)
0425 22         322           ret
0426            323            
0426            324   blink:
0426 75817F     325           mov SP, #7FH
0429 75C700     326           mov P3M1, #0   ; Configure P3 in bidirectional mode
042C            327       M0:
042C B2B7       328           cpl P3.7
042E C0E0       329            push acc
0430 7401       329            mov a, #1
0432 14         329            dec a
0433 120331     329            lcall ?Set_Cursor_1 ; Select column and row
0436 D0E0       329            pop acc
0438 C083       330            push dph
043A C082       330            push dpl
043C C0E0       330            push acc
043E 9004BF     330            mov dptr, #nothing
0441 120324     330            lcall ?Send_Constant_String
0444 D0E0       330            pop acc
0446 D082       330            pop dpl
0448 D083       330            pop dph
044A C0E0       331            push acc
044C 7401       331            mov a, #1
044E 14         331            dec a
044F 12032F     331            lcall ?Set_Cursor_2 ; Select column and row
0452 D0E0       331            pop acc
0454 C083       332            push dph
0456 C082       332            push dpl
0458 C0E0       332            push acc
045A 9004BF     332            mov dptr, #nothing
045D 120324     332            lcall ?Send_Constant_String
0460 D0E0       332            pop acc
0462 D082       332            pop dpl
0464 D083       332            pop dph
0466 C0E0       333            push acc
0468 7401       333            mov a, #1
046A 14         333            dec a
046B 120331     333            lcall ?Set_Cursor_1 ; Select column and row
046E D0E0       333            pop acc
0470 C083       334            push dph
0472 C082       334            push dpl
0474 C0E0       334            push acc
0476 9004E1     334            mov dptr, #hot
0479 120324     334            lcall ?Send_Constant_String
047C D0E0       334            pop acc
047E D082       334            pop dpl
0480 D083       334            pop dph
0482 C0E0       335            push acc
0484 7401       335            mov a, #1
0486 14         335            dec a
0487 12032F     335            lcall ?Set_Cursor_2 ; Select column and row
048A D0E0       335            pop acc
048C C083       336            push dph
048E C082       336            push dpl
0490 C0E0       336            push acc
0492 9004E1     336            mov dptr, #hot
0495 120324     336            lcall ?Send_Constant_String
0498 D0E0       336            pop acc
049A D082       336            pop dpl
049C D083       336            pop dph
049E            337   
049E 120419     338           lcall WaitHalfSec
04A1            339   
04A1 22         340           ret
04A2            341   
04A2            342       
04A2            343   Strings:
04A2            344       ;Hello_World:
04A2            345           ;DB  'Hello, World!', '\r', '\n', 0
04A2            346       Newline:
04A2 0D0A00     347               DB   '\r', '\n', 0
04A5            348       Space:
04A5 20202020   349               DB   '      ','\r', '\n', 0
     20200D0A
     00
04AE            350   
04AE            351                       ;     1234567890123456
04AE 54656D70   352       Temp0:            db 'Temp:xxxC       ', 0
     3A787878
     43202020
     20202020
     00
04BF 20202020   353       nothing:          db '                ',0
     20202020
     20202020
     20202020
     00
04D0 20202020   354       test2:            db '      Test2     ',0
     20205465
     73743220
     20202020
     00
04E1 20202020   355       hot:                           db '      HOT       ', 0
     2020484F
     54202020
     20202020
     00
04F2 54696D65   356       Time:             db 'Time xx:xx SET  ', 0
     2078783A
     78782053
     45542020
     00
0503 3A00       357       dots:             db ':',0
0505 2020534F   358       soak_reflw:       db '  SOAK  REFLOW  ', 0
     414B2020
     5245464C
     4F572020
     00
0516 54656D70   359       reflow_setup:     db 'Temp',0
     00
051B 2A524546   360       reflow_setup4:    db '*REFLOW*',0
     4C4F572A
     00
0524 54696D65   361       reflow_setup2:    db 'Time',0
     00
0529 484F4D45   362       reflow_setup3:    db 'HOME',0
     00
052E            363   
052E 54656D70   364       soak_setup0:      db 'Temp',0
     00
0533 202A534F   365       soak_setup1:      db ' *SOAK*',0
     414B2A00
053B 54696D65   366       soak_setup2:      db 'Time',0
     00
0540 484F4D45   367       soak_setup3:      db 'HOME',0
     00
0545            368   
0545            369   
0545            370   convert:
0545 853034     371       mov x+0, Result
0548 853135     372            mov x+1, Result+1 
054B 753600     373            mov x+2, #0
054E 753700     374            mov x+3, #0
0551 22         375       ret
0552            376   Display_temp:
0552 75389A     377            mov y+0, #low (410 % 0x10000) 
0555 753901     377            mov y+1, #high(410 % 0x10000) 
0558 753A00     377            mov y+2, #low (410 / 0x10000) 
055B 753B00     377            mov y+3, #high(410 / 0x10000) 
055E 1201A8     378       lcall mul32
0561 7538FF     379            mov y+0, #low (1023 % 0x10000) 
0564 753903     379            mov y+1, #high(1023 % 0x10000) 
0567 753A00     379            mov y+2, #low (1023 / 0x10000) 
056A 753B00     379            mov y+3, #high(1023 / 0x10000) 
056D 120235     380       lcall div32
0570 753811     381            mov y+0, #low (273 % 0x10000) 
0573 753901     381            mov y+1, #high(273 % 0x10000) 
0576 753A00     381            mov y+2, #low (273 / 0x10000) 
0579 753B00     381            mov y+3, #high(273 / 0x10000) 
057C 120114     382       lcall sub32
057F 12002E     383       lcall hex2bcd
0582 1203C8     384       lcall InitSerialPort
0585 C0E0       385            push acc
0587 7401       385            mov a, #1
0589 14         385            dec a
058A 120331     385            lcall ?Set_Cursor_1 ; Select column and row
058D D0E0       385            pop acc
058F C083       386            push dph
0591 C082       386            push dpl
0593 C0E0       386            push acc
0595 9004AE     386            mov dptr, #Temp0
0598 120324     386            lcall ?Send_Constant_String
059B D0E0       386            pop acc
059D D082       386            pop dpl
059F D083       386            pop dph
05A1 1203F0     387       lcall SendString
05A4 C0E0       388            push acc
05A6 7405       388            mov a, #5
05A8 14         388            dec a
05A9 120331     388            lcall ?Set_Cursor_1 ; Select column and row
05AC D0E0       388            pop acc    
05AE C000       389            push ar0
05B0 A83D       389            mov r0, bcd+1
05B2 12034C     389            lcall ?Send_BCD
05B5 D000       389            pop ar0 ; send fisrt 2 digits to putty
05B7 C000       390            push ar0
05B9 A83D       390            mov r0, bcd+1
05BB 120336     390            lcall ?Display_BCD
05BE D000       390            pop ar0; send fisrt 2 digits to lcd
05C0 C0E0       391            push acc
05C2 7407       391            mov a, #7
05C4 14         391            dec a
05C5 120331     391            lcall ?Set_Cursor_1 ; Select column and row
05C8 D0E0       391            pop acc 
05CA C000       392            push ar0
05CC A83C       392            mov r0, bcd
05CE 12034C     392            lcall ?Send_BCD
05D1 D000       392            pop ar0 ; send last 2 digits to putty
05D3 C000       393            push ar0
05D5 A83C       393            mov r0, bcd+0
05D7 120336     393            lcall ?Display_BCD
05DA D000       393            pop ar0 ; send last 2 digits to lcd
05DC C0E0       394            push acc
05DE 7405       394            mov a, #5
05E0 14         394            dec a
05E1 120331     394            lcall ?Set_Cursor_1 ; Select column and row
05E4 D0E0       394            pop acc
05E6 C083       395            push dph
05E8 C082       395            push dpl
05EA C0E0       395            push acc
05EC 900503     395            mov dptr, #dots
05EF 120324     395            lcall ?Send_Constant_String
05F2 D0E0       395            pop acc
05F4 D082       395            pop dpl
05F6 D083       395            pop dph
05F8 1203F0     396       lcall SendString
05FB 9004A2     397       mov DPTR, #Newline
05FE 1203F0     398       lcall SendString
0601 22         399       ret
0602            400   config_adc:
0602 C2A0       401           clr CE_ADC 
0604 7801       402           mov R0, #00000001B; Start bit:1 
0606 120400     403           lcall DO_SPI_G
0609            404   
0609 7880       405           mov R0, #10000000B; Single ended, read channel 0 
060B 120400     406           lcall DO_SPI_G 
060E E9         407           mov a, R1          ; R1 contains bits 8 and 9 
060F 5403       408           anl a, #00000011B  ; We need only the two least significant bits 
0611 F531       409           mov Result+1, a    ; Save result high.
0613            410   
0613 7855       411           mov R0, #55H; It doesn't matter what we transmit... 
0615 120400     412           lcall DO_SPI_G 
0618 8930       413           mov Result, R1     ; R1 contains bits 0 to 7.  Save result low. 
061A D2A0       414           setb CE_ADC 
061C 120545     415           lcall convert  
061F E53C       416           mov a, bcd ; move temp to accumulator 
0621 22         417           ret
0622            418   Reset_timer:
0622            419   
0622 C2CA       420       clr TR2                 ; Stop timer 2
0624 E4         421       clr a
0625 F54A       422            mov Count1ms+0, a
0627 F54B       423            mov Count1ms+1, a
0629            424            ; Now clear the BCD counter and min
0629 F551       425            mov BCD_counter, a
062B D2CA       426            setb TR2                ; Start timer 2
062D            427   
062D 22         428       ret
062E            429   Display_time:
062E C0E0       430            push acc
0630 7401       430            mov a, #1
0632 14         430            dec a
0633 12032F     430            lcall ?Set_Cursor_2 ; Select column and row
0636 D0E0       430            pop acc
0638 C083       431            push dph
063A C082       431            push dpl
063C C0E0       431            push acc
063E 9004F2     431            mov dptr, #Time
0641 120324     431            lcall ?Send_Constant_String
0644 D0E0       431            pop acc
0646 D082       431            pop dpl
0648 D083       431            pop dph
064A C201       432       clr half_seconds_flag ; We clear this flag in the main loop, but it is set in the ISR for timer 2
064C C0E0       433            push acc
064E 7409       433            mov a, #9
0650 14         433            dec a
0651 12032F     433            lcall ?Set_Cursor_2 ; Select column and row
0654 D0E0       433            pop acc     ; the place in the LCD where we want the BCD counter value
0656 C000       434            push ar0
0658 A851       434            mov r0, BCD_counter
065A 120336     434            lcall ?Display_BCD
065D D000       434            pop ar0 ; This macro is also in 'LCD_4bit.inc'
065F C0E0       435            push acc
0661 7406       435            mov a, #6
0663 14         435            dec a
0664 12032F     435            lcall ?Set_Cursor_2 ; Select column and row
0667 D0E0       435            pop acc     ; the place in the LCD where we want the BCD counter value
0669 C000       436            push ar0
066B A852       436            mov r0, min
066D 120336     436            lcall ?Display_BCD
0670 D000       436            pop ar0 ; This macro is also in 'LCD_4bit.inc'
0672            437   
0672 22         438       ret
0673            439   ;Timer couter 
0673            440       sec_counter: 
0673 E551       441           mov a,BCD_counter
0675 B4600A     442           cjne a, #0x60, Continue1 ; check if the couter reached 60s
0678 E552       443           mov a, min
067A 2401       444           add a, #0x01 ; add one to the minutes
067C D4         445           da a ; Decimal adjust instruction.  Check datasheet for more details!
067D F552       446           mov min, a
067F 120622     447           lcall Reset_timer
0682            448                Continue1:
0682 22         449           ret
0683            450       min_counter:
0683 E552       451                    mov a,min
0685 B4600B     452                    cjne a, #0x60, Continue2
0688 C2CA       453                    clr TR2                 ; Stop timer 2
068A E4         454                    clr a                   
068B F54A       455                    mov Count1ms+0, a
068D F54B       456                    mov Count1ms+1, a       ; Now clear the BCD counter
068F F552       457                    mov min, a              ; Reset min
0691 D2CA       458           setb TR2                ; Start timer 2
0693            459   
0693            460                    Continue2:
0693 22         461           ret
0694            462   home_page:
0694            463       ;--------Timer----------;
0694 300109     464       jnb half_seconds_flag, Temp_sensor
0697 120673     465       lcall sec_counter
069A 120683     466       lcall min_counter
069D 12062E     467       lcall Display_time
06A0            468       ;-----------------------;
06A0            469               
06A0            470       ;-----TEMP SENSOR-------;
06A0            471       Temp_sensor:
06A0 120602     472       lcall config_adc
06A3 120552     473       lcall Display_temp
06A6 120419     474       lcall  WaitHalfSec 
06A9            475       ;-----------------------;
06A9 22         476       ret
06AA            477   
06AA            478   setup_reflow_page:
06AA 20A511     479            jb set_BUTTON, continue9
06AD C002       479            push AR2
06AF 7A0A       479            mov R2, #10
06B1 1202A9     479            lcall ?Wait_Milli_Seconds
06B4 D002       479            pop AR2
06B6 20A505     479            jb set_BUTTON, continue9
06B9 30A5FD     479            jnb set_BUTTON, $
06BC            479   
06BC B207       480       cpl tt_reflow_flag
06BE            481       continue9:
06BE            482   
06BE 200706     483       jb tt_reflow_flag, jump1
06C1            484       ;jnb tt_reflow_flag, jump1
06C1 1207A3     485       lcall INC_DEC_Reflow_time
06C4 0206CA     486       ljmp display_reflow_page
06C7            487       jump1:
06C7 1207EB     488       lcall INC_DEC_Reflow_temp
06CA            489   
06CA            490   
06CA            491       display_reflow_page:
06CA C0E0       492            push acc
06CC 7405       492            mov a, #5
06CE 14         492            dec a
06CF 120331     492            lcall ?Set_Cursor_1 ; Select column and row
06D2 D0E0       492            pop acc
06D4 C000       493            push ar0
06D6 A84C       493            mov r0, reflow_temp+0
06D8 120336     493            lcall ?Display_BCD
06DB D000       493            pop ar0
06DD C0E0       494            push acc
06DF 7407       494            mov a, #7
06E1 14         494            dec a
06E2 120331     494            lcall ?Set_Cursor_1 ; Select column and row
06E5 D0E0       494            pop acc
06E7 C000       495            push ar0
06E9 A84D       495            mov r0, reflow_temp+1
06EB 120336     495            lcall ?Display_BCD
06EE D000       495            pop ar0
06F0            496          
06F0            497       
06F0 C0E0       498            push acc
06F2 7401       498            mov a, #1
06F4 14         498            dec a
06F5 120331     498            lcall ?Set_Cursor_1 ; Select column and row
06F8 D0E0       498            pop acc
06FA C083       499            push dph
06FC C082       499            push dpl
06FE C0E0       499            push acc
0700 900516     499            mov dptr, #reflow_setup
0703 120324     499            lcall ?Send_Constant_String
0706 D0E0       499            pop acc
0708 D082       499            pop dpl
070A D083       499            pop dph
070C C0E0       500            push acc
070E 7409       500            mov a, #9
0710 14         500            dec a
0711 120331     500            lcall ?Set_Cursor_1 ; Select column and row
0714 D0E0       500            pop acc
0716 C083       501            push dph
0718 C082       501            push dpl
071A C0E0       501            push acc
071C 90051B     501            mov dptr, #reflow_setup4
071F 120324     501            lcall ?Send_Constant_String
0722 D0E0       501            pop acc
0724 D082       501            pop dpl
0726 D083       501            pop dph
0728            502   
0728 C0E0       503            push acc
072A 7401       503            mov a, #1
072C 14         503            dec a
072D 12032F     503            lcall ?Set_Cursor_2 ; Select column and row
0730 D0E0       503            pop acc
0732 C083       504            push dph
0734 C082       504            push dpl
0736 C0E0       504            push acc
0738 900524     504            mov dptr, #reflow_setup2
073B 120324     504            lcall ?Send_Constant_String
073E D0E0       504            pop acc
0740 D082       504            pop dpl
0742 D083       504            pop dph
0744 C0E0       505            push acc
0746 7408       505            mov a, #8
0748 14         505            dec a
0749 12032F     505            lcall ?Set_Cursor_2 ; Select column and row
074C D0E0       505            pop acc
074E C083       506            push dph
0750 C082       506            push dpl
0752 C0E0       506            push acc
0754 900503     506            mov dptr, #dots
0757 120324     506            lcall ?Send_Constant_String
075A D0E0       506            pop acc
075C D082       506            pop dpl
075E D083       506            pop dph
0760 C0E0       507            push acc
0762 740C       507            mov a, #12
0764 14         507            dec a
0765 12032F     507            lcall ?Set_Cursor_2 ; Select column and row
0768 D0E0       507            pop acc
076A C083       508            push dph
076C C082       508            push dpl
076E C0E0       508            push acc
0770 900529     508            mov dptr, #reflow_setup3
0773 120324     508            lcall ?Send_Constant_String
0776 D0E0       508            pop acc
0778 D082       508            pop dpl
077A D083       508            pop dph
077C C0E0       509            push acc
077E 7409       509            mov a, #9
0780 14         509            dec a
0781 12032F     509            lcall ?Set_Cursor_2 ; Select column and row
0784 D0E0       509            pop acc
0786 C000       510            push ar0
0788 A854       510            mov r0, reflow_sec
078A 120336     510            lcall ?Display_BCD
078D D000       510            pop ar0
078F C0E0       511            push acc
0791 7406       511            mov a, #6
0793 14         511            dec a
0794 12032F     511            lcall ?Set_Cursor_2 ; Select column and row
0797 D0E0       511            pop acc
0799 C000       512            push ar0
079B A855       512            mov r0, reflow_min
079D 120336     512            lcall ?Display_BCD
07A0 D000       512            pop ar0
07A2            513   
07A2 22         514       ret
07A3            515       INC_DEC_Reflow_time:
07A3            516   
07A3 20A424     517            jb SETUP_SOAK_Button, check_decrement
07A6 C002       517            push AR2
07A8 7A0A       517            mov R2, #10
07AA 1202A9     517            lcall ?Wait_Milli_Seconds
07AD D002       517            pop AR2
07AF 20A418     517            jb SETUP_SOAK_Button, check_decrement
07B2 30A4FD     517            jnb SETUP_SOAK_Button, $
07B5            517    ; setup soak is also used to increment 
07B5            518   
07B5 E554       519           mov a, reflow_sec
07B7 B4590B     520           cjne a, #0x59, add_reflow_sec
07BA E555       521           mov a, reflow_min
07BC 2401       522           add a, #0x01
07BE D4         523           da a
07BF F555       524           mov reflow_min, a
07C1 E4         525           clr a 
07C2 0207C8     526           ljmp Continue5
07C5            527           add_reflow_sec:
07C5 2401       528           add a, #0x01
07C7 D4         529           da a ; Decimal adjust instruction.  Check datasheet for more details!
07C8            530           Continue5:
07C8 F554       531           mov reflow_sec, a
07CA            532   
07CA            533           check_decrement:
07CA 20A61D     534            jb Button_min, continue8
07CD C002       534            push AR2
07CF 7A0A       534            mov R2, #10
07D1 1202A9     534            lcall ?Wait_Milli_Seconds
07D4 D002       534            pop AR2
07D6 20A611     534            jb Button_min, continue8
07D9 30A6FD     534            jnb Button_min, $
07DC            534   
07DC E554       535           mov a, reflow_sec
07DE B40004     536           cjne a, #0x00, sub_reflow_sec
07E1 E4         537           clr a 
07E2 0207E8     538           ljmp Continue6
07E5            539           sub_reflow_sec:
07E5 2499       540           add a, #0x99 ; add 99 reduces 1
07E7 D4         541           da a ; Decimal adjust instruction.  Check datasheet for more details!
07E8            542           Continue6:
07E8 F554       543           mov reflow_sec, a
07EA            544           continue8:
07EA 22         545           ret
07EB            546       INC_DEC_Reflow_temp:
07EB            547           ;PushButton(SETUP_SOAK_Button,check_decrement2) ; setup soak is also used to increment 
07EB            548   
07EB 20A464     549               jb SETUP_SOAK_Button, check_decrement2  
07EE C002       550            push AR2
07F0 7A32       550            mov R2, #50
07F2 1202A9     550            lcall ?Wait_Milli_Seconds
07F5 D002       550            pop AR2         
07F7 20A458     551               jb SETUP_SOAK_Button, check_decrement2  
07FA            552               loop_hold_inc:
07FA            553   
07FA 30A40F     554               jnb SETUP_SOAK_Button, jump2
07FD C002       555            push AR2
07FF 7A64       555            mov R2, #100
0801 1202A9     555            lcall ?Wait_Milli_Seconds
0804 D002       555            pop AR2
0806 30A403     556               jnb SETUP_SOAK_Button, jump2
0809 020852     557               ljmp hold_done
080C            558               jump2:
080C C0E0       559            push acc
080E 7405       559            mov a, #5
0810 14         559            dec a
0811 120331     559            lcall ?Set_Cursor_1 ; Select column and row
0814 D0E0       559            pop acc
0816 C000       560            push ar0
0818 A84C       560            mov r0, reflow_temp+0
081A 120336     560            lcall ?Display_BCD
081D D000       560            pop ar0
081F C0E0       561            push acc
0821 7407       561            mov a, #7
0823 14         561            dec a
0824 120331     561            lcall ?Set_Cursor_1 ; Select column and row
0827 D0E0       561            pop acc
0829 C000       562            push ar0
082B A84D       562            mov r0, reflow_temp+1
082D 120336     562            lcall ?Display_BCD
0830 D000       562            pop ar0
0832 C002       563            push AR2
0834 7A64       563            mov R2, #100
0836 1202A9     563            lcall ?Wait_Milli_Seconds
0839 D002       563            pop AR2         
083B E54D       564               mov a, reflow_temp+1
083D 2401       565               add a, #0x01
083F D4         566               da a ; Decimal adjust instruction.  Check datasheet for more details!
0840 F54D       567               mov reflow_temp+1, a
0842 E54D       568               mov a, reflow_temp+1
0844 7009       569               jnz INC_reflow_temp_done2
0846 E54C       570               mov a, reflow_temp+0
0848 2401       571               add a, #0x01
084A D4         572               da a ; Decimal adjust instruction.  Check datasheet for more details!
084B F54C       573               mov reflow_temp+0, a
084D E54D       574               mov a, reflow_temp+1
084F            575               INC_reflow_temp_done2:
084F            576               
084F 0207FA     577               ljmp loop_hold_inc
0852            578           hold_done:
0852            579           
0852            580   
0852            581   
0852            582           check_decrement2:
0852 20A664     583               jb Button_min, DEC_reflow_temp_done2  
0855 C002       584            push AR2
0857 7A32       584            mov R2, #50
0859 1202A9     584            lcall ?Wait_Milli_Seconds
085C D002       584            pop AR2         
085E 20A658     585               jb Button_min, DEC_reflow_temp_done2  
0861            586               loop_hold_dec:
0861            587   
0861 30A60F     588               jnb Button_min, jump3
0864 C002       589            push AR2
0866 7A64       589            mov R2, #100
0868 1202A9     589            lcall ?Wait_Milli_Seconds
086B D002       589            pop AR2
086D 30A603     590               jnb Button_min, jump3
0870 0208B9     591               ljmp DEC_reflow_temp_done2
0873            592               jump3:
0873 C0E0       593            push acc
0875 7405       593            mov a, #5
0877 14         593            dec a
0878 120331     593            lcall ?Set_Cursor_1 ; Select column and row
087B D0E0       593            pop acc
087D C000       594            push ar0
087F A84C       594            mov r0, reflow_temp+0
0881 120336     594            lcall ?Display_BCD
0884 D000       594            pop ar0
0886 C0E0       595            push acc
0888 7407       595            mov a, #7
088A 14         595            dec a
088B 120331     595            lcall ?Set_Cursor_1 ; Select column and row
088E D0E0       595            pop acc
0890 C000       596            push ar0
0892 A84D       596            mov r0, reflow_temp+1
0894 120336     596            lcall ?Display_BCD
0897 D000       596            pop ar0
0899 C002       597            push AR2
089B 7A64       597            mov R2, #100
089D 1202A9     597            lcall ?Wait_Milli_Seconds
08A0 D002       597            pop AR2         
08A2 E54D       598               mov a, reflow_temp+1
08A4 2499       599               add a, #0x99
08A6 D4         600               da a ; Decimal adjust instruction.  Check datasheet for more details!
08A7 F54D       601               mov reflow_temp+1, a
08A9 E54D       602               mov a, reflow_temp+1
08AB 7009       603               jnz INC_reflow_temp_done
08AD E54C       604               mov a, reflow_temp+0
08AF 2499       605               add a, #0x99
08B1 D4         606               da a ; Decimal adjust instruction.  Check datasheet for more details!
08B2 F54C       607               mov reflow_temp+0, a
08B4 E54D       608               mov a, reflow_temp+1
08B6            609               INC_reflow_temp_done:
08B6            610               
08B6 020861     611               ljmp loop_hold_dec
08B9            612   
08B9            613           DEC_reflow_temp_done2:
08B9            614       
08B9            615   
08B9 22         616       ret
08BA            617   setup_soak_page:
08BA 20A511     618            jb set_BUTTON, continue11
08BD C002       618            push AR2
08BF 7A0A       618            mov R2, #10
08C1 1202A9     618            lcall ?Wait_Milli_Seconds
08C4 D002       618            pop AR2
08C6 20A505     618            jb set_BUTTON, continue11
08C9 30A5FD     618            jnb set_BUTTON, $
08CC            618   
08CC B208       619       cpl tt_flag_soak
08CE            620       continue11:
08CE            621   
08CE 200806     622       jb tt_flag_soak, jump4
08D1 1209B3     623       lcall INC_DEC_soak_time
08D4 0208DA     624       ljmp display_soak_page
08D7            625       jump4:
08D7 1209FB     626       lcall INC_DEC_soak_temp
08DA            627   
08DA            628   
08DA            629       display_soak_page:
08DA C0E0       630            push acc
08DC 7405       630            mov a, #5
08DE 14         630            dec a
08DF 120331     630            lcall ?Set_Cursor_1 ; Select column and row
08E2 D0E0       630            pop acc
08E4 C000       631            push ar0
08E6 A84E       631            mov r0, soak_temp+0
08E8 120336     631            lcall ?Display_BCD
08EB D000       631            pop ar0
08ED C0E0       632            push acc
08EF 7407       632            mov a, #7
08F1 14         632            dec a
08F2 120331     632            lcall ?Set_Cursor_1 ; Select column and row
08F5 D0E0       632            pop acc
08F7 C000       633            push ar0
08F9 A84F       633            mov r0, soak_temp+1
08FB 120336     633            lcall ?Display_BCD
08FE D000       633            pop ar0
0900            634          
0900            635       
0900 C0E0       636            push acc
0902 7401       636            mov a, #1
0904 14         636            dec a
0905 120331     636            lcall ?Set_Cursor_1 ; Select column and row
0908 D0E0       636            pop acc
090A C083       637            push dph
090C C082       637            push dpl
090E C0E0       637            push acc
0910 90052E     637            mov dptr, #soak_setup0
0913 120324     637            lcall ?Send_Constant_String
0916 D0E0       637            pop acc
0918 D082       637            pop dpl
091A D083       637            pop dph
091C C0E0       638            push acc
091E 7409       638            mov a, #9
0920 14         638            dec a
0921 120331     638            lcall ?Set_Cursor_1 ; Select column and row
0924 D0E0       638            pop acc
0926            638   
0926 C083       639            push dph
0928 C082       639            push dpl
092A C0E0       639            push acc
092C 900533     639            mov dptr, #soak_setup1
092F 120324     639            lcall ?Send_Constant_String
0932 D0E0       639            pop acc
0934 D082       639            pop dpl
0936 D083       639            pop dph
0938            640   
0938 C0E0       641            push acc
093A 7401       641            mov a, #1
093C 14         641            dec a
093D 12032F     641            lcall ?Set_Cursor_2 ; Select column and row
0940 D0E0       641            pop acc
0942            641   
0942 C083       642            push dph
0944 C082       642            push dpl
0946 C0E0       642            push acc
0948 90053B     642            mov dptr, #soak_setup2
094B 120324     642            lcall ?Send_Constant_String
094E D0E0       642            pop acc
0950 D082       642            pop dpl
0952 D083       642            pop dph
0954 C0E0       643            push acc
0956 7408       643            mov a, #8
0958 14         643            dec a
0959 12032F     643            lcall ?Set_Cursor_2 ; Select column and row
095C D0E0       643            pop acc
095E            643   
095E C083       644            push dph
0960 C082       644            push dpl
0962 C0E0       644            push acc
0964 900503     644            mov dptr, #dots
0967 120324     644            lcall ?Send_Constant_String
096A D0E0       644            pop acc
096C D082       644            pop dpl
096E D083       644            pop dph
0970 C0E0       645            push acc
0972 740C       645            mov a, #12
0974 14         645            dec a
0975 12032F     645            lcall ?Set_Cursor_2 ; Select column and row
0978 D0E0       645            pop acc
097A C083       646            push dph
097C C082       646            push dpl
097E C0E0       646            push acc
0980 900540     646            mov dptr, #soak_setup3
0983 120324     646            lcall ?Send_Constant_String
0986 D0E0       646            pop acc
0988 D082       646            pop dpl
098A D083       646            pop dph
098C C0E0       647            push acc
098E 7409       647            mov a, #9
0990 14         647            dec a
0991 12032F     647            lcall ?Set_Cursor_2 ; Select column and row
0994 D0E0       647            pop acc
0996            647   
0996 C000       648            push ar0
0998 A856       648            mov r0, soak_sec
099A 120336     648            lcall ?Display_BCD
099D D000       648            pop ar0
099F C0E0       649            push acc
09A1 7406       649            mov a, #6
09A3 14         649            dec a
09A4 12032F     649            lcall ?Set_Cursor_2 ; Select column and row
09A7 D0E0       649            pop acc
09A9 C000       650            push ar0
09AB A857       650            mov r0, soak_min
09AD 120336     650            lcall ?Display_BCD
09B0 D000       650            pop ar0
09B2 22         651   ret
09B3            652       INC_DEC_soak_time:
09B3            653       
09B3 20A424     654            jb SETUP_SOAK_Button, check_decrement_soak
09B6 C002       654            push AR2
09B8 7A0A       654            mov R2, #10
09BA 1202A9     654            lcall ?Wait_Milli_Seconds
09BD D002       654            pop AR2
09BF 20A418     654            jb SETUP_SOAK_Button, check_decrement_soak
09C2 30A4FD     654            jnb SETUP_SOAK_Button, $
09C5            654    ; setup soak is also used to increment 
09C5            655   
09C5 E556       656           mov a, soak_sec
09C7 B4590B     657           cjne a, #0x59, add_soak_sec
09CA E557       658           mov a, soak_min
09CC 2401       659           add a, #0x01
09CE D4         660           da a
09CF F557       661           mov soak_min, a
09D1 E4         662           clr a 
09D2 0209D8     663           ljmp Continue12
09D5            664           add_soak_sec:
09D5 2401       665           add a, #0x01
09D7 D4         666           da a ; Decimal adjust instruction.  Check datasheet for more details!
09D8            667           Continue12:
09D8 F556       668           mov soak_sec, a
09DA            669   
09DA            670           check_decrement_soak:
09DA 20A61D     671            jb Button_min, continue13
09DD C002       671            push AR2
09DF 7A0A       671            mov R2, #10
09E1 1202A9     671            lcall ?Wait_Milli_Seconds
09E4 D002       671            pop AR2
09E6 20A611     671            jb Button_min, continue13
09E9 30A6FD     671            jnb Button_min, $
09EC            671   
09EC E556       672           mov a, soak_sec
09EE B40004     673           cjne a, #0x00, sub_soak_sec
09F1 E4         674           clr a 
09F2 0209F8     675           ljmp Continue14
09F5            676           sub_soak_sec:
09F5 2499       677           add a, #0x99 ; add 99 reduces 1
09F7 D4         678           da a ; Decimal adjust instruction.  Check datasheet for more details!
09F8            679           Continue14:
09F8 F556       680           mov soak_sec, a
09FA            681           continue13:
09FA            682           
09FA 22         683           ret
09FB            684       INC_DEC_soak_temp:
09FB            685           
09FB 20A464     686               jb SETUP_SOAK_Button, check_decrement2_soak  
09FE C002       687            push AR2
0A00 7A32       687            mov R2, #50
0A02 1202A9     687            lcall ?Wait_Milli_Seconds
0A05 D002       687            pop AR2         
0A07 20A458     688               jb SETUP_SOAK_Button, check_decrement2_soak  
0A0A            689               loop_hold_inc_soak:
0A0A            690   
0A0A 30A40F     691               jnb SETUP_SOAK_Button, jump6
0A0D C002       692            push AR2
0A0F 7A64       692            mov R2, #100
0A11 1202A9     692            lcall ?Wait_Milli_Seconds
0A14 D002       692            pop AR2
0A16 30A403     693               jnb SETUP_SOAK_Button, jump6
0A19 020A62     694               ljmp hold_done_soak
0A1C            695               jump6:
0A1C C0E0       696            push acc
0A1E 7405       696            mov a, #5
0A20 14         696            dec a
0A21 120331     696            lcall ?Set_Cursor_1 ; Select column and row
0A24 D0E0       696            pop acc
0A26 C000       697            push ar0
0A28 A84E       697            mov r0, soak_temp+0
0A2A 120336     697            lcall ?Display_BCD
0A2D D000       697            pop ar0
0A2F C0E0       698            push acc
0A31 7407       698            mov a, #7
0A33 14         698            dec a
0A34 120331     698            lcall ?Set_Cursor_1 ; Select column and row
0A37 D0E0       698            pop acc
0A39 C000       699            push ar0
0A3B A84F       699            mov r0, soak_temp+1
0A3D 120336     699            lcall ?Display_BCD
0A40 D000       699            pop ar0
0A42 C002       700            push AR2
0A44 7AC8       700            mov R2, #200
0A46 1202A9     700            lcall ?Wait_Milli_Seconds
0A49 D002       700            pop AR2         
0A4B E54F       701               mov a, soak_temp+1
0A4D 2401       702               add a, #0x01
0A4F D4         703               da a ; Decimal adjust instruction.  Check datasheet for more details!
0A50 F54F       704               mov soak_temp+1, a
0A52 E54F       705               mov a, soak_temp+1
0A54 7009       706               jnz INC_soak_temp_done2
0A56 E54E       707               mov a, soak_temp+0
0A58 2401       708               add a, #0x01
0A5A D4         709               da a ; Decimal adjust instruction.  Check datasheet for more details!
0A5B F54E       710               mov soak_temp+0, a
0A5D E54F       711               mov a, soak_temp+1
0A5F            712               INC_soak_temp_done2:
0A5F            713               
0A5F 020A0A     714               ljmp loop_hold_inc_soak
0A62            715           hold_done_soak:
0A62            716           
0A62            717   
0A62            718   
0A62            719           check_decrement2_soak:
0A62 20A664     720               jb Button_min, DEC_soak_temp_done2  
0A65 C002       721            push AR2
0A67 7A32       721            mov R2, #50
0A69 1202A9     721            lcall ?Wait_Milli_Seconds
0A6C D002       721            pop AR2         
0A6E 20A658     722               jb Button_min, DEC_soak_temp_done2  
0A71            723               loop_hold_dec_soak:
0A71            724   
0A71 30A60F     725               jnb Button_min, jump7
0A74 C002       726            push AR2
0A76 7A64       726            mov R2, #100
0A78 1202A9     726            lcall ?Wait_Milli_Seconds
0A7B D002       726            pop AR2
0A7D 30A603     727               jnb Button_min, jump7
0A80 020AC9     728               ljmp DEC_soak_temp_done2
0A83            729               jump7:
0A83 C0E0       730            push acc
0A85 7405       730            mov a, #5
0A87 14         730            dec a
0A88 120331     730            lcall ?Set_Cursor_1 ; Select column and row
0A8B D0E0       730            pop acc
0A8D C000       731            push ar0
0A8F A84E       731            mov r0, soak_temp+0
0A91 120336     731            lcall ?Display_BCD
0A94 D000       731            pop ar0
0A96 C0E0       732            push acc
0A98 7407       732            mov a, #7
0A9A 14         732            dec a
0A9B 120331     732            lcall ?Set_Cursor_1 ; Select column and row
0A9E D0E0       732            pop acc
0AA0 C000       733            push ar0
0AA2 A84F       733            mov r0, soak_temp+1
0AA4 120336     733            lcall ?Display_BCD
0AA7 D000       733            pop ar0
0AA9 C002       734            push AR2
0AAB 7A64       734            mov R2, #100
0AAD 1202A9     734            lcall ?Wait_Milli_Seconds
0AB0 D002       734            pop AR2         
0AB2 E54F       735               mov a, soak_temp+1
0AB4 2499       736               add a, #0x99
0AB6 D4         737               da a ; Decimal adjust instruction.  Check datasheet for more details!
0AB7 F54F       738               mov soak_temp+1, a
0AB9 E54F       739               mov a, soak_temp+1
0ABB 7009       740               jnz INC_soak_temp_done
0ABD E54E       741               mov a, soak_temp+0
0ABF 2499       742               add a, #0x99
0AC1 D4         743               da a ; Decimal adjust instruction.  Check datasheet for more details!
0AC2 F54E       744               mov soak_temp+0, a
0AC4 E54F       745               mov a, soak_temp+1
0AC6            746               INC_soak_temp_done:
0AC6            747               
0AC6 020A71     748               ljmp loop_hold_dec_soak
0AC9            749   
0AC9            750           DEC_soak_temp_done2:
0AC9 22         751           ret
0ACA            752   second_page:
0ACA C0E0       753            push acc
0ACC 7401       753            mov a, #1
0ACE 14         753            dec a
0ACF 120331     753            lcall ?Set_Cursor_1 ; Select column and row
0AD2 D0E0       753            pop acc
0AD4 C083       754            push dph
0AD6 C082       754            push dpl
0AD8 C0E0       754            push acc
0ADA 900505     754            mov dptr, #soak_reflw
0ADD 120324     754            lcall ?Send_Constant_String
0AE0 D0E0       754            pop acc
0AE2 D082       754            pop dpl
0AE4 D083       754            pop dph
0AE6 C0E0       755            push acc
0AE8 7401       755            mov a, #1
0AEA 14         755            dec a
0AEB 12032F     755            lcall ?Set_Cursor_2 ; Select column and row
0AEE D0E0       755            pop acc
0AF0 C083       756            push dph
0AF2 C082       756            push dpl
0AF4 C0E0       756            push acc
0AF6 9004BF     756            mov dptr, #nothing
0AF9 120324     756            lcall ?Send_Constant_String
0AFC D0E0       756            pop acc
0AFE D082       756            pop dpl
0B00 D083       756            pop dph
0B02 22         757       ret
0B03            758   ;---------------------------------;
0B03            759   ; Main program. Includes hardware ;
0B03            760   ; initialization and 'forever'    ;
0B03            761   ; loop.                           ;
0B03            762   ;---------------------------------;
0B03            763   MainProgram:
0B03 75817F     764           mov SP, #7FH ; Set the stack pointer to the begining of idata
0B06            765           ; Initialization_LCD
0B06 1202F8     766           lcall LCD_4BIT
0B09            767           ; Initialization_Termometer
0B09 1203FB     768           lcall INIT_SPI
0B0C            769           ; Initialization_timer
0B0C            770       
0B0C 120362     771           lcall Timer0_Init
0B0F            772           ;lcall Timer1_Init
0B0F 12037E     773           lcall Timer2_Init
0B12 D2AF       774           setb EA   ; Enable Global interrupts
0B14 D201       775           setb half_seconds_flag
0B16 755100     776                mov BCD_counter, #0x00
0B19 755400     777           mov reflow_sec, #0x00
0B1C 755500     778           mov reflow_min, #0x00
0B1F 755200     779           mov min, #0x00
0B22 754600     780           mov state_lcd, #0
0B25 C206       781           clr TR2_flag
0B27 754C01     782           mov reflow_temp+0, #0x01
0B2A 754D50     783           mov reflow_temp+1, #0x50
0B2D C207       784           clr tt_reflow_flag
0B2F 755600     785           mov soak_sec, #0x00
0B32 755700     786           mov soak_min, #0x00
0B35            787   
0B35 754E01     788           mov soak_temp+0, #0x01
0B38 754F50     789           mov soak_temp+1, #0x50
0B3B            790   
0B3B            791           
0B3B            792   
0B3B            793   
0B3B            794       Forever: 
0B3B            795        
0B3B E546       796           mov a, state_lcd
0B3D            797   
0B3D            798   ;        Check_start_Button:
0B3D            799   ;        PushButton(start,Check_stop_button)
0B3D            800   ;        setb TR2
0B3D            801   ;        ljmp forever
0B3D            802   ;        Check_stop_button:
0B3D            803   ;        PushButton(stop_Button, Continue8 )
0B3D            804   ;        clr TR2
0B3D            805   ;        ljmp Forever 
0B3D            806   ;     ;   lcall Reset_timer
0B3D            807   ;        Continue8:
0B3D            808   
0B3D            809           ;----------------STATE 0------------------;
0B3D            810            home_state:
0B3D B4001E     811               cjne a, #0, soak_reflow_state
0B40 20A515     812            jb set_BUTTON, done_home2
0B43 C002       812            push AR2
0B45 7A0A       812            mov R2, #10
0B47 1202A9     812            lcall ?Wait_Milli_Seconds
0B4A D002       812            pop AR2
0B4C 20A509     812            jb set_BUTTON, done_home2
0B4F 30A5FD     812            jnb set_BUTTON, $
0B52            812    
0B52            813               ;setb set_flag  
0B52 754601     814               mov state_lcd, #1
0B55 020B5B     815               ljmp done_home
0B58            816               done_home2:
0B58            817               ;clr set_flag
0B58 120694     818               lcall home_page
0B5B            819               done_home:
0B5B 020B3B     820               ljmp Forever           
0B5E            821           ;------------------------------------------;
0B5E            822           
0B5E            823           ;----------------STATE 1-------------------;
0B5E            824           soak_reflow_state:
0B5E B4014B     825               cjne a, #1, setup_soak
0B61 120ACA     826               lcall second_page
0B64            827             ;  Wait_Milli_Seconds(#50)
0B64 120673     828               lcall sec_counter ; prevent the timer to go over 60
0B67 120683     829               lcall min_counter
0B6A 20A712     830            jb HOME_BUTTON, next_pushb
0B6D C002       830            push AR2
0B6F 7A0A       830            mov R2, #10
0B71 1202A9     830            lcall ?Wait_Milli_Seconds
0B74 D002       830            pop AR2
0B76 20A706     830            jb HOME_BUTTON, next_pushb
0B79 30A7FD     830            jnb HOME_BUTTON, $
0B7C            830    ; check if home button is pressed 
0B7C 754600     831               mov state_lcd, #0
0B7F            832               next_pushb:
0B7F 20A412     833            jb SETUP_SOAK_Button, next_pushb2
0B82 C002       833            push AR2
0B84 7A0A       833            mov R2, #10
0B86 1202A9     833            lcall ?Wait_Milli_Seconds
0B89 D002       833            pop AR2
0B8B 20A406     833            jb SETUP_SOAK_Button, next_pushb2
0B8E 30A4FD     833            jnb SETUP_SOAK_Button, $
0B91            833    ; check if the the button to setup soak is pressed
0B91 754602     834               mov state_lcd, #2
0B94            835               next_pushb2:
0B94 20A612     836            jb Button_min, done_soak
0B97 C002       836            push AR2
0B99 7A0A       836            mov R2, #10
0B9B 1202A9     836            lcall ?Wait_Milli_Seconds
0B9E D002       836            pop AR2
0BA0 20A606     836            jb Button_min, done_soak
0BA3 30A6FD     836            jnb Button_min, $
0BA6            836    ; check if the buttion to setup the reflow was pressed 
0BA6 754603     837               mov state_lcd, #3
0BA9            838               done_soak:
0BA9 020B3B     839              ljmp Forever
0BAC            840           ;------------------------------------------;
0BAC            841   
0BAC            842           ;-----------------STATE 2------------------;
0BAC            843           setup_soak: ; its actually set up reflow Im dumb
0BAC B40221     844               cjne a, #2, setup_reflow
0BAF 1206AA     845               lcall setup_reflow_page
0BB2            846             ;  Wait_Milli_Seconds(#50)
0BB2 120673     847               lcall sec_counter ; prevent the timer to go over 60
0BB5 120683     848               lcall min_counter
0BB8 20A712     849            jb HOME_BUTTON, done_setup_soak
0BBB C002       849            push AR2
0BBD 7A0A       849            mov R2, #10
0BBF 1202A9     849            lcall ?Wait_Milli_Seconds
0BC2 D002       849            pop AR2
0BC4 20A706     849            jb HOME_BUTTON, done_setup_soak
0BC7 30A7FD     849            jnb HOME_BUTTON, $
0BCA            849    ; check if home button is pressed 
0BCA 754600     850               mov state_lcd, #0
0BCD            851               done_setup_soak:
0BCD 020B3B     852               ljmp Forever
0BD0            853           ;------------------------------------------;
0BD0            854   
0BD0            855           ;----------------STATE 3-------------------;
0BD0            856           setup_reflow: ; its actually set up soak Im dumb
0BD0 B40303     857               cjne a, #3, FDP
0BD3 020BD9     858               ljmp FDP2
0BD6            859               FDP:
0BD6 020B3D     860               ljmp home_state
0BD9            861               FDP2:
0BD9 1208BA     862               lcall setup_soak_page
0BDC 120673     863               lcall sec_counter ; prevent the timer to go over 60
0BDF 120683     864               lcall min_counter
0BE2 20A712     865            jb HOME_BUTTON, done_setup_reflow
0BE5 C002       865            push AR2
0BE7 7A0A       865            mov R2, #10
0BE9 1202A9     865            lcall ?Wait_Milli_Seconds
0BEC D002       865            pop AR2
0BEE 20A706     865            jb HOME_BUTTON, done_setup_reflow
0BF1 30A7FD     865            jnb HOME_BUTTON, $
0BF4            865    ; check if home button is pressed 
0BF4 754600     866               mov state_lcd, #0
0BF7            867               done_setup_reflow:
0BF7 020B3B     868               ljmp Forever
0BFA            869           ;------------------------------------------;
0BFA            870   EN
