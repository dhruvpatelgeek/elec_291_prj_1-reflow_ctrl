0000              1   ;Start/Constants
                 -1       $MODLP51
0000              1   ;--------------------------------------------------------
0000              2   ; Special Function Registers
0000              3   ;--------------------------------------------------------
0000              4   ACC            DATA 0xe0
0000              5   B              DATA 0xf0
0000              6   PSW            DATA 0xd0
0000              7   SP             DATA 0x81
0000              8   SPX            DATA 0xef
0000              9   DPL            DATA 0x82
0000             10   DPH            DATA 0x83
0000             11   DPLB           DATA 0xd4
0000             12   DPHB           DATA 0xd5
0000             13   PAGE           DATA 0xf6
0000             14   AX             DATA 0xe1
0000             15   BX             DATA 0xf7
0000             16   DSPR           DATA 0xe2
0000             17   FIRD           DATA 0xe3
0000             18   MACL           DATA 0xe4
0000             19   MACH           DATA 0xe5
0000             20   PCON           DATA 0x87
0000             21   AUXR           DATA 0x8e
0000             22   AUXR1          DATA 0xa2
0000             23   DPCF           DATA 0xa1
0000             24   CKRL           DATA 0x97
0000             25   CKCKON0        DATA 0x8f
0000             26   CKCKON1        DATA 0xaf
0000             27   CKSEL          DATA 0x85
0000             28   CLKREG         DATA 0xae
0000             29   OSCCON         DATA 0x85
0000             30   IE             DATA 0xa8
0000             31   IEN0           DATA 0xa8
0000             32   IEN1           DATA 0xb1
0000             33   IPH0           DATA 0xb7
0000             34   IP             DATA 0xb8
0000             35   IPL0           DATA 0xb8
0000             36   IPH1           DATA 0xb3
0000             37   IPL1           DATA 0xb2
0000             38   P0             DATA 0x80
0000             39   P1             DATA 0x90
0000             40   P2             DATA 0xa0
0000             41   P3             DATA 0xb0
0000             42   P4             DATA 0xc0
0000             43   P0M0           DATA 0xe6
0000             44   P0M1           DATA 0xe7
0000             45   P1M0           DATA 0xd6
0000             46   P1M1           DATA 0xd7
0000             47   P2M0           DATA 0xce
0000             48   P2M1           DATA 0xcf
0000             49   P3M0           DATA 0xc6
0000             50   P3M1           DATA 0xc7
0000             51   P4M0           DATA 0xbe
0000             52   P4M1           DATA 0xbf
0000             53   SCON           DATA 0x98
0000             54   SBUF           DATA 0x99
0000             55   SADEN          DATA 0xb9
0000             56   SADDR          DATA 0xa9
0000             57   BDRCON         DATA 0x9b
0000             58   BRL            DATA 0x9a
0000             59   TCON           DATA 0x88
0000             60   TMOD           DATA 0x89
0000             61   TCONB          DATA 0x91
0000             62   TL0            DATA 0x8a
0000             63   TH0            DATA 0x8c
0000             64   TL1            DATA 0x8b
0000             65   TH1            DATA 0x8d
0000             66   RL0            DATA 0xf2
0000             67   RL1            DATA 0xf3
0000             68   RH0            DATA 0xf4
0000             69   RH1            DATA 0xf5
0000             70   WDTRST         DATA 0xa6
0000             71   WDTPRG         DATA 0xa7
0000             72   T2CON          DATA 0xc8
0000             73   T2MOD          DATA 0xc9
0000             74   RCAP2H         DATA 0xcb
0000             75   RCAP2L         DATA 0xca
0000             76   TH2            DATA 0xcd
0000             77   TL2            DATA 0xcc
0000             78   SPCON          DATA 0xc3
0000             79   SPSTA          DATA 0xc4
0000             80   SPDAT          DATA 0xc5
0000             81   SSCON          DATA 0x93
0000             82   SSCS           DATA 0x94
0000             83   SSDAT          DATA 0x95
0000             84   SSADR          DATA 0x96
0000             85   KBLS           DATA 0x9c
0000             86   KBE            DATA 0x9d
0000             87   KBF            DATA 0x9e
0000             88   KBMOD          DATA 0x9f
0000             89   BMSEL          DATA 0x92
0000             90   FCON           DATA 0xd2
0000             91   EECON          DATA 0xd2
0000             92   ACSRA          DATA 0xa3
0000             93   ACSRB          DATA 0xab
0000             94   AREF           DATA 0xbd
0000             95   DADC           DATA 0xa4
0000             96   DADI           DATA 0xa5
0000             97   DADL           DATA 0xac
0000             98   DADH           DATA 0xad
0000             99   CCON           DATA 0xd8
0000            100   CMOD           DATA 0xd9
0000            101   CL             DATA 0xe9
0000            102   CH             DATA 0xf9
0000            103   CCAPM0         DATA 0xda
0000            104   CCAPM1         DATA 0xdb
0000            105   CCAPM2         DATA 0xdc
0000            106   CCAPM3         DATA 0xdd
0000            107   CCAPM4         DATA 0xde
0000            108   CCAP0H         DATA 0xfa
0000            109   CCAP1H         DATA 0xfb
0000            110   CCAP2H         DATA 0xfc
0000            111   CCAP3H         DATA 0xfd
0000            112   CCAP4H         DATA 0xfe
0000            113   CCAP0L         DATA 0xea
0000            114   CCAP1L         DATA 0xeb
0000            115   CCAP2L         DATA 0xec
0000            116   CCAP3L         DATA 0xed
0000            117   CCAP4L         DATA 0xee
0000            118   ;--------------------------------------------------------
0000            119   ; special function bits
0000            120   ;--------------------------------------------------------
0000            121   P              BIT 0xd0
0000            122   F1             BIT 0xd1
0000            123   OV             BIT 0xd2
0000            124   RS0            BIT 0xd3
0000            125   RS1            BIT 0xd4
0000            126   F0             BIT 0xd5
0000            127   AC             BIT 0xd6
0000            128   CY             BIT 0xd7
0000            129   EX0            BIT 0xa8
0000            130   ET0            BIT 0xa9
0000            131   EX1            BIT 0xaa
0000            132   ET1            BIT 0xab
0000            133   ES             BIT 0xac
0000            134   ET2            BIT 0xad
0000            135   EC             BIT 0xae
0000            136   EA             BIT 0xaf
0000            137   PX0            BIT 0xb8
0000            138   PT0            BIT 0xb9
0000            139   PX1            BIT 0xba
0000            140   PT1            BIT 0xbb
0000            141   PS             BIT 0xbc
0000            142   PT2            BIT 0xbd
0000            143   IP0D           BIT 0xbf
0000            144   PPCL           BIT 0xbe
0000            145   PT2L           BIT 0xbd
0000            146   PLS            BIT 0xbc
0000            147   PT1L           BIT 0xbb
0000            148   PX1L           BIT 0xba
0000            149   PT0L           BIT 0xb9
0000            150   PX0L           BIT 0xb8
0000            151   RXD            BIT 0xb0
0000            152   TXD            BIT 0xb1
0000            153   INT0           BIT 0xb2
0000            154   INT1           BIT 0xb3
0000            155   T0             BIT 0xb4
0000            156   T1             BIT 0xb5
0000            157   WR             BIT 0xb6
0000            158   RD             BIT 0xb7
0000            159   RI             BIT 0x98
0000            160   TI             BIT 0x99
0000            161   RB8            BIT 0x9a
0000            162   TB8            BIT 0x9b
0000            163   REN            BIT 0x9c
0000            164   SM2            BIT 0x9d
0000            165   SM1            BIT 0x9e
0000            166   SM0            BIT 0x9f
0000            167   IT0            BIT 0x88
0000            168   IE0            BIT 0x89
0000            169   IT1            BIT 0x8a
0000            170   IE1            BIT 0x8b
0000            171   TR0            BIT 0x8c
0000            172   TF0            BIT 0x8d
0000            173   TR1            BIT 0x8e
0000            174   TF1            BIT 0x8f
0000            175   CP_RL2         BIT 0xc8
0000            176   C_T2           BIT 0xc9
0000            177   TR2            BIT 0xca
0000            178   EXEN2          BIT 0xcb
0000            179   TCLK           BIT 0xcc
0000            180   RCLK           BIT 0xcd
0000            181   EXF2           BIT 0xce
0000            182   TF2            BIT 0xcf
0000            183   CF             BIT 0xdf
0000            184   CR             BIT 0xde
0000            185   CCF4           BIT 0xdc
0000            186   CCF3           BIT 0xdb
0000            187   CCF2           BIT 0xda
0000            188   CCF1           BIT 0xd9
0000            189   CCF0           BIT 0xd8
0000              3           ; Reset vector
0000              4           org 0x0000
0000 020BC3       5               ljmp MainProgram
0003              6   
0003              7           ; External interrupt 0 vector (not used in this code)
0003              8           org 0x0003
0003 32           9               reti
0004             10   
0004             11           ; Timer/Counter 0 overflow interrupt vector
000B             12           org 0x000B
000B 02037B      13               ljmp Timer0_ISR
000E             14   
000E             15           ; External interrupt 1 vector (not used in this code)
0013             16           org 0x0013
0013 32          17               reti
0014             18   
0014             19           ; Timer/Counter 1 overflow interrupt vector (not used in this code)
001B             20           org 0x001B
001B 32          21               reti
001C             22   
001C             23           ; Serial port receive/transmit interrupt vector (not used in this code)
0023             24           org 0x0023 
0023 32          25               reti
0024             26               
0024             27           ; Timer/Counter 2 overflow interrupt vector
002B             28           org 0x002B
002B 020397      29               ljmp Timer2_ISR
002E             30   
002E             31       ;CLK  EQU 22118400
002E             32       CLK  EQU 22118400
002E             33       ;termometer
002E             34       BAUD equ 115200
002E             35       BRG_VAL equ (0x100-(CLK/(16*BAUD)))
002E             36       ;timer
002E             37       TIMER0_RATE   EQU 4096     ; 2048Hz squarewave (peak amplitude of CEM-1203 speaker)
002E             38       TIMER0_RELOAD EQU ((65536-(CLK/TIMER0_RATE)))
002E             39       TIMER2_RATE   EQU 1000     ; 1000Hz, for a timer tick of 1ms
002E             40       TIMER2_RELOAD EQU ((65536-(CLK/TIMER2_RATE)))
002E             41   
002E             42   
002E             43       ; There is a couple of typos in MODLP51 in the definition of the timer 0/1 reload
002E             44       ; special function registers (SFRs), so:
002E             45   
002E             46       TIMER0_RELOAD_L DATA 0xf2
002E             47       TIMER1_RELOAD_L DATA 0xf3
002E             48       TIMER0_RELOAD_H DATA 0xf4
002E             49       TIMER1_RELOAD_H DATA 0xf5
002E             50   
002E             51   ;Variables (dseg)
0030             52       DSEG at 30H
0030             53   
0030             54       Result:    ds 4
0034             55       x:         ds 4
0038             56       y:         ds 4
003C             57       bcd:       ds 5
0041             58       ;FSM varialbles
0041             59       temp_soak: ds 1
0042             60       time_soak: ds 1
0043             61       temp_refl: ds 1
0044             62       time_refl: ds 1
0045             63       state:     ds 1
0046             64       state_lcd: ds 1
0047             65       temp:      ds 1
0048             66       sec:       ds 1
0049             67       pwm:       ds 1 ; Register that controls the power of the oven 
004A             68       ;;owen_temp ds 1
004A             69   
004A             70       ;Timer variables
004A             71       Count1ms:     ds 2 ; Used to determine when half second has passed
004C             72       reflow_temp:  ds 2
004E             73       soak_temp:    ds 2
0050             74       reflow_temp_var: ds 1
0051             75       BCD_counter:  ds 1 ; The BCD counter incrememted in the ISR and displayed in the main loop
0052             76       minutes:          ds 1
0053             77       hour:         ds 1
0054             78       reflow_sec:   ds 1
0055             79       reflow_min:   ds 1
0056             80       soak_sec:     ds 1
0057             81       soak_min:     ds 1
0058             82       alarm_min:    ds 1
0059             83       alarm_hour:   ds 1
005A             84       day:          ds 1
005B             85       month:        ds 1
005C             86       year:         ds 1
005D             87       hour_24:      ds 1
005E             88   
005E             89   
005E             90   ;flags (bseg)
0000             91       bseg
0000             92       mf:                dbit 1
0001             93       half_seconds_flag: dbit 1 ; Set to one in the ISR every time 500 ms had passed
0002             94       AMPM_flag:         dbit 1
0003             95       alarm_AMPM_flag:   dbit 1
0004             96       on_off_flag:       dbit 1 ; 1 is on
0005             97       alarm_buzzer_flag: dbit 1
0006             98       TR2_flag:          dbit 1
0007             99       tt_reflow_flag:    dbit 1
0008            100       tt_flag_soak:      dbit 1
0009            101   
0009            102   ;Pins Config (cseg)
002E            103       CSEG 
002E            104   
002E            105       done_button equ P0.0    
002E            106       done                   equ P0.1
002E            107       setup                  equ P0.2
002E            108       setmin                 equ P0.3
002E            109       sethour        equ P0.4
002E            110       setday        equ P0.5
002E            111   
002E            112       start         equ P0.7
002E            113   
002E            114       LCD_RS        equ P1.1
002E            115       LCD_RW        equ P1.2
002E            116       LCD_E         equ P1.3
002E            117       start2         equ p1.7   ;in slide it was KEY.3 which should be decided later so p1.7 is just a random pin
002E            118   
002E            119   
002E            120       ; These �EQU� must match the wiring between the microcontroller and ADC 
002E            121       CE_ADC       EQU  P2.0 
002E            122       MY_MOSI      EQU  P2.1 
002E            123       MY_MISO      EQU  P2.2 
002E            124       MY_SCLK      EQU  P2.3
002E            125       SETUP_SOAK_Button equ  P2.4
002E            126       set_BUTTON           equ  P2.5
002E            127       Button_min    equ  P2.6
002E            128       HOME_BUTTON   equ  P2.7
002E            129   
002E            130       ;LCD 4bits data
002E            131       LCD_D4        equ  P3.2
002E            132       LCD_D5        equ  P3.3
002E            133       LCD_D6        equ  P3.4
002E            134       LCD_D7        equ  P3.5
002E            135   
002E            136       BOOT_BUTTON   equ  P4.5
002E            137       SOUND_OUT     equ  P3.7
002E            138   
002E            139   ;include files 
                546   $LIST
                142   	    $LIST
0362            144   
0362            145   
0362            146   ;ISR
0362            147   
0362            148       
0362            149       ;---------------------------------;
0362            150       ; Routine to initialize the ISR   ;
0362            151       ; for timer 0                     ;
0362            152       ;---------------------------------;
0362            153       Timer0_Init:
0362 E589       154           mov a, TMOD
0364 54F0       155           anl a, #0xf0 ; Clear the bits for timer 0
0366 4401       156           orl a, #0x01 ; Configure timer 0 as 16-timer
0368 F589       157           mov TMOD, a
036A 758CEA     158           mov TH0, #high(TIMER0_RELOAD)
036D 758AE8     159           mov TL0, #low(TIMER0_RELOAD)
0370            160           ; Set autoreload value
0370 75F4EA     161           mov TIMER0_RELOAD_H, #high(TIMER0_RELOAD)
0373 75F2E8     162           mov TIMER0_RELOAD_L, #low(TIMER0_RELOAD)
0376            163           ; Enable the timer and interrupts
0376 D2A9       164           setb ET0  ; Enable timer 0 interrupt
0378 D28C       165           setb TR0  ; Start timer 0
037A 22         166           ret
037B            167   
037B            168       ;---------------------------------;
037B            169       ; ISR for timer 0.  Set to execute;
037B            170       ; every 1/4096Hz to generate a    ;
037B            171       ; 2048 Hz square wave at pin P3.7 ;
037B            172       ;---------------------------------;
037B            173       Timer0_ISR:
037B            174           ;clr TF0  ; According to the data sheet this is done for us already.
037B B2B7       175           cpl SOUND_OUT ; Connect speaker to P3.7!
037D 32         176           reti
037E            177   
037E            178       ;---------------------------------;
037E            179       ; Routine to initialize the ISR   ;
037E            180       ; for timer 2                     ;
037E            181       ;---------------------------------;
037E            182       Timer2_Init:
037E 75C800     183           mov T2CON, #0 ; Stop timer/counter.  Autoreload mode.
0381 75CDA9     184           mov TH2, #high(TIMER2_RELOAD)
0384 75CC9A     185           mov TL2, #low(TIMER2_RELOAD)
0387            186           ; Set the reload value
0387 75CBA9     187           mov RCAP2H, #high(TIMER2_RELOAD)
038A 75CA9A     188           mov RCAP2L, #low(TIMER2_RELOAD)
038D            189           ; Init One millisecond interrupt counter.  It is a 16-bit variable made with two 8-bit parts
038D E4         190           clr a
038E F54A       191           mov Count1ms+0, a
0390 F54B       192           mov Count1ms+1, a
0392            193           ; Enable the timer and interrupts
0392 D2AD       194           setb ET2  ; Enable timer 2 interrupt
0394 D2CA       195           setb TR2  ; Enable timer 2
0396 22         196           ret
0397            197   
0397            198       ;---------------------------------;
0397            199       ; ISR for timer 2                 ;
0397            200       ;---------------------------------;
0397            201       Timer2_ISR:
0397 C2CF       202           clr TF2  ; Timer 2 doesn't clear TF2 automatically. Do it in ISR
0399 B2B6       203           cpl P3.6 ; To check the interrupt rate with oscilloscope. It must be precisely a 1 ms pulse.
039B            204           
039B            205           ; The two registers used in the ISR must be saved in the stack
039B C0E0       206           push acc
039D C0D0       207           push psw
039F            208           
039F            209           ; Increment the 16-bit one mili second counter
039F 054A       210           inc Count1ms+0    ; Increment the low 8-bits first
03A1 E54A       211           mov a, Count1ms+0 ; If the low 8-bits overflow, then increment high 8-bits
03A3 7002       212           jnz Inc_Done
03A5 054B       213           inc Count1ms+1
03A7            214   
03A7            215       Inc_Done:
03A7            216           ; Check if half second has passed
03A7 E54A       217           mov a, Count1ms+0
03A9 B4E817     218           cjne a, #low(1000), Timer2_ISR_done ; Warning: this instruction changes the carry flag!
03AC E54B       219           mov a, Count1ms+1
03AE B40312     220           cjne a, #high(1000), Timer2_ISR_done
03B1            221           
03B1            222           ; 500 milliseconds have passed.  Set a flag so the main program knows
03B1 D201       223           setb half_seconds_flag ; Let the main program know half second had passed
03B3 B28C       224           cpl TR0 ; Enable/disable timer/counter 0. This line creates a beep-silence-beep-silence sound.
03B5            225           ; Reset to zero the milli-seconds counter, it is a 16-bit variable
03B5 E4         226           clr a
03B6 F54A       227           mov Count1ms+0, a
03B8 F54B       228           mov Count1ms+1, a
03BA            229           ; Increment the BCD counter
03BA E551       230           mov a, BCD_counter
03BC            231          ; jnb UPDOWN, Timer2_ISR_decrement
03BC 2401       232           add a, #0x01
03BE 8000       233           sjmp Timer2_ISR_da
03C0            234       Timer2_ISR_decrement:
03C0            235          ; add a, #0x99 ; Adding the 10-complement of -1 is like subtracting 1.
03C0            236       Timer2_ISR_da:
03C0 D4         237           da a ; Decimal adjust instruction.  Check datasheet for more details!
03C1 F551       238           mov BCD_counter, a
03C3            239           
03C3            240       Timer2_ISR_done:
03C3 D0D0       241           pop psw
03C5 D0E0       242           pop acc
03C7 32         243           reti
03C8            244   Strings:
03C8            245       ;Hello_World:
03C8            246           ;DB  'Hello, World!', '\r', '\n', 0
03C8            247       Newline:
03C8 0D0A00     248               DB   '\r', '\n', 0
03CB            249       Space:
03CB 20202020   250               DB   '      ','\r', '\n', 0
     20200D0A
     00
03D4            251   
03D4            252                       ;     1234567890123456
03D4 54656D70   253       Temp0:            db 'Temp:xxxC       ', 0
     3A787878
     43202020
     20202020
     00
03E5 20202020   254       nothing:          db '                ',0
     20202020
     20202020
     20202020
     00
03F6 20202020   255       test2:            db '      Test2     ',0
     20205465
     73743220
     20202020
     00
0407 20202020   256       hot:                           db '      HOT       ', 0
     2020484F
     54202020
     20202020
     00
0418 54696D65   257       Time:             db 'Time xx:xx SET  ', 0
     2078783A
     78782053
     45542020
     00
0429 3A00       258       dots:             db ':',0
042B 2020534F   259       soak_reflw:       db '  SOAK  REFLOW  ', 0
     414B2020
     5245464C
     4F572020
     00
043C 54656D70   260       reflow_setup:     db 'Temp',0
     00
0441 2A524546   261       reflow_setup4:    db '*REFLOW*',0
     4C4F572A
     00
044A 54696D65   262       reflow_setup2:    db 'Time',0
     00
044F 484F4D45   263       reflow_setup3:    db 'HOME',0
     00
0454            264   
0454 54656D70   265       soak_setup0:      db 'Temp',0
     00
0459 202A534F   266       soak_setup1:      db ' *SOAK*',0
     414B2A00
0461 54696D65   267       soak_setup2:      db 'Time',0
     00
0466 484F4D45   268       soak_setup3:      db 'HOME',0
     00
046B            269   
046B            270   
046B            271   
046B            272   ;CONFIG Putty:
046B            273       ; Configure the serial port and baud rate
046B            274       InitSerialPort:
046B            275           ; Since the reset button bounces, we need to wait a bit before
046B            276           ; sending messages, otherwise we risk displaying gibberish!
046B 79DE       277           mov R1, #222
046D 78A6       278           mov R0, #166
046F D8FE       279           djnz R0, $   ; 3 cycles->3*45.21123ns*166=22.51519us
0471 D9FA       280           djnz R1, $-4 ; 22.51519us*222=4.998ms
0473            281           ; Now we can proceed with the configuration
0473 438780     282           orl      PCON,#0x80
0476 759852     283           mov      SCON,#0x52
0479 759B00     284           mov      BDRCON,#0x00
047C 759AF4     285           mov      BRL,#BRG_VAL
047F 759B1E     286           mov      BDRCON,#0x1E ; BDRCON=BRR|TBCK|RBCK|SPD;
0482 22         287           ret
0483            288   
0483            289       ; Send a character using the serial port
0483            290       putchar:
0483 3099FD     291           jnb TI, putchar 
0486            292           ; TI serial interrupt flag is set and when last bit (stop bit) 
0486            293           ; of receiving data byte is received, RI flag get set. IE register
0486            294           ; is used to enable/disable interrupt sources.
0486 C299       295           clr TI
0488 F599       296           mov SBUF, a
048A 22         297           ret
048B            298   
048B            299       getchar: 
048B 3098FD     300           jnb RI, getchar 
048E C298       301           clr RI 
0490 E599       302           mov a, SBUF 
0492 22         303           ret
0493            304   
0493            305       ; Send a constant-zero-terminated string using the serial port
0493            306       SendString:
0493 E4         307           clr A
0494 93         308           movc A, @A+DPTR
0495 6006       309           jz SendStringDone
0497 120483     310           lcall putchar
049A A3         311           inc DPTR
049B 80F6       312           sjmp SendString
049D            313       SendStringDone:
049D 22         314           ret
049E            315   
049E            316       INIT_SPI:     
049E D2A2       317           setb MY_MISO    ; Make MISO an input pin  1 master input 0 slave out   ;MISO master in/slave out
04A0 C2A3       318           clr MY_SCLK     ; For mode (0,0) SCLK is zero     
04A2 22         319           ret 
04A3            320   
04A3            321       DO_SPI_G:     
04A3 C0E0       322           push acc     
04A5 7900       323           mov R1, #0      ; Received byte stored in R1     
04A7 7A08       324           mov R2, #8      ; Loop counter (8-bits)
04A9            325           
04A9            326       DO_SPI_G_LOOP:     
04A9 E8         327           mov a, R0       ; Byte to write is in R0     
04AA 33         328           rlc a           ; Carry flag has bit to write 
04AB F8         329           mov R0, a     
04AC 92A1       330           mov MY_MOSI, c     
04AE D2A3       331           setb MY_SCLK    ; Transmit     
04B0 A2A2       332           mov c, MY_MISO  ; Read received bit     
04B2 E9         333           mov a, R1       ; Save received bit in R1     
04B3 33         334           rlc a     
04B4 F9         335           mov R1, a     
04B5 C2A3       336           clr MY_SCLK     
04B7 DAF0       337           djnz R2, DO_SPI_G_LOOP     
04B9 D0E0       338           pop acc     
04BB 22         339           ret 
04BC            340       
04BC            341   WaitHalfSec:
04BC 7AB2       342           mov R2, #178
04BE 79FA       343           Lr3: mov R1, #250
04C0 78A6       344           Lr2: mov R0, #166
04C2 D8FE       345           Lr1: djnz R0, Lr1 ; 3 cycles->3*45.21123ns*166=22.51519us
04C4 D9FA       346           djnz R1, Lr2 ; 22.51519us*250=5.629ms
04C6 DAF6       347           djnz R2, Lr3 ; 5.629ms*89=0.5s (approximately)
04C8 22         348           ret
04C9            349            
04C9            350   blink:
04C9 75817F     351           mov SP, #7FH
04CC 75C700     352           mov P3M1, #0   ; Configure P3 in bidirectional mode
04CF            353       M0:
04CF B2B7       354           cpl P3.7
04D1 C0E0       355            push acc
04D3 7401       355            mov a, #1
04D5 14         355            dec a
04D6 120331     355            lcall ?Set_Cursor_1 ; Select column and row
04D9 D0E0       355            pop acc
04DB C083       356            push dph
04DD C082       356            push dpl
04DF C0E0       356            push acc
04E1 9003E5     356            mov dptr, #nothing
04E4 120324     356            lcall ?Send_Constant_String
04E7 D0E0       356            pop acc
04E9 D082       356            pop dpl
04EB D083       356            pop dph
04ED C0E0       357            push acc
04EF 7401       357            mov a, #1
04F1 14         357            dec a
04F2 12032F     357            lcall ?Set_Cursor_2 ; Select column and row
04F5 D0E0       357            pop acc
04F7 C083       358            push dph
04F9 C082       358            push dpl
04FB C0E0       358            push acc
04FD 9003E5     358            mov dptr, #nothing
0500 120324     358            lcall ?Send_Constant_String
0503 D0E0       358            pop acc
0505 D082       358            pop dpl
0507 D083       358            pop dph
0509 C0E0       359            push acc
050B 7401       359            mov a, #1
050D 14         359            dec a
050E 120331     359            lcall ?Set_Cursor_1 ; Select column and row
0511 D0E0       359            pop acc
0513 C083       360            push dph
0515 C082       360            push dpl
0517 C0E0       360            push acc
0519 900407     360            mov dptr, #hot
051C 120324     360            lcall ?Send_Constant_String
051F D0E0       360            pop acc
0521 D082       360            pop dpl
0523 D083       360            pop dph
0525 C0E0       361            push acc
0527 7401       361            mov a, #1
0529 14         361            dec a
052A 12032F     361            lcall ?Set_Cursor_2 ; Select column and row
052D D0E0       361            pop acc
052F C083       362            push dph
0531 C082       362            push dpl
0533 C0E0       362            push acc
0535 900407     362            mov dptr, #hot
0538 120324     362            lcall ?Send_Constant_String
053B D0E0       362            pop acc
053D D082       362            pop dpl
053F D083       362            pop dph
0541            363   
0541 1204BC     364           lcall WaitHalfSec
0544            365   
0544 22         366           ret
0545            367   
0545            368   convert:
0545 853034     369       mov x+0, Result
0548 853135     370            mov x+1, Result+1 
054B 753600     371            mov x+2, #0
054E 753700     372            mov x+3, #0
0551 22         373       ret
0552            374       
0552            375   
0552            376   Display_temp:
0552 75389A     377            mov y+0, #low (410 % 0x10000) 
0555 753901     377            mov y+1, #high(410 % 0x10000) 
0558 753A00     377            mov y+2, #low (410 / 0x10000) 
055B 753B00     377            mov y+3, #high(410 / 0x10000) 
055E 1201A8     378       lcall mul32
0561 7538FF     379            mov y+0, #low (1023 % 0x10000) 
0564 753903     379            mov y+1, #high(1023 % 0x10000) 
0567 753A00     379            mov y+2, #low (1023 / 0x10000) 
056A 753B00     379            mov y+3, #high(1023 / 0x10000) 
056D 120235     380       lcall div32
0570 753811     381            mov y+0, #low (273 % 0x10000) 
0573 753901     381            mov y+1, #high(273 % 0x10000) 
0576 753A00     381            mov y+2, #low (273 / 0x10000) 
0579 753B00     381            mov y+3, #high(273 / 0x10000) 
057C 120114     382       lcall sub32
057F 12002E     383       lcall hex2bcd
0582 12046B     384       lcall InitSerialPort
0585 C0E0       385            push acc
0587 7401       385            mov a, #1
0589 14         385            dec a
058A 120331     385            lcall ?Set_Cursor_1 ; Select column and row
058D D0E0       385            pop acc
058F C083       386            push dph
0591 C082       386            push dpl
0593 C0E0       386            push acc
0595 9003D4     386            mov dptr, #Temp0
0598 120324     386            lcall ?Send_Constant_String
059B D0E0       386            pop acc
059D D082       386            pop dpl
059F D083       386            pop dph
05A1 120493     387       lcall SendString
05A4 C0E0       388            push acc
05A6 7405       388            mov a, #5
05A8 14         388            dec a
05A9 120331     388            lcall ?Set_Cursor_1 ; Select column and row
05AC D0E0       388            pop acc    
05AE C000       389            push ar0
05B0 A83D       389            mov r0, bcd+1
05B2 12034C     389            lcall ?Send_BCD
05B5 D000       389            pop ar0 ; send fisrt 2 digits to putty
05B7 C000       390            push ar0
05B9 A83D       390            mov r0, bcd+1
05BB 120336     390            lcall ?Display_BCD
05BE D000       390            pop ar0; send fisrt 2 digits to lcd
05C0 C0E0       391            push acc
05C2 7407       391            mov a, #7
05C4 14         391            dec a
05C5 120331     391            lcall ?Set_Cursor_1 ; Select column and row
05C8 D0E0       391            pop acc 
05CA C000       392            push ar0
05CC A83C       392            mov r0, bcd
05CE 12034C     392            lcall ?Send_BCD
05D1 D000       392            pop ar0 ; send last 2 digits to putty
05D3 C000       393            push ar0
05D5 A83C       393            mov r0, bcd+0
05D7 120336     393            lcall ?Display_BCD
05DA D000       393            pop ar0 ; send last 2 digits to lcd
05DC C0E0       394            push acc
05DE 7405       394            mov a, #5
05E0 14         394            dec a
05E1 120331     394            lcall ?Set_Cursor_1 ; Select column and row
05E4 D0E0       394            pop acc
05E6 C083       395            push dph
05E8 C082       395            push dpl
05EA C0E0       395            push acc
05EC 900429     395            mov dptr, #dots
05EF 120324     395            lcall ?Send_Constant_String
05F2 D0E0       395            pop acc
05F4 D082       395            pop dpl
05F6 D083       395            pop dph
05F8 120493     396       lcall SendString
05FB 9003C8     397       mov DPTR, #Newline
05FE 120493     398       lcall SendString
0601 22         399       ret
0602            400   config_adc:
0602 C2A0       401           clr CE_ADC 
0604 7801       402           mov R0, #00000001B; Start bit:1 
0606 1204A3     403           lcall DO_SPI_G
0609            404   
0609 7880       405           mov R0, #10000000B; Single ended, read channel 0 
060B 1204A3     406           lcall DO_SPI_G 
060E E9         407           mov a, R1          ; R1 contains bits 8 and 9 
060F 5403       408           anl a, #00000011B  ; We need only the two least significant bits 
0611 F531       409           mov Result+1, a    ; Save result high.
0613            410   
0613 7855       411           mov R0, #55H; It doesn't matter what we transmit... 
0615 1204A3     412           lcall DO_SPI_G 
0618 8930       413           mov Result, R1     ; R1 contains bits 0 to 7.  Save result low. 
061A D2A0       414           setb CE_ADC 
061C 120545     415           lcall convert  
061F E53C       416           mov a, bcd ; move temp to accumulator 
0621 22         417           ret
0622            418   Reset_timer:
0622            419   
0622 C2CA       420       clr TR2                 ; Stop timer 2
0624 E4         421       clr a
0625 F54A       422            mov Count1ms+0, a
0627 F54B       423            mov Count1ms+1, a
0629            424            ; Now clear the BCD counter and minutes
0629 F551       425            mov BCD_counter, a
062B D2CA       426            setb TR2                ; Start timer 2
062D            427   
062D 22         428       ret
062E            429   Display_time:
062E C0E0       430            push acc
0630 7401       430            mov a, #1
0632 14         430            dec a
0633 12032F     430            lcall ?Set_Cursor_2 ; Select column and row
0636 D0E0       430            pop acc
0638 C083       431            push dph
063A C082       431            push dpl
063C C0E0       431            push acc
063E 900418     431            mov dptr, #Time
0641 120324     431            lcall ?Send_Constant_String
0644 D0E0       431            pop acc
0646 D082       431            pop dpl
0648 D083       431            pop dph
064A C201       432       clr half_seconds_flag ; We clear this flag in the main loop, but it is set in the ISR for timer 2
064C C0E0       433            push acc
064E 7409       433            mov a, #9
0650 14         433            dec a
0651 12032F     433            lcall ?Set_Cursor_2 ; Select column and row
0654 D0E0       433            pop acc     ; the place in the LCD where we want the BCD counter value
0656 C000       434            push ar0
0658 A851       434            mov r0, BCD_counter
065A 120336     434            lcall ?Display_BCD
065D D000       434            pop ar0 ; This macro is also in 'LCD_4bit.inc'
065F C0E0       435            push acc
0661 7406       435            mov a, #6
0663 14         435            dec a
0664 12032F     435            lcall ?Set_Cursor_2 ; Select column and row
0667 D0E0       435            pop acc     ; the place in the LCD where we want the BCD counter value
0669 C000       436            push ar0
066B A852       436            mov r0, minutes
066D 120336     436            lcall ?Display_BCD
0670 D000       436            pop ar0 ; This macro is also in 'LCD_4bit.inc'
0672            437   
0672 22         438       ret
0673            439   ;Timer couter 
0673            440       sec_counter: 
0673 E551       441           mov a,BCD_counter
0675 B4600A     442           cjne a, #0x60, Continue1 ; check if the couter reached 60s
0678 E552       443           mov a, minutes
067A 2401       444           add a, #0x01 ; add one to the minutes
067C D4         445           da a ; Decimal adjust instruction.  Check datasheet for more details!
067D F552       446           mov minutes, a
067F 120622     447           lcall Reset_timer
0682            448                Continue1:
0682 22         449           ret
0683            450       min_counter:
0683 E552       451                    mov a,minutes
0685 B4600B     452                    cjne a, #0x60, Continue2
0688 C2CA       453                    clr TR2                 ; Stop timer 2
068A E4         454                    clr a                   
068B F54A       455                    mov Count1ms+0, a
068D F54B       456                    mov Count1ms+1, a       ; Now clear the BCD counter
068F F552       457                    mov minutes, a              ; Reset minutes
0691 D2CA       458           setb TR2                ; Start timer 2
0693            459   
0693            460                    Continue2:
0693 22         461           ret
0694            462   home_page:
0694            463       ;--------Timer----------;
0694 300109     464       jnb half_seconds_flag, Temp_sensor
0697 120673     465       lcall sec_counter
069A 120683     466       lcall min_counter
069D 12062E     467       lcall Display_time
06A0            468       ;-----------------------;
06A0            469               
06A0            470       ;-----TEMP SENSOR-------;
06A0            471       Temp_sensor:
06A0 300106     472       jnb half_seconds_flag, Return
06A3 120602     473       lcall config_adc
06A6 120552     474       lcall Display_temp
06A9            475       Return:
06A9            476       ;-----------------------;
06A9 22         477       ret
06AA            478   
06AA            479   setup_reflow_page:
06AA 20A511     480            jb set_BUTTON, continue9
06AD C002       480            push AR2
06AF 7A0A       480            mov R2, #10
06B1 1202A9     480            lcall ?Wait_Milli_Seconds
06B4 D002       480            pop AR2
06B6 20A505     480            jb set_BUTTON, continue9
06B9 30A5FD     480            jnb set_BUTTON, $
06BC            480   
06BC B207       481       cpl tt_reflow_flag
06BE            482       continue9:
06BE            483   
06BE 200706     484       jb tt_reflow_flag, jump1
06C1            485       ;jnb tt_reflow_flag, jump1
06C1 1207A3     486       lcall INC_DEC_Reflow_time
06C4 0206CA     487       ljmp display_reflow_page
06C7            488       jump1:
06C7 1207EB     489       lcall INC_DEC_Reflow_temp
06CA            490   
06CA            491   
06CA            492       display_reflow_page:
06CA C0E0       493            push acc
06CC 7405       493            mov a, #5
06CE 14         493            dec a
06CF 120331     493            lcall ?Set_Cursor_1 ; Select column and row
06D2 D0E0       493            pop acc
06D4 C000       494            push ar0
06D6 A84C       494            mov r0, reflow_temp+0
06D8 120336     494            lcall ?Display_BCD
06DB D000       494            pop ar0
06DD C0E0       495            push acc
06DF 7407       495            mov a, #7
06E1 14         495            dec a
06E2 120331     495            lcall ?Set_Cursor_1 ; Select column and row
06E5 D0E0       495            pop acc
06E7 C000       496            push ar0
06E9 A84D       496            mov r0, reflow_temp+1
06EB 120336     496            lcall ?Display_BCD
06EE D000       496            pop ar0
06F0            497          
06F0            498       
06F0 C0E0       499            push acc
06F2 7401       499            mov a, #1
06F4 14         499            dec a
06F5 120331     499            lcall ?Set_Cursor_1 ; Select column and row
06F8 D0E0       499            pop acc
06FA C083       500            push dph
06FC C082       500            push dpl
06FE C0E0       500            push acc
0700 90043C     500            mov dptr, #reflow_setup
0703 120324     500            lcall ?Send_Constant_String
0706 D0E0       500            pop acc
0708 D082       500            pop dpl
070A D083       500            pop dph
070C C0E0       501            push acc
070E 7409       501            mov a, #9
0710 14         501            dec a
0711 120331     501            lcall ?Set_Cursor_1 ; Select column and row
0714 D0E0       501            pop acc
0716 C083       502            push dph
0718 C082       502            push dpl
071A C0E0       502            push acc
071C 900441     502            mov dptr, #reflow_setup4
071F 120324     502            lcall ?Send_Constant_String
0722 D0E0       502            pop acc
0724 D082       502            pop dpl
0726 D083       502            pop dph
0728            503   
0728 C0E0       504            push acc
072A 7401       504            mov a, #1
072C 14         504            dec a
072D 12032F     504            lcall ?Set_Cursor_2 ; Select column and row
0730 D0E0       504            pop acc
0732 C083       505            push dph
0734 C082       505            push dpl
0736 C0E0       505            push acc
0738 90044A     505            mov dptr, #reflow_setup2
073B 120324     505            lcall ?Send_Constant_String
073E D0E0       505            pop acc
0740 D082       505            pop dpl
0742 D083       505            pop dph
0744 C0E0       506            push acc
0746 7408       506            mov a, #8
0748 14         506            dec a
0749 12032F     506            lcall ?Set_Cursor_2 ; Select column and row
074C D0E0       506            pop acc
074E C083       507            push dph
0750 C082       507            push dpl
0752 C0E0       507            push acc
0754 900429     507            mov dptr, #dots
0757 120324     507            lcall ?Send_Constant_String
075A D0E0       507            pop acc
075C D082       507            pop dpl
075E D083       507            pop dph
0760 C0E0       508            push acc
0762 740C       508            mov a, #12
0764 14         508            dec a
0765 12032F     508            lcall ?Set_Cursor_2 ; Select column and row
0768 D0E0       508            pop acc
076A C083       509            push dph
076C C082       509            push dpl
076E C0E0       509            push acc
0770 90044F     509            mov dptr, #reflow_setup3
0773 120324     509            lcall ?Send_Constant_String
0776 D0E0       509            pop acc
0778 D082       509            pop dpl
077A D083       509            pop dph
077C C0E0       510            push acc
077E 7409       510            mov a, #9
0780 14         510            dec a
0781 12032F     510            lcall ?Set_Cursor_2 ; Select column and row
0784 D0E0       510            pop acc
0786 C000       511            push ar0
0788 A854       511            mov r0, reflow_sec
078A 120336     511            lcall ?Display_BCD
078D D000       511            pop ar0
078F C0E0       512            push acc
0791 7406       512            mov a, #6
0793 14         512            dec a
0794 12032F     512            lcall ?Set_Cursor_2 ; Select column and row
0797 D0E0       512            pop acc
0799 C000       513            push ar0
079B A855       513            mov r0, reflow_min
079D 120336     513            lcall ?Display_BCD
07A0 D000       513            pop ar0
07A2            514   
07A2 22         515       ret
07A3            516       INC_DEC_Reflow_time:
07A3            517   
07A3 20A424     518            jb SETUP_SOAK_Button, check_decrement
07A6 C002       518            push AR2
07A8 7A0A       518            mov R2, #10
07AA 1202A9     518            lcall ?Wait_Milli_Seconds
07AD D002       518            pop AR2
07AF 20A418     518            jb SETUP_SOAK_Button, check_decrement
07B2 30A4FD     518            jnb SETUP_SOAK_Button, $
07B5            518    ; setup soak is also used to increment 
07B5            519   
07B5 E554       520           mov a, reflow_sec
07B7 B4590B     521           cjne a, #0x59, add_reflow_sec
07BA E555       522           mov a, reflow_min
07BC 2401       523           add a, #0x01
07BE D4         524           da a
07BF F555       525           mov reflow_min, a
07C1 E4         526           clr a 
07C2 0207C8     527           ljmp Continue5
07C5            528           add_reflow_sec:
07C5 2401       529           add a, #0x01
07C7 D4         530           da a ; Decimal adjust instruction.  Check datasheet for more details!
07C8            531           Continue5:
07C8 F554       532           mov reflow_sec, a
07CA            533   
07CA            534           check_decrement:
07CA 20A61D     535            jb Button_min, continue8
07CD C002       535            push AR2
07CF 7A0A       535            mov R2, #10
07D1 1202A9     535            lcall ?Wait_Milli_Seconds
07D4 D002       535            pop AR2
07D6 20A611     535            jb Button_min, continue8
07D9 30A6FD     535            jnb Button_min, $
07DC            535   
07DC E554       536           mov a, reflow_sec
07DE B40004     537           cjne a, #0x00, sub_reflow_sec
07E1 E4         538           clr a 
07E2 0207E8     539           ljmp Continue6
07E5            540           sub_reflow_sec:
07E5 2499       541           add a, #0x99 ; add 99 reduces 1
07E7 D4         542           da a ; Decimal adjust instruction.  Check datasheet for more details!
07E8            543           Continue6:
07E8 F554       544           mov reflow_sec, a
07EA            545           continue8:
07EA 22         546           ret
07EB            547       INC_DEC_Reflow_temp:
07EB            548           ;PushButton(SETUP_SOAK_Button,check_decrement2) ; setup soak is also used to increment 
07EB            549   
07EB 20A464     550               jb SETUP_SOAK_Button, check_decrement2  
07EE C002       551            push AR2
07F0 7A32       551            mov R2, #50
07F2 1202A9     551            lcall ?Wait_Milli_Seconds
07F5 D002       551            pop AR2         
07F7 20A458     552               jb SETUP_SOAK_Button, check_decrement2  
07FA            553               loop_hold_inc:
07FA            554   
07FA 30A40F     555               jnb SETUP_SOAK_Button, jump2
07FD C002       556            push AR2
07FF 7A64       556            mov R2, #100
0801 1202A9     556            lcall ?Wait_Milli_Seconds
0804 D002       556            pop AR2
0806 30A403     557               jnb SETUP_SOAK_Button, jump2
0809 020852     558               ljmp hold_done
080C            559               jump2:
080C C0E0       560            push acc
080E 7405       560            mov a, #5
0810 14         560            dec a
0811 120331     560            lcall ?Set_Cursor_1 ; Select column and row
0814 D0E0       560            pop acc
0816 C000       561            push ar0
0818 A84C       561            mov r0, reflow_temp+0
081A 120336     561            lcall ?Display_BCD
081D D000       561            pop ar0
081F C0E0       562            push acc
0821 7407       562            mov a, #7
0823 14         562            dec a
0824 120331     562            lcall ?Set_Cursor_1 ; Select column and row
0827 D0E0       562            pop acc
0829 C000       563            push ar0
082B A84D       563            mov r0, reflow_temp+1
082D 120336     563            lcall ?Display_BCD
0830 D000       563            pop ar0
0832 C002       564            push AR2
0834 7A64       564            mov R2, #100
0836 1202A9     564            lcall ?Wait_Milli_Seconds
0839 D002       564            pop AR2         
083B E54D       565               mov a, reflow_temp+1
083D 2401       566               add a, #0x01
083F D4         567               da a ; Decimal adjust instruction.  Check datasheet for more details!
0840 F54D       568               mov reflow_temp+1, a
0842 E54D       569               mov a, reflow_temp+1
0844 7009       570               jnz INC_reflow_temp_done2
0846 E54C       571               mov a, reflow_temp+0
0848 2401       572               add a, #0x01
084A D4         573               da a ; Decimal adjust instruction.  Check datasheet for more details!
084B F54C       574               mov reflow_temp+0, a
084D E54D       575               mov a, reflow_temp+1
084F            576               INC_reflow_temp_done2:
084F            577               
084F 0207FA     578               ljmp loop_hold_inc
0852            579           hold_done:
0852            580           
0852            581   
0852            582   
0852            583           check_decrement2:
0852 20A664     584               jb Button_min, DEC_reflow_temp_done2  
0855 C002       585            push AR2
0857 7A32       585            mov R2, #50
0859 1202A9     585            lcall ?Wait_Milli_Seconds
085C D002       585            pop AR2         
085E 20A658     586               jb Button_min, DEC_reflow_temp_done2  
0861            587               loop_hold_dec:
0861            588   
0861 30A60F     589               jnb Button_min, jump3
0864 C002       590            push AR2
0866 7A64       590            mov R2, #100
0868 1202A9     590            lcall ?Wait_Milli_Seconds
086B D002       590            pop AR2
086D 30A603     591               jnb Button_min, jump3
0870 0208B9     592               ljmp DEC_reflow_temp_done2
0873            593               jump3:
0873 C0E0       594            push acc
0875 7405       594            mov a, #5
0877 14         594            dec a
0878 120331     594            lcall ?Set_Cursor_1 ; Select column and row
087B D0E0       594            pop acc
087D C000       595            push ar0
087F A84C       595            mov r0, reflow_temp+0
0881 120336     595            lcall ?Display_BCD
0884 D000       595            pop ar0
0886 C0E0       596            push acc
0888 7407       596            mov a, #7
088A 14         596            dec a
088B 120331     596            lcall ?Set_Cursor_1 ; Select column and row
088E D0E0       596            pop acc
0890 C000       597            push ar0
0892 A84D       597            mov r0, reflow_temp+1
0894 120336     597            lcall ?Display_BCD
0897 D000       597            pop ar0
0899 C002       598            push AR2
089B 7A64       598            mov R2, #100
089D 1202A9     598            lcall ?Wait_Milli_Seconds
08A0 D002       598            pop AR2         
08A2 E54D       599               mov a, reflow_temp+1
08A4 2499       600               add a, #0x99
08A6 D4         601               da a ; Decimal adjust instruction.  Check datasheet for more details!
08A7 F54D       602               mov reflow_temp+1, a
08A9 E54D       603               mov a, reflow_temp+1
08AB 7009       604               jnz INC_reflow_temp_done
08AD E54C       605               mov a, reflow_temp+0
08AF 2499       606               add a, #0x99
08B1 D4         607               da a ; Decimal adjust instruction.  Check datasheet for more details!
08B2 F54C       608               mov reflow_temp+0, a
08B4 E54D       609               mov a, reflow_temp+1
08B6            610               INC_reflow_temp_done:
08B6            611               
08B6 020861     612               ljmp loop_hold_dec
08B9            613   
08B9            614           DEC_reflow_temp_done2:
08B9            615       
08B9            616   
08B9 22         617       ret
08BA            618   setup_soak_page:
08BA 20A511     619            jb set_BUTTON, continue11
08BD C002       619            push AR2
08BF 7A0A       619            mov R2, #10
08C1 1202A9     619            lcall ?Wait_Milli_Seconds
08C4 D002       619            pop AR2
08C6 20A505     619            jb set_BUTTON, continue11
08C9 30A5FD     619            jnb set_BUTTON, $
08CC            619   
08CC B208       620       cpl tt_flag_soak
08CE            621       continue11:
08CE            622   
08CE 200806     623       jb tt_flag_soak, jump4
08D1 1209B3     624       lcall INC_DEC_soak_time
08D4 0208DA     625       ljmp display_soak_page
08D7            626       jump4:
08D7 1209FB     627       lcall INC_DEC_soak_temp
08DA            628   
08DA            629   
08DA            630       display_soak_page:
08DA C0E0       631            push acc
08DC 7405       631            mov a, #5
08DE 14         631            dec a
08DF 120331     631            lcall ?Set_Cursor_1 ; Select column and row
08E2 D0E0       631            pop acc
08E4 C000       632            push ar0
08E6 A84E       632            mov r0, soak_temp+0
08E8 120336     632            lcall ?Display_BCD
08EB D000       632            pop ar0
08ED C0E0       633            push acc
08EF 7407       633            mov a, #7
08F1 14         633            dec a
08F2 120331     633            lcall ?Set_Cursor_1 ; Select column and row
08F5 D0E0       633            pop acc
08F7 C000       634            push ar0
08F9 A84F       634            mov r0, soak_temp+1
08FB 120336     634            lcall ?Display_BCD
08FE D000       634            pop ar0
0900            635          
0900            636       
0900 C0E0       637            push acc
0902 7401       637            mov a, #1
0904 14         637            dec a
0905 120331     637            lcall ?Set_Cursor_1 ; Select column and row
0908 D0E0       637            pop acc
090A C083       638            push dph
090C C082       638            push dpl
090E C0E0       638            push acc
0910 900454     638            mov dptr, #soak_setup0
0913 120324     638            lcall ?Send_Constant_String
0916 D0E0       638            pop acc
0918 D082       638            pop dpl
091A D083       638            pop dph
091C C0E0       639            push acc
091E 7409       639            mov a, #9
0920 14         639            dec a
0921 120331     639            lcall ?Set_Cursor_1 ; Select column and row
0924 D0E0       639            pop acc
0926            639   
0926 C083       640            push dph
0928 C082       640            push dpl
092A C0E0       640            push acc
092C 900459     640            mov dptr, #soak_setup1
092F 120324     640            lcall ?Send_Constant_String
0932 D0E0       640            pop acc
0934 D082       640            pop dpl
0936 D083       640            pop dph
0938            641   
0938 C0E0       642            push acc
093A 7401       642            mov a, #1
093C 14         642            dec a
093D 12032F     642            lcall ?Set_Cursor_2 ; Select column and row
0940 D0E0       642            pop acc
0942            642   
0942 C083       643            push dph
0944 C082       643            push dpl
0946 C0E0       643            push acc
0948 900461     643            mov dptr, #soak_setup2
094B 120324     643            lcall ?Send_Constant_String
094E D0E0       643            pop acc
0950 D082       643            pop dpl
0952 D083       643            pop dph
0954 C0E0       644            push acc
0956 7408       644            mov a, #8
0958 14         644            dec a
0959 12032F     644            lcall ?Set_Cursor_2 ; Select column and row
095C D0E0       644            pop acc
095E            644   
095E C083       645            push dph
0960 C082       645            push dpl
0962 C0E0       645            push acc
0964 900429     645            mov dptr, #dots
0967 120324     645            lcall ?Send_Constant_String
096A D0E0       645            pop acc
096C D082       645            pop dpl
096E D083       645            pop dph
0970 C0E0       646            push acc
0972 740C       646            mov a, #12
0974 14         646            dec a
0975 12032F     646            lcall ?Set_Cursor_2 ; Select column and row
0978 D0E0       646            pop acc
097A C083       647            push dph
097C C082       647            push dpl
097E C0E0       647            push acc
0980 900466     647            mov dptr, #soak_setup3
0983 120324     647            lcall ?Send_Constant_String
0986 D0E0       647            pop acc
0988 D082       647            pop dpl
098A D083       647            pop dph
098C C0E0       648            push acc
098E 7409       648            mov a, #9
0990 14         648            dec a
0991 12032F     648            lcall ?Set_Cursor_2 ; Select column and row
0994 D0E0       648            pop acc
0996            648   
0996 C000       649            push ar0
0998 A856       649            mov r0, soak_sec
099A 120336     649            lcall ?Display_BCD
099D D000       649            pop ar0
099F C0E0       650            push acc
09A1 7406       650            mov a, #6
09A3 14         650            dec a
09A4 12032F     650            lcall ?Set_Cursor_2 ; Select column and row
09A7 D0E0       650            pop acc
09A9 C000       651            push ar0
09AB A857       651            mov r0, soak_min
09AD 120336     651            lcall ?Display_BCD
09B0 D000       651            pop ar0
09B2 22         652   ret
09B3            653       INC_DEC_soak_time:
09B3            654       
09B3 20A424     655            jb SETUP_SOAK_Button, check_decrement_soak
09B6 C002       655            push AR2
09B8 7A0A       655            mov R2, #10
09BA 1202A9     655            lcall ?Wait_Milli_Seconds
09BD D002       655            pop AR2
09BF 20A418     655            jb SETUP_SOAK_Button, check_decrement_soak
09C2 30A4FD     655            jnb SETUP_SOAK_Button, $
09C5            655    ; setup soak is also used to increment 
09C5            656   
09C5 E556       657           mov a, soak_sec
09C7 B4590B     658           cjne a, #0x59, add_soak_sec
09CA E557       659           mov a, soak_min
09CC 2401       660           add a, #0x01
09CE D4         661           da a
09CF F557       662           mov soak_min, a
09D1 E4         663           clr a 
09D2 0209D8     664           ljmp Continue12
09D5            665           add_soak_sec:
09D5 2401       666           add a, #0x01
09D7 D4         667           da a ; Decimal adjust instruction.  Check datasheet for more details!
09D8            668           Continue12:
09D8 F556       669           mov soak_sec, a
09DA            670   
09DA            671           check_decrement_soak:
09DA 20A61D     672            jb Button_min, continue13
09DD C002       672            push AR2
09DF 7A0A       672            mov R2, #10
09E1 1202A9     672            lcall ?Wait_Milli_Seconds
09E4 D002       672            pop AR2
09E6 20A611     672            jb Button_min, continue13
09E9 30A6FD     672            jnb Button_min, $
09EC            672   
09EC E556       673           mov a, soak_sec
09EE B40004     674           cjne a, #0x00, sub_soak_sec
09F1 E4         675           clr a 
09F2 0209F8     676           ljmp Continue14
09F5            677           sub_soak_sec:
09F5 2499       678           add a, #0x99 ; add 99 reduces 1
09F7 D4         679           da a ; Decimal adjust instruction.  Check datasheet for more details!
09F8            680           Continue14:
09F8 F556       681           mov soak_sec, a
09FA            682           continue13:
09FA            683           
09FA 22         684           ret
09FB            685       INC_DEC_soak_temp:
09FB            686           
09FB 20A464     687               jb SETUP_SOAK_Button, check_decrement2_soak  
09FE C002       688            push AR2
0A00 7A32       688            mov R2, #50
0A02 1202A9     688            lcall ?Wait_Milli_Seconds
0A05 D002       688            pop AR2         
0A07 20A458     689               jb SETUP_SOAK_Button, check_decrement2_soak  
0A0A            690               loop_hold_inc_soak:
0A0A            691   
0A0A 30A40F     692               jnb SETUP_SOAK_Button, jump6
0A0D C002       693            push AR2
0A0F 7A64       693            mov R2, #100
0A11 1202A9     693            lcall ?Wait_Milli_Seconds
0A14 D002       693            pop AR2
0A16 30A403     694               jnb SETUP_SOAK_Button, jump6
0A19 020A62     695               ljmp hold_done_soak
0A1C            696               jump6:
0A1C C0E0       697            push acc
0A1E 7405       697            mov a, #5
0A20 14         697            dec a
0A21 120331     697            lcall ?Set_Cursor_1 ; Select column and row
0A24 D0E0       697            pop acc
0A26 C000       698            push ar0
0A28 A84E       698            mov r0, soak_temp+0
0A2A 120336     698            lcall ?Display_BCD
0A2D D000       698            pop ar0
0A2F C0E0       699            push acc
0A31 7407       699            mov a, #7
0A33 14         699            dec a
0A34 120331     699            lcall ?Set_Cursor_1 ; Select column and row
0A37 D0E0       699            pop acc
0A39 C000       700            push ar0
0A3B A84F       700            mov r0, soak_temp+1
0A3D 120336     700            lcall ?Display_BCD
0A40 D000       700            pop ar0
0A42 C002       701            push AR2
0A44 7AC8       701            mov R2, #200
0A46 1202A9     701            lcall ?Wait_Milli_Seconds
0A49 D002       701            pop AR2         
0A4B E54F       702               mov a, soak_temp+1
0A4D 2401       703               add a, #0x01
0A4F D4         704               da a ; Decimal adjust instruction.  Check datasheet for more details!
0A50 F54F       705               mov soak_temp+1, a
0A52 E54F       706               mov a, soak_temp+1
0A54 7009       707               jnz INC_soak_temp_done2
0A56 E54E       708               mov a, soak_temp+0
0A58 2401       709               add a, #0x01
0A5A D4         710               da a ; Decimal adjust instruction.  Check datasheet for more details!
0A5B F54E       711               mov soak_temp+0, a
0A5D E54F       712               mov a, soak_temp+1
0A5F            713               INC_soak_temp_done2:
0A5F            714               
0A5F 020A0A     715               ljmp loop_hold_inc_soak
0A62            716           hold_done_soak:
0A62            717           
0A62            718   
0A62            719   
0A62            720           check_decrement2_soak:
0A62 20A664     721               jb Button_min, DEC_soak_temp_done2  
0A65 C002       722            push AR2
0A67 7A32       722            mov R2, #50
0A69 1202A9     722            lcall ?Wait_Milli_Seconds
0A6C D002       722            pop AR2         
0A6E 20A658     723               jb Button_min, DEC_soak_temp_done2  
0A71            724               loop_hold_dec_soak:
0A71            725   
0A71 30A60F     726               jnb Button_min, jump7
0A74 C002       727            push AR2
0A76 7A64       727            mov R2, #100
0A78 1202A9     727            lcall ?Wait_Milli_Seconds
0A7B D002       727            pop AR2
0A7D 30A603     728               jnb Button_min, jump7
0A80 020AC9     729               ljmp DEC_soak_temp_done2
0A83            730               jump7:
0A83 C0E0       731            push acc
0A85 7405       731            mov a, #5
0A87 14         731            dec a
0A88 120331     731            lcall ?Set_Cursor_1 ; Select column and row
0A8B D0E0       731            pop acc
0A8D C000       732            push ar0
0A8F A84E       732            mov r0, soak_temp+0
0A91 120336     732            lcall ?Display_BCD
0A94 D000       732            pop ar0
0A96 C0E0       733            push acc
0A98 7407       733            mov a, #7
0A9A 14         733            dec a
0A9B 120331     733            lcall ?Set_Cursor_1 ; Select column and row
0A9E D0E0       733            pop acc
0AA0 C000       734            push ar0
0AA2 A84F       734            mov r0, soak_temp+1
0AA4 120336     734            lcall ?Display_BCD
0AA7 D000       734            pop ar0
0AA9 C002       735            push AR2
0AAB 7A64       735            mov R2, #100
0AAD 1202A9     735            lcall ?Wait_Milli_Seconds
0AB0 D002       735            pop AR2         
0AB2 E54F       736               mov a, soak_temp+1
0AB4 2499       737               add a, #0x99
0AB6 D4         738               da a ; Decimal adjust instruction.  Check datasheet for more details!
0AB7 F54F       739               mov soak_temp+1, a
0AB9 E54F       740               mov a, soak_temp+1
0ABB 7009       741               jnz INC_soak_temp_done
0ABD E54E       742               mov a, soak_temp+0
0ABF 2499       743               add a, #0x99
0AC1 D4         744               da a ; Decimal adjust instruction.  Check datasheet for more details!
0AC2 F54E       745               mov soak_temp+0, a
0AC4 E54F       746               mov a, soak_temp+1
0AC6            747               INC_soak_temp_done:
0AC6            748               
0AC6 020A71     749               ljmp loop_hold_dec_soak
0AC9            750   
0AC9            751           DEC_soak_temp_done2:
0AC9 22         752           ret
0ACA            753   second_page:
0ACA C0E0       754            push acc
0ACC 7401       754            mov a, #1
0ACE 14         754            dec a
0ACF 120331     754            lcall ?Set_Cursor_1 ; Select column and row
0AD2 D0E0       754            pop acc
0AD4 C083       755            push dph
0AD6 C082       755            push dpl
0AD8 C0E0       755            push acc
0ADA 90042B     755            mov dptr, #soak_reflw
0ADD 120324     755            lcall ?Send_Constant_String
0AE0 D0E0       755            pop acc
0AE2 D082       755            pop dpl
0AE4 D083       755            pop dph
0AE6 C0E0       756            push acc
0AE8 7401       756            mov a, #1
0AEA 14         756            dec a
0AEB 12032F     756            lcall ?Set_Cursor_2 ; Select column and row
0AEE D0E0       756            pop acc
0AF0 C083       757            push dph
0AF2 C082       757            push dpl
0AF4 C0E0       757            push acc
0AF6 9003E5     757            mov dptr, #nothing
0AF9 120324     757            lcall ?Send_Constant_String
0AFC D0E0       757            pop acc
0AFE D082       757            pop dpl
0B00 D083       757            pop dph
0B02 22         758       ret
0B03            759   
0B03            760   FSM_LCD:
0B03 E546       761           mov a, state_lcd
0B05            762   
0B05            763   
0B05            764           ;----------------STATE 0------------------;
0B05            765            home_state:
0B05 B4001E     766               cjne a, #0, soak_reflow_state
0B08 20A515     767            jb set_BUTTON, done_home2
0B0B C002       767            push AR2
0B0D 7A0A       767            mov R2, #10
0B0F 1202A9     767            lcall ?Wait_Milli_Seconds
0B12 D002       767            pop AR2
0B14 20A509     767            jb set_BUTTON, done_home2
0B17 30A5FD     767            jnb set_BUTTON, $
0B1A            767    
0B1A            768               ;setb set_flag  
0B1A 754601     769               mov state_lcd, #1
0B1D 020B23     770               ljmp done_home
0B20            771               done_home2:
0B20            772               ;clr set_flag
0B20 120694     773               lcall home_page
0B23            774               done_home:
0B23 020BC2     775               ljmp Forever_done           
0B26            776           ;------------------------------------------;
0B26            777           
0B26            778           ;----------------STATE 1-------------------;
0B26            779           soak_reflow_state:
0B26 B4014B     780               cjne a, #1, setup_soak
0B29 120ACA     781               lcall second_page
0B2C            782             ;  Wait_Milli_Seconds(#50)
0B2C 120673     783               lcall sec_counter ; prevent the timer to go over 60
0B2F 120683     784               lcall min_counter
0B32 20A712     785            jb HOME_BUTTON, next_pushb
0B35 C002       785            push AR2
0B37 7A0A       785            mov R2, #10
0B39 1202A9     785            lcall ?Wait_Milli_Seconds
0B3C D002       785            pop AR2
0B3E 20A706     785            jb HOME_BUTTON, next_pushb
0B41 30A7FD     785            jnb HOME_BUTTON, $
0B44            785    ; check if home button is pressed 
0B44 754600     786               mov state_lcd, #0
0B47            787               next_pushb:
0B47 20A412     788            jb SETUP_SOAK_Button, next_pushb2
0B4A C002       788            push AR2
0B4C 7A0A       788            mov R2, #10
0B4E 1202A9     788            lcall ?Wait_Milli_Seconds
0B51 D002       788            pop AR2
0B53 20A406     788            jb SETUP_SOAK_Button, next_pushb2
0B56 30A4FD     788            jnb SETUP_SOAK_Button, $
0B59            788    ; check if the the button to setup soak is pressed
0B59 754602     789               mov state_lcd, #2
0B5C            790               next_pushb2:
0B5C 20A612     791            jb Button_min, done_soak
0B5F C002       791            push AR2
0B61 7A0A       791            mov R2, #10
0B63 1202A9     791            lcall ?Wait_Milli_Seconds
0B66 D002       791            pop AR2
0B68 20A606     791            jb Button_min, done_soak
0B6B 30A6FD     791            jnb Button_min, $
0B6E            791    ; check if the buttion to setup the reflow was pressed 
0B6E 754603     792               mov state_lcd, #3
0B71            793               done_soak:
0B71 020BC2     794              ljmp Forever_done 
0B74            795           ;------------------------------------------;
0B74            796   
0B74            797           ;-----------------STATE 2------------------;
0B74            798           setup_soak: ; its actually set up reflow Im dumb
0B74 B40221     799               cjne a, #2, setup_reflow
0B77 1206AA     800               lcall setup_reflow_page
0B7A            801             ;  Wait_Milli_Seconds(#50)
0B7A 120673     802               lcall sec_counter ; prevent the timer to go over 60
0B7D 120683     803               lcall min_counter
0B80 20A712     804            jb HOME_BUTTON, done_setup_soak
0B83 C002       804            push AR2
0B85 7A0A       804            mov R2, #10
0B87 1202A9     804            lcall ?Wait_Milli_Seconds
0B8A D002       804            pop AR2
0B8C 20A706     804            jb HOME_BUTTON, done_setup_soak
0B8F 30A7FD     804            jnb HOME_BUTTON, $
0B92            804    ; check if home button is pressed 
0B92 754600     805               mov state_lcd, #0
0B95            806               done_setup_soak:
0B95 020BC2     807               ljmp Forever_done 
0B98            808           ;------------------------------------------;
0B98            809   
0B98            810           ;----------------STATE 3-------------------;
0B98            811           setup_reflow: ; its actually set up soak Im dumb
0B98 B40303     812               cjne a, #3, FDP
0B9B 020BA1     813               ljmp FDP2
0B9E            814               FDP:
0B9E 020B05     815               ljmp home_state
0BA1            816               FDP2:
0BA1 1208BA     817               lcall setup_soak_page
0BA4 120673     818               lcall sec_counter ; prevent the timer to go over 60
0BA7 120683     819               lcall min_counter
0BAA 20A712     820            jb HOME_BUTTON, done_setup_reflow
0BAD C002       820            push AR2
0BAF 7A0A       820            mov R2, #10
0BB1 1202A9     820            lcall ?Wait_Milli_Seconds
0BB4 D002       820            pop AR2
0BB6 20A706     820            jb HOME_BUTTON, done_setup_reflow
0BB9 30A7FD     820            jnb HOME_BUTTON, $
0BBC            820    ; check if home button is pressed 
0BBC 754600     821               mov state_lcd, #0
0BBF            822               done_setup_reflow:
0BBF 020BC2     823               ljmp Forever_done 
0BC2            824           ;------------------------------------------;
0BC2            825           Forever_done:
0BC2 22         826   ret
0BC3            827   ;---------------------------------;
0BC3            828   ; Main program. Includes hardware ;
0BC3            829   ; initialization and 'forever'    ;
0BC3            830   ; loop.                           ;
0BC3            831   ;---------------------------------;
0BC3            832   MainProgram:
0BC3 75817F     833           mov SP, #7FH ; Set the stack pointer to the begining of idata
0BC6            834           ; Initialization_LCD
0BC6 1202F8     835           lcall LCD_4BIT
0BC9            836           ; Initialization_Termometer
0BC9 12049E     837           lcall INIT_SPI
0BCC            838           ; Initialization_timer
0BCC            839       
0BCC 120362     840           lcall Timer0_Init
0BCF            841           ;lcall Timer1_Init
0BCF 12037E     842           lcall Timer2_Init
0BD2 D2AF       843           setb EA   ; Enable Global interrupts
0BD4 D201       844           setb half_seconds_flag
0BD6 755100     845                mov BCD_counter, #0x00
0BD9            846           
0BD9 755400     847           mov reflow_sec, #0x00
0BDC 755500     848           mov reflow_min, #0x00
0BDF 755200     849           mov minutes, #0x00
0BE2 754600     850           mov state_lcd, #0
0BE5 C206       851           clr TR2_flag
0BE7 754C01     852           mov reflow_temp+0, #0x01
0BEA 754D50     853           mov reflow_temp+1, #0x50
0BED C207       854           clr tt_reflow_flag
0BEF 755600     855           mov soak_sec, #0x00
0BF2 755700     856           mov soak_min, #0x00
0BF5            857   
0BF5 754E01     858           mov soak_temp+0, #0x01
0BF8 754F50     859           mov soak_temp+1, #0x50
0BFB            860   
0BFB            861           
0BFB            862   
0BFB            863   
0BFB            864       Forever: 
0BFB            865        
0BFB 120B03     866        lcall FSM_LCD
0BFE 020BFB     867        ljmp Forever
0C01            868   
0C01            869   EN
